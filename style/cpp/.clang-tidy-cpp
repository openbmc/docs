Checks: '
-*,
bugprone-argument-comment,
bugprone-assert-side-effect,
bugprone-assignment-in-if-condition,
bugprone-bool-pointer-implicit-conversion,
bugprone-branch-clone,
bugprone-casting-through-void,
bugprone-chained-comparison,
bugprone-copy-constructor-init,
bugprone-dangling-handle,
bugprone-dynamic-static-initializers,
bugprone-empty-catch,
bugprone-exception-escape,
bugprone-fold-init-type,
bugprone-forward-declaration-namespace,
bugprone-forwarding-reference-overload,
bugprone-implicit-widening-of-multiplication-result,
bugprone-inaccurate-erase,
bugprone-inc-dec-in-conditions,
bugprone-incorrect-enable-if,
bugprone-incorrect-roundings,
bugprone-infinite-loop,
bugprone-integer-division,
bugprone-lambda-function-name,
bugprone-macro-parentheses,
bugprone-macro-repeated-side-effects,
bugprone-misplaced-operator-in-strlen-in-alloc,
bugprone-misplaced-pointer-arithmetic-in-alloc,
bugprone-misplaced-widening-cast,
bugprone-move-forwarding-reference,
bugprone-multi-level-implicit-pointer-conversion,
bugprone-multiple-new-in-one-expression,
bugprone-multiple-statement-macro,
bugprone-narrowing-conversions,
bugprone-no-escape,
bugprone-non-zero-enum-to-bool-conversion,
bugprone-not-null-terminated-result,
bugprone-optional-value-conversion,
bugprone-parent-virtual-call,
bugprone-posix-return,
bugprone-redundant-branch-condition,
bugprone-reserved-identifier,
bugprone-shared-ptr-array-mismatch,
bugprone-signal-handler,
bugprone-signed-char-misuse,
bugprone-sizeof-container,
bugprone-sizeof-expression,
bugprone-spuriously-wake-up-functions,
bugprone-standalone-empty,
bugprone-string-constructor,
bugprone-string-integer-assignment,
bugprone-string-literal-with-embedded-nul,
bugprone-stringview-nullptr,
bugprone-suspicious-enum-usage,
bugprone-suspicious-include,
bugprone-suspicious-memory-comparison,
bugprone-suspicious-memset-usage,
bugprone-suspicious-missing-comma,
bugprone-suspicious-realloc-usage,
bugprone-suspicious-semicolon,
bugprone-suspicious-string-compare,
bugprone-swapped-arguments,
bugprone-switch-missing-default-case,
bugprone-terminating-continue,
bugprone-throw-keyword-missing,
bugprone-too-small-loop-variable,
bugprone-unchecked-optional-access,
bugprone-undefined-memory-manipulation,
bugprone-undelegated-constructor,
bugprone-unhandled-exception-at-new,
bugprone-unhandled-self-assignment,
bugprone-unique-ptr-array-mismatch,
bugprone-unsafe-functions,
bugprone-unused-local-non-trivial-variable,
bugprone-unused-raii,
bugprone-unused-return-value,
bugprone-use-after-move,
bugprone-virtual-near-miss,
cert-dcl03-c,
cert-dcl21-cpp,
cert-dcl50-cpp,
cert-err34-c,
cert-err52-cpp,
cert-err60-cpp,
cert-fio38-c,
cert-fio54-c,
cert-fio57-c,
cert-env33-c,
cert-fio45-c,
cert-fio62-c,
clang-analyzer-core.*,
clang-analyzer-cplusplus.*,
clang-analyzer-deadcode.*,
clang-analyzer-nullability.*,
clang-analyzer-optin.*,
clang-analyzer-security.*,
clang-analyzer-unix.*,
clang-analyzer-valist,
cppcoreguidelines-pro-type-cstyle-cast,
cppcoreguidelines-pro-type-member-init,
cppcoreguidelines-pro-type-reinterpret-cast,
cppcoreguidelines-pro-type-static-cast-downcast,
cppcoreguidelines-pro-bounds-array-to-pointer-decay,
cppcoreguidelines-pro-bounds-constant-array-index,
cppcoreguidelines-pro-bounds-pointer-arithmetic,
cppcoreguidelines-pro-type-vararg,
cppcoreguidelines-avoid-magic-numbers,
cppcoreguidelines-avoid-non-const-global-variables,
cppcoreguidelines-avoid-goto,
cppcoreguidelines-special-member-functions,
cppcoreguidelines-init-variables,
cppcoreguidelines-no-malloc,
cppcoreguidelines-owning-memory,
cppcoreguidelines-slicing,
cppcoreguidelines-narrowing-conversions,
cppcoreguidelines-pro-type-union-access,
cppcoreguidelines-pro-type-const-cast,
misc-definitions-in-headers,
misc-dangling-handle,
misc-misleading-bidirectional,
misc-new-delete-overloads,
misc-non-copyable-objects,
misc-no-recursion,
misc-redundant-expression,
misc-static-assert,
misc-throw-by-value-catch-by-reference,
misc-undelegated-constructor,
misc-unused-alias-decls,
misc-unused-parameters,
misc-include-cleaner,
misc-confusable-identifiers,
misc-const-correctness,
misc-coroutine-hostile-raii,
modernize-use-auto,
modernize-use-bool-literals,
modernize-use-default-member-init,
modernize-use-emplace,
modernize-use-equals-default,
modernize-use-equals-delete,
modernize-use-nullptr,
modernize-use-override,
modernize-use-using,
modernize-loop-convert,
modernize-pass-by-value,
modernize-redundant-void-arg,
modernize-replace-auto-ptr,
modernize-shrink-to-fit,
modernize-unary-static-assert,
modernize-avoid-bind,
modernize-deprecated-headers,
modernize-deprecated-ios-base-aliases,
modernize-make-shared,
modernize-make-unique,
modernize-raw-string-literal,
modernize-redundant-void-arg,
modernize-replace-disallow-copy-and-assign-macro,
modernize-return-braced-init-list,
modernize-use-noexcept,
modernize-use-transparent-functors
performance-inefficient-algorithm,
performance-inefficient-vector-operation,
performance-move-const-arg,
performance-move-constructor-init,
performance-no-automatic-move,
performance-noexcept-move-constructor,
performance-trivially-destructible,
performance-for-range-copy,
performance-for-range-reference,
performance-unnecessary-copy-initialization,
performance-type-promotion-in-math-fn,
performance-unnecessary-value-param
readability-identifier-naming,
readability-inconsistent-declaration-parameter-name,
readability-braces-around-statements,
readability-else-after-return,
readability-function-cognitive-complexity,
readability-isolate-declaration,
readability-magic-numbers,
readability-make-member-function-const,
readability-named-parameter,
readability-non-const-parameter,
readability-redundant-control-flow,
readability-redundant-declaration,
readability-redundant-member-init,
readability-simplify-boolean-expr,
readability-static-accessed-through-instance,
readability-string-compare,
readability-implicit-bool-cast,
readability-convert-member-functions-to-static,
readability-uppercase-literal-suffix,
readability-use-anyofallof'

WarningsAsErrors: '*'
HeaderFilterRegex: '.*'
CheckOptions:
  - { key: readability-identifier-naming.ClassCase,         value: CamelCase  }
  - { key: readability-identifier-naming.EnumCase,          value: CamelCase  }
  - { key: readability-identifier-naming.EnumConstantCase,  value: camelBack  }
  - { key: readability-identifier-naming.FunctionCase,      value: camelBack  }
  - { key: readability-identifier-naming.NamespaceCase,     value: lower_case }
  - { key: readability-identifier-naming.ParameterCase,     value: camelBack  }
  - { key: readability-identifier-naming.StructCase,        value: CamelCase  }
  - { key: readability-identifier-naming.VariableCase,      value: camelBack  }
