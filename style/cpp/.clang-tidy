# Maintainers.  Remove this note when moving to a repository
# This file represents a set of checks that have been enabled across a variety
# of repositories, and implement a significant improvement in repos ability to
# implement static analysis.  It is recommended to attempt to enable all of them.
# If there are individual lines of code that fail checks but require a temporary bypass
# NOLINTNEXTLINE(<checkname>), NOLINTBEGIN(<check name>), and NOLINTEND(<check name>)
# can be used to handle individual cases.  This is not intended to be complete,
# unchanging, or permanent.  If you as a maintainer find that these checks are
# too difficult to pass, or you find bugs in tidy implementations, please reach
# out on the various project forums and ask for assistance.
#

Checks: '-*,
    bugprone-argument-comment,
    bugprone-assert-side-effect,
    bugprone-assignment-in-if-condition,
    bugprone-bad-signal-to-kill-thread,
    bugprone-bitwise-pointer-cast,
    bugprone-bool-pointer-implicit-conversion,
    bugprone-branch-clone,
    bugprone-casting-through-void,
    bugprone-chained-comparison,
    bugprone-compare-pointer-to-member-virtual-function,
    bugprone-copy-constructor-init,
    bugprone-crtp-constructor-accessibility,
    bugprone-dangling-handle,
    bugprone-dynamic-static-initializers,
    bugprone-empty-catch,
    bugprone-exception-escape,
    bugprone-fold-init-type,
    bugprone-forward-declaration-namespace,
    bugprone-forwarding-reference-overload,
    bugprone-implicit-widening-of-multiplication-result,
    bugprone-inaccurate-erase,
    bugprone-inc-dec-in-conditions,
    bugprone-incorrect-enable-if,
    bugprone-incorrect-enable-shared-from-this,
    bugprone-incorrect-roundings,
    bugprone-infinite-loop,
    bugprone-integer-division,
    bugprone-lambda-function-name,
    bugprone-macro-parentheses,
    bugprone-macro-repeated-side-effects,
    bugprone-misplaced-operator-in-strlen-in-alloc,
    bugprone-misplaced-pointer-arithmetic-in-alloc,
    bugprone-misplaced-widening-cast,
    bugprone-move-forwarding-reference,
    bugprone-multi-level-implicit-pointer-conversion,
    bugprone-multiple-new-in-one-expression,
    bugprone-multiple-statement-macro,
    bugprone-narrowing-conversions,
    bugprone-non-zero-enum-to-bool-conversion,
    bugprone-not-null-terminated-result,
    bugprone-optional-value-conversion,
    bugprone-parent-virtual-call,
    bugprone-pointer-arithmetic-on-polymorphic-object,
    bugprone-posix-return,
    bugprone-redundant-branch-condition,
    bugprone-reserved-identifier,
    bugprone-return-const-ref-from-parameter,
    bugprone-shared-ptr-array-mismatch,
    bugprone-signal-handler,
    bugprone-signed-char-misuse,
    bugprone-sizeof-container,
    bugprone-sizeof-expression,
    bugprone-spuriously-wake-up-functions,
    bugprone-standalone-empty,
    bugprone-string-constructor,
    bugprone-string-integer-assignment,
    bugprone-string-literal-with-embedded-nul,
    bugprone-stringview-nullptr,
    bugprone-suspicious-enum-usage,
    bugprone-suspicious-include,
    bugprone-suspicious-memory-comparison,
    bugprone-suspicious-memset-usage,
    bugprone-suspicious-missing-comma,
    bugprone-suspicious-realloc-usage,
    bugprone-suspicious-semicolon,
    bugprone-suspicious-string-compare,
    bugprone-suspicious-stringview-data-usage,
    bugprone-swapped-arguments,
    bugprone-switch-missing-default-case,
    bugprone-tagged-union-member-count,
    bugprone-terminating-continue,
    bugprone-throw-keyword-missing,
    bugprone-too-small-loop-variable,
    bugprone-unchecked-optional-access,
    bugprone-undefined-memory-manipulation,
    bugprone-undelegated-constructor,
    bugprone-unhandled-exception-at-new,
    bugprone-unhandled-self-assignment,
    bugprone-unique-ptr-array-mismatch,
    bugprone-unsafe-functions,
    bugprone-unused-local-non-trivial-variable,
    bugprone-unused-raii,
    bugprone-unused-return-value,
    bugprone-use-after-move,
    bugprone-virtual-near-miss,
    cert-dcl50-cpp,
    cert-dcl58-cpp,
    cert-env33-c,
    cert-err34-c,
    cert-err52-cpp,
    cert-err58-cpp,
    cert-err60-cpp,
    cert-flp30-c,
    cert-mem57-cpp,
    cert-msc50-cpp,
    cert-msc51-cpp,
    cert-oop57-cpp,
    cert-oop58-cpp,
    clang-analyzer-apiModeling.Errno,
    clang-analyzer-apiModeling.TrustNonnull,
    clang-analyzer-apiModeling.TrustReturnsNonnull,
    clang-analyzer-apiModeling.google.GTest,
    clang-analyzer-apiModeling.llvm.CastValue,
    clang-analyzer-apiModeling.llvm.ReturnValue,
    clang-analyzer-core.BitwiseShift,
    clang-analyzer-core.CallAndMessage,
    clang-analyzer-core.CallAndMessageModeling,
    clang-analyzer-core.DivideZero,
    clang-analyzer-core.DynamicTypePropagation,
    clang-analyzer-core.NonNullParamChecker,
    clang-analyzer-core.NonnilStringConstants,
    clang-analyzer-core.NullDereference,
    clang-analyzer-core.StackAddrEscapeBase,
    clang-analyzer-core.StackAddressEscape,
    clang-analyzer-core.UndefinedBinaryOperatorResult,
    clang-analyzer-core.VLASize,
    clang-analyzer-core.builtin.BuiltinFunctions,
    clang-analyzer-core.builtin.NoReturnFunctions,
    clang-analyzer-core.uninitialized.ArraySubscript,
    clang-analyzer-core.uninitialized.Assign,
    clang-analyzer-core.uninitialized.Branch,
    clang-analyzer-core.uninitialized.CapturedBlockVariable,
    clang-analyzer-core.uninitialized.NewArraySize,
    clang-analyzer-core.uninitialized.UndefReturn,
    clang-analyzer-cplusplus.ArrayDelete,
    clang-analyzer-cplusplus.InnerPointer,
    clang-analyzer-cplusplus.Move,
    clang-analyzer-cplusplus.NewDelete,
    clang-analyzer-cplusplus.NewDeleteLeaks,
    clang-analyzer-cplusplus.PlacementNew,
    clang-analyzer-cplusplus.PureVirtualCall,
    clang-analyzer-cplusplus.SelfAssignment,
    clang-analyzer-cplusplus.SmartPtrModeling,
    clang-analyzer-cplusplus.StringChecker,
    clang-analyzer-cplusplus.VirtualCallModeling,
    clang-analyzer-deadcode.DeadStores,
    clang-analyzer-fuchsia.HandleChecker,
    clang-analyzer-nullability.NullPassedToNonnull,
    clang-analyzer-nullability.NullReturnedFromNonnull,
    clang-analyzer-nullability.NullabilityBase,
    clang-analyzer-nullability.NullableDereferenced,
    clang-analyzer-nullability.NullablePassedToNonnull,
    clang-analyzer-nullability.NullableReturnedFromNonnull,
    clang-analyzer-optin.core.EnumCastOutOfRange,
    clang-analyzer-optin.cplusplus.UninitializedObject,
    clang-analyzer-optin.cplusplus.VirtualCall,
    clang-analyzer-optin.mpi.MPI-Checker,
    clang-analyzer-optin.performance.GCDAntipattern,
    clang-analyzer-optin.performance.Padding,
    clang-analyzer-optin.portability.UnixAPI,
    clang-analyzer-optin.taint.TaintedAlloc,
    clang-analyzer-security.FloatLoopCounter,
    clang-analyzer-security.PutenvStackArray,
    clang-analyzer-security.SetgidSetuidOrder,
    clang-analyzer-security.cert.env.InvalidPtr,
    clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,
    clang-analyzer-security.insecureAPI.SecuritySyntaxChecker,
    clang-analyzer-security.insecureAPI.UncheckedReturn,
    clang-analyzer-security.insecureAPI.bcmp,
    clang-analyzer-security.insecureAPI.bcopy,
    clang-analyzer-security.insecureAPI.bzero,
    clang-analyzer-security.insecureAPI.decodeValueOfObjCType,
    clang-analyzer-security.insecureAPI.getpw,
    clang-analyzer-security.insecureAPI.gets,
    clang-analyzer-security.insecureAPI.mkstemp,
    clang-analyzer-security.insecureAPI.mktemp,
    clang-analyzer-security.insecureAPI.rand,
    clang-analyzer-security.insecureAPI.strcpy,
    clang-analyzer-security.insecureAPI.vfork,
    clang-analyzer-unix.API,
    clang-analyzer-unix.BlockInCriticalSection,
    clang-analyzer-unix.DynamicMemoryModeling,
    clang-analyzer-unix.Errno,
    clang-analyzer-unix.Malloc,
    clang-analyzer-unix.MallocSizeof,
    clang-analyzer-unix.MismatchedDeallocator,
    clang-analyzer-unix.StdCLibraryFunctions,
    clang-analyzer-unix.Vfork,
    clang-analyzer-unix.cstring.BadSizeArg,
    clang-analyzer-unix.cstring.CStringModeling,
    clang-analyzer-unix.cstring.NullArg,
    clang-analyzer-valist.CopyToSelf,
    clang-analyzer-valist.Uninitialized,
    clang-analyzer-valist.Unterminated,
    clang-analyzer-valist.ValistBase,
    concurrency-mt-unsafe,
    concurrency-thread-canceltype-asynchronous,
    cppcoreguidelines-avoid-c-arrays,
    cppcoreguidelines-avoid-capturing-lambda-coroutines,
    cppcoreguidelines-avoid-const-or-ref-data-members,
    cppcoreguidelines-avoid-do-while,
    cppcoreguidelines-avoid-goto,
    cppcoreguidelines-avoid-non-const-global-variables,
    cppcoreguidelines-avoid-reference-coroutine-parameters,
    cppcoreguidelines-init-variables,
    cppcoreguidelines-interfaces-global-init,
    cppcoreguidelines-macro-usage,
    cppcoreguidelines-misleading-capture-default-by-value,
    cppcoreguidelines-missing-std-forward,
    cppcoreguidelines-no-malloc,
    cppcoreguidelines-no-suspend-with-lock,
    cppcoreguidelines-prefer-member-initializer,
    cppcoreguidelines-pro-bounds-array-to-pointer-decay,
    cppcoreguidelines-pro-bounds-constant-array-index,
    cppcoreguidelines-pro-bounds-pointer-arithmetic,
    cppcoreguidelines-pro-type-const-cast,
    cppcoreguidelines-pro-type-cstyle-cast,
    cppcoreguidelines-pro-type-member-init,
    cppcoreguidelines-pro-type-reinterpret-cast,
    cppcoreguidelines-pro-type-static-cast-downcast,
    cppcoreguidelines-pro-type-union-access,
    cppcoreguidelines-pro-type-vararg,
    cppcoreguidelines-rvalue-reference-param-not-moved,
    cppcoreguidelines-slicing,
    cppcoreguidelines-use-default-member-init,
    cppcoreguidelines-virtual-class-destructor,
    google-build-namespaces,
    google-build-using-namespace,
    google-default-arguments,
    google-explicit-constructor,
    google-global-names-in-headers,
    hicpp-exception-baseclass,
    hicpp-no-assembler,
    llvm-namespace-comment,
    misc-confusable-identifiers,
    misc-coroutine-hostile-raii,
    misc-definitions-in-headers,
    misc-header-include-cycle,
    misc-include-cleaner,
    misc-misleading-bidirectional,
    misc-misleading-identifier,
    misc-misplaced-const,
    misc-new-delete-overloads,
    misc-non-copyable-objects,
    misc-non-private-member-variables-in-classes,
    misc-redundant-expression,
    misc-static-assert,
    misc-throw-by-value-catch-by-reference,
    misc-unconventional-assign-operator,
    misc-uniqueptr-reset-release,
    misc-unused-alias-decls,
    misc-unused-parameters,
    misc-unused-using-decls,
    modernize-avoid-bind,
    modernize-avoid-c-arrays,
    modernize-concat-nested-namespaces,
    modernize-deprecated-headers,
    modernize-deprecated-ios-base-aliases,
    modernize-loop-convert,
    modernize-macro-to-enum,
    modernize-make-shared,
    modernize-make-unique,
    modernize-min-max-use-initializer-list,
    modernize-raw-string-literal,
    modernize-redundant-void-arg,
    modernize-replace-auto-ptr,
    modernize-replace-random-shuffle,
    modernize-return-braced-init-list,
    modernize-shrink-to-fit,
    modernize-type-traits,
    modernize-unary-static-assert,
    modernize-use-auto,
    modernize-use-bool-literals,
    modernize-use-constraints,
    modernize-use-default-member-init,
    modernize-use-emplace,
    modernize-use-equals-default,
    modernize-use-equals-delete,
    modernize-use-integer-sign-comparison,
    modernize-use-noexcept,
    modernize-use-nullptr,
    modernize-use-override,
    modernize-use-ranges,
    modernize-use-starts-ends-with,
    modernize-use-std-numbers,
    modernize-use-std-print,
    modernize-use-transparent-functors,
    modernize-use-uncaught-exceptions,
    modernize-use-using,
    performance-avoid-endl,
    performance-faster-string-find,
    performance-for-range-copy,
    performance-implicit-conversion-in-loop,
    performance-inefficient-algorithm,
    performance-inefficient-string-concatenation,
    performance-inefficient-vector-operation,
    performance-move-const-arg,
    performance-move-constructor-init,
    performance-no-automatic-move,
    performance-no-int-to-ptr,
    performance-noexcept-destructor,
    performance-noexcept-move-constructor,
    performance-noexcept-swap,
    performance-trivially-destructible,
    performance-type-promotion-in-math-fn,
    performance-unnecessary-copy-initialization,
    performance-unnecessary-value-param,
    portability-std-allocator-const,
    readability-avoid-const-params-in-decls,
    readability-avoid-nested-conditional-operator,
    readability-avoid-return-with-void-value,
    readability-avoid-unconditional-preprocessor-if,
    readability-braces-around-statements,
    readability-const-return-type,
    readability-container-contains,
    readability-container-data-pointer,
    readability-container-size-empty,
    readability-convert-member-functions-to-static,
    readability-delete-null-pointer,
    readability-duplicate-include,
    readability-else-after-return,
    readability-enum-initial-value,
    readability-implicit-bool-conversion,
    readability-inconsistent-declaration-parameter-name,
    readability-isolate-declaration,
    readability-magic-numbers,
    readability-make-member-function-const,
    readability-math-missing-parentheses,
    readability-misleading-indentation,
    readability-misplaced-array-index,
    readability-named-parameter,
    readability-non-const-parameter,
    readability-redundant-access-specifiers,
    readability-redundant-casting,
    readability-redundant-control-flow,
    readability-redundant-declaration,
    readability-redundant-function-ptr-dereference,
    readability-redundant-inline-specifier,
    readability-redundant-member-init,
    readability-redundant-preprocessor,
    readability-redundant-smartptr-get,
    readability-redundant-string-cstr,
    readability-redundant-string-init,
    readability-reference-to-constructed-temporary,
    readability-simplify-boolean-expr,
    readability-simplify-subscript-expr,
    readability-static-accessed-through-instance,
    readability-static-definition-in-anonymous-namespace,
    readability-string-compare,
    readability-suspicious-call-argument,
    readability-uniqueptr-delete-release,
    readability-uppercase-literal-suffix,
    readability-use-anyofallof,
    readability-use-std-min-max
    '

CheckOptions:
-   key: modernize-use-auto.RemoveStars
    value: true

HeaderFilterRegex: .*

WarningsAsErrors: '*'
