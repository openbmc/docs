{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "185ea15e_a7e39544",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-11-30T07:37:32Z",
      "side": 1,
      "message": "Added Andrew Geissler as reviewer since he is the maintainer of `phosphor-state-manager`\n",
      "revId": "019d2a01a5dd7b6847934c9095198bae7e77f6c1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e4e0149_a2d3e750",
        "filename": "designs/host-boot-time-monitor.md",
        "patchSetId": 20
      },
      "lineNbr": 23,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2022-11-30T17:03:31Z",
      "side": 1,
      "message": "nit: these \"\\\" are not needed in markdown docs",
      "range": {
        "startLine": 23,
        "startChar": 71,
        "endLine": 23,
        "endChar": 72
      },
      "revId": "019d2a01a5dd7b6847934c9095198bae7e77f6c1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f994457_b930d05e",
        "filename": "designs/host-boot-time-monitor.md",
        "patchSetId": 20
      },
      "lineNbr": 23,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-12-01T03:00:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e4e0149_a2d3e750",
      "range": {
        "startLine": 23,
        "startChar": 71,
        "endLine": 23,
        "endChar": 72
      },
      "revId": "019d2a01a5dd7b6847934c9095198bae7e77f6c1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40a544f3_230edfee",
        "filename": "designs/host-boot-time-monitor.md",
        "patchSetId": 20
      },
      "lineNbr": 138,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2022-11-30T17:03:31Z",
      "side": 1,
      "message": "I was excited at the start of the doc to see reference to using BootProgress as that\u0027s a generic d-bus property that anyone can update. For example, on our IBM systems, we utilize PLDM as the communication protocol between the BMC and Host. That path updates the BootProgress property. Is there a way to at least make a generic D-Bus property here that could be updated by IPMI or PLDM so others could utilize this function? Or maybe xyz/openbmc_project/Time/Boot is the generic object that BootProgress OR IPMI OEM could update?",
      "range": {
        "startLine": 138,
        "startChar": 47,
        "endLine": 138,
        "endChar": 51
      },
      "revId": "019d2a01a5dd7b6847934c9095198bae7e77f6c1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1870d0de_66ec6346",
        "filename": "designs/host-boot-time-monitor.md",
        "patchSetId": 20
      },
      "lineNbr": 138,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-12-01T02:15:59Z",
      "side": 1,
      "message": "\u003e Or maybe xyz/openbmc_project/Time/Boot is the generic object that BootProgress OR IPMI OEM could update?\n\nThat a great idea! I planed to use IPMI only to received notification and durations. But having a generic DBus property is more flexible for other interfaces.\nWill update the doc.",
      "parentUuid": "40a544f3_230edfee",
      "range": {
        "startLine": 138,
        "startChar": 47,
        "endLine": 138,
        "endChar": 51
      },
      "revId": "019d2a01a5dd7b6847934c9095198bae7e77f6c1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d14d53f2_f9baa4af",
        "filename": "designs/host-boot-time-monitor.md",
        "patchSetId": 20
      },
      "lineNbr": 138,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-12-01T03:00:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1870d0de_66ec6346",
      "range": {
        "startLine": 138,
        "startChar": 47,
        "endLine": 138,
        "endChar": 51
      },
      "revId": "019d2a01a5dd7b6847934c9095198bae7e77f6c1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4adf2655_f12e16b2",
        "filename": "designs/host-boot-time-monitor.md",
        "patchSetId": 20
      },
      "lineNbr": 308,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2022-11-30T17:03:31Z",
      "side": 1,
      "message": "I wonder if by default we could just use BootProgress/CurrentHostState (getting more limited information), and if a config flag is passed in, we rely on the IPMI OEM path on those systems to update it instead?",
      "revId": "019d2a01a5dd7b6847934c9095198bae7e77f6c1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16d44308_faa92ee4",
        "filename": "designs/host-boot-time-monitor.md",
        "patchSetId": 20
      },
      "lineNbr": 308,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-12-01T02:15:59Z",
      "side": 1,
      "message": "Yes, we could.\nIn that case we need to utilize the properties inside `BootProgress/CurrentHostState` to classify the boot process and define the state-transition table.\n\nFor example (This might be incorrect. Just an example)\nC:CurrentHostState B:BootProgress\n(C)Running-\u003e(C)TransitioningToOff-\u003e(C)Off-\u003e(B)BusInit-\u003e(B)MemoryInit-\u003e(B)OSStart-\u003e(B)OSRunning\n\nHowever I don\u0027t think it\u0027s easy because many states of `CurrentHostState` and `BootProgress` are overlapped. So the state-transition will be very complicated in this case.",
      "parentUuid": "4adf2655_f12e16b2",
      "revId": "019d2a01a5dd7b6847934c9095198bae7e77f6c1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ac2aec2_7c8c8969",
        "filename": "designs/host-boot-time-monitor.md",
        "patchSetId": 20
      },
      "lineNbr": 331,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2022-11-30T17:03:31Z",
      "side": 1,
      "message": "The phosphor-state-manager-host package is usually not utilized by systems using x86-power-control so this would have to be a separate package within phosphor-state-manager. Which I think is fine to host the d-bus object and interface (but not any of the IPMI code logic that sets the d-bus object)",
      "revId": "019d2a01a5dd7b6847934c9095198bae7e77f6c1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6c6fae8_15c17151",
        "filename": "designs/host-boot-time-monitor.md",
        "patchSetId": 20
      },
      "lineNbr": 331,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2022-12-01T02:15:59Z",
      "side": 1,
      "message": "\u003e The phosphor-state-manager-host package is usually not utilized by systems using x86-power-control so this would have to be a separate package within phosphor-state-manager.\n\nYes, that\u0027s the plan.\nSo this feature will be involved in `phosphor-state-manager` while it\u0027s a separated package.\n\n\u003e Which I think is fine to host the d-bus object and interface (but not any of the IPMI code logic that sets the d-bus object)\n\nYes, this is a good idea. I will update the doc to use DBus object and interface to receive the notification and duration.\nIPMI code logic will be in another repository.",
      "parentUuid": "6ac2aec2_7c8c8969",
      "revId": "019d2a01a5dd7b6847934c9095198bae7e77f6c1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}