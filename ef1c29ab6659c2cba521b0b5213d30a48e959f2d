{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "85b011f1_32339445",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-15T21:43:33Z",
      "side": 1,
      "message": "Please wrap your text properly.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 0
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55d187e9_31ea186d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-11-30T06:14:48Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "85b011f1_32339445",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 0
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50cc16d2_0761508d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-15T21:43:33Z",
      "side": 1,
      "message": "I reviewed this a bit;  I don\u0027t feel like a design doc is the right medium for this discussion.  It leads to this doc which is VERY abstract in its application on how this applies.  It makes some mention that this will be applied to bmcweb, but as the bmcweb maintainer, I really don\u0027t think i understand how this is going to help.\n\nit\u0027s also really not clear how it relates to: https://gerrit.openbmc.org/c/openbmc/bmcweb/+/63609 if at all, which shows that these kinds of approaches lead to corner cases or code breakages.\n\nOverall, i would not be in support of giving a repository, but I don\u0027t think that\u0027s required to start this coding project.  Just pick a repository, make a folder where your library code will go, and show how this design can give less complexity and overall code.  Once we have some examples of this being done, it\u0027s a lot easier to look at concretely rolling this out.\n\nYou\u0027ll note that in the history, we have plenty of examples of large changes (python -\u003e c++ for example) that had no design doc, but were executed one at a time, by iterating and making the code better, faster, and less buggy.  I suspect that\u0027s the right approach here.",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f041ec30_2310bcaa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-16T15:18:37Z",
      "side": 1,
      "message": "Ack\nI am still working on the same. I felt that the reactor approach suits better to solve the same problem.\nyou can see the implementations here \nhttps://github.com/abhilashraju/SmartDataConverter/blob/main/main.cpp \n\nI gave some examples in the documents. Please review the application side usage of the APIs. I thought these examples are enough to convey what I mean by simper API. If that does not look simple, please say why and what can make it simpler. That will be good feedback for me to improve on what I submitted.",
      "parentUuid": "50cc16d2_0761508d",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef49b40a_50d18696",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-18T05:39:09Z",
      "side": 1,
      "message": "\u003e I felt that the reactor approach suits better to solve the same problem.\n\nI\u0027d highly recommend evangelizing your code and see if others agree with you, and get some numbers on performance comparisons, binary size comparisons, and total lines of code comparisons.  If your intention is to write a totally new websever to be run as an alternative to bmcweb, it looks like you have a great start.  If any of my knowledge of bmcweb can help you, feel free to ask me questions (just don\u0027t do it in this review 😊)",
      "parentUuid": "f041ec30_2310bcaa",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc0f6dea_c1df712c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-20T05:34:41Z",
      "side": 1,
      "message": "Ack\n\nI was not intending to replace bmcweb. When I see certain part of it I felt like why we can\u0027t we do it in this way.",
      "parentUuid": "ef49b40a_50d18696",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0136125_d188228a",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-15T21:43:33Z",
      "side": 1,
      "message": "you already have a license server design doc out, which has gotten pretty significant feedback that still hasn\u0027t been addressed.  Pushing this design in the same time period gives the impression that you don\u0027t intend on finishing that design, which will likely take quite some time to complete.",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9865902_1192ddb6",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-16T15:18:37Z",
      "side": 1,
      "message": "Understood. I have already spent some time on this before the license server.I thought of documenting it for a review from community.",
      "parentUuid": "f0136125_d188228a",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a08d9516_5c4b5393",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-11-30T06:14:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9865902_1192ddb6",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c02b3a8_03c69f32",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 5,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-15T21:43:33Z",
      "side": 1,
      "message": "Given you\u0027re not a maintainer, pushing a design that didn\u0027t have any contributions from folks seems like an issue.",
      "range": {
        "startLine": 5,
        "startChar": 20,
        "endLine": 5,
        "endChar": 24
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc80c2bd_5db06a1e",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 5,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-16T15:18:37Z",
      "side": 1,
      "message": "Should I be a maintainer first to propose Design?",
      "parentUuid": "2c02b3a8_03c69f32",
      "range": {
        "startLine": 5,
        "startChar": 20,
        "endLine": 5,
        "endChar": 24
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd96cdc1_0d77d7fc",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 5,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-16T17:44:28Z",
      "side": 1,
      "message": "No, but this doc is making assertions about difficulty in maintenance without citing anyone that\u0027s actually having done maintenance.  That makes it harder to read.",
      "parentUuid": "bc80c2bd_5db06a1e",
      "range": {
        "startLine": 5,
        "startChar": 20,
        "endLine": 5,
        "endChar": 24
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8db7540_e3450cf4",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 5,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-18T05:12:27Z",
      "side": 1,
      "message": "By maintainability, I was talking about quality of a framework that can promote readable and modular application code through its APIs. \n\nSince we are already talking about new proposal with std::exec, I assume there exists an opinion on current one. \n\nGiving feedback on the contribution, why it will not work and what can make it work ,  may be helpful here.",
      "parentUuid": "fd96cdc1_0d77d7fc",
      "range": {
        "startLine": 5,
        "startChar": 20,
        "endLine": 5,
        "endChar": 24
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92e4eb08_7210a76a",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-14T22:01:30Z",
      "side": 1,
      "message": "There is already work underway to be able to leverage coroutine style instead.  Before we jump to a different programming paradigm, I think we should have a comparison of the ergonomics between:\n\n- Reactor\n- Co-routines\n- Sender / Receiver (std::execution)\n\nI realize Reactor is popular in Java (and some other languages) but since there isn\u0027t a readily available C++ implementation, that hints to me there might be better (ergonomically) patterns in the C++ language.",
      "range": {
        "startLine": 15,
        "startChar": 24,
        "endLine": 19,
        "endChar": 25
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16738cc2_b4e34985",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-15T21:43:33Z",
      "side": 1,
      "message": "+1.",
      "parentUuid": "92e4eb08_7210a76a",
      "range": {
        "startLine": 15,
        "startChar": 24,
        "endLine": 19,
        "endChar": 25
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0bf552c_3a282e49",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-16T15:18:37Z",
      "side": 1,
      "message": "I have done some experiments with sender-receiver.\nYou can see a Server implementation using std::exec here (https://github.com/abhilashraju/chaibeast/blob/main/include/server.hpp)\n\nYou can see the reference Implementation of this proposal here (https://github.com/abhilashraju/reactor)\n\nI can update the design doc with some comparison between two.",
      "parentUuid": "16738cc2_b4e34985",
      "range": {
        "startLine": 15,
        "startChar": 24,
        "endLine": 19,
        "endChar": 25
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a2fae45_a074e681",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-16T17:44:28Z",
      "side": 1,
      "message": "You\u0027ve basically rewritten the webserver in that commit to use blocking calls?  I\u0027m always happy to see alternative designs, and if your design gets traction, that\u0027s great, but unless I\u0027m reading the code incorrectly, it makes simplifications at the expense of performance.  That seems like a problem.",
      "parentUuid": "c0bf552c_3a282e49",
      "range": {
        "startLine": 15,
        "startChar": 24,
        "endLine": 19,
        "endChar": 25
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea44c7e4_a0c19d7b",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-18T05:12:27Z",
      "side": 1,
      "message": "I don\u0027t understand what you mean by blocking call. If you are looking for usage of threads in the code, then you are reading it wrong. The server delegates  client handling to a thread once connection is made. In that way the server is concurrent.The scheduler from the std::exec will schedule the execution of client work using a thread pool. Please look at [dumserver](https://github.com/abhilashraju/chaibeast/blob/main/dump_server/dump_server.cpp)  to see how this framework will be used. \n\nIf you talking about the listening socket. Then you are partially correct. It uses an infinite loop waiting for new connection (but it does it asynchronously).I was a bit lazy in fixing it. \n\nIt was an experimental project ,where I tried to mix Boost ASIO and std::exec , which have two different ideas about how to schedule work. \n\nSince there is already work going on in the direction of std::exec and coroutines(I did not see any proposal so far), this project can be example for “what must not be done or what  must be done” when you mix asio and std::exec together.\n\nI would prefer simpler code with affordable performance than highly optimised complicated code with unnecessary performance gains. Judging the performance just by reading the code may not be correct. We should test it and prove it. Don’t speculate performance. \n\nI would set necessary performance bench mark, writer simpler code, test against bench mark, try to optimise the code if needed.",
      "parentUuid": "0a2fae45_a074e681",
      "range": {
        "startLine": 15,
        "startChar": 24,
        "endLine": 19,
        "endChar": 25
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65a8754d_51b350ef",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-18T05:39:09Z",
      "side": 1,
      "message": "\u003e I don\u0027t understand what you mean by blocking call. If you are looking for usage of threads in the code, then you are reading it wrong. The server delegates  client handling to a thread once connection is made. In that way the server is concurrent.The scheduler from the std::exec will schedule the execution of client work using a thread pool. Please look at [dumserver](https://github.com/abhilashraju/chaibeast/blob/main/dump_server/dump_server.cpp)  to see how this framework will be used. \n\nRight, you\u0027ve chosen a threading model (similar to Apache rather than an async model (similar to nginx).  There are tradeoffs between the two, and there are certainly bmcs that go the route you\u0027ve gone.\n\n\u003e \n\u003e If you talking about the listening socket. Then you are partially correct. It uses an infinite loop waiting for new connection (but it does it asynchronously).I was a bit lazy in fixing it. \n\u003e \n\u003e It was an experimental project ,where I tried to mix Boost ASIO and std::exec , which have two different ideas about how to schedule work. \n\nCool.  I love to see the experimentation.\n\n\u003e \n\u003e Since there is already work going on in the direction of std::exec and coroutines(I did not see any proposal so far), this project can be example for “what must not be done or what  must be done” when you mix asio and std::exec together.\n\nCool.\n\n\u003e \n\u003e I would prefer simpler code with affordable performance than highly optimised complicated code with unnecessary performance gains.\n\u003e Judging the performance just by reading the code may not be correct. We should test it and prove it. Don’t speculate performance. \n\nI made no statements about performance.  FWIW, things like sailfish took a similar approach to the one you\u0027re taking.  you might look at those for inspiration.\n\n\u003e \n\u003e I would set necessary performance bench mark, writer simpler code, test against bench mark, try to optimise the code if needed.\n\nSounds like a good plan.",
      "parentUuid": "ea44c7e4_a0c19d7b",
      "range": {
        "startLine": 15,
        "startChar": 24,
        "endLine": 19,
        "endChar": 25
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90c2a7c0_9b482358",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-11-30T06:14:48Z",
      "side": 1,
      "message": "Design doc updated. Hopefully new doc talks about the intention and example code link given may give some idea about how simpler the code will be compared to nested callbacks",
      "parentUuid": "65a8754d_51b350ef",
      "range": {
        "startLine": 15,
        "startChar": 24,
        "endLine": 19,
        "endChar": 25
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4892ff7f_59977ca6",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-14T22:01:30Z",
      "side": 1,
      "message": "This seems to be a mostly unsupported statement.",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 28,
        "endChar": 43
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1215c7df_ef15a223",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-15T21:43:33Z",
      "side": 1,
      "message": "+1.  I would highly recommend getting involved in code reviews, so you can back up a statement like this with examples.",
      "parentUuid": "4892ff7f_59977ca6",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 28,
        "endChar": 43
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a06e36e_0abc548a",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-16T15:18:37Z",
      "side": 1,
      "message": "I guess I have mentioned about the non-composable call-backs.",
      "parentUuid": "1215c7df_ef15a223",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 28,
        "endChar": 43
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5b95601_bfc78d7e",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-16T17:44:28Z",
      "side": 1,
      "message": "what does \"non composable callbacks\" even mean?",
      "parentUuid": "7a06e36e_0abc548a",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 28,
        "endChar": 43
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5db96c1e_f2242415",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-18T05:12:27Z",
      "side": 1,
      "message": "I should have said composable task instead. Look at the example code and assemblyline analogy I mentioned in the doc. \nThe basic idea is to design a data flow from a Source to Sink passing through several operators(tasks). You can develop each separately, connect them, attach new operators in between, change Source or Sink whenever needed.\nIf you still have doubt, I think I cannot convince you anymore.\n\nYou can suggest an alternative approach for the examples and compare them.",
      "parentUuid": "a5b95601_bfc78d7e",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 28,
        "endChar": 43
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7a1c98c_a5345314",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-18T05:28:20Z",
      "side": 1,
      "message": "It sounds like you are contrasting composability here in terms of a CSP design point ([Communicating Sequential Processes](https://en.wikipedia.org/wiki/Communicating_sequential_processes))?",
      "parentUuid": "5db96c1e_f2242415",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 28,
        "endChar": 43
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fccb3acd_68297419",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-20T05:34:41Z",
      "side": 1,
      "message": "You may be correct. The library is a C++ implementation of  [this](https://projectreactor.io/docs/core/release/reference/#_simple_ways_to_create_a_flux_or_mono_and_subscribe_to_it).\nI tried to explain it with limited vocabularies I have with English. \nI hope you got the general Idea.",
      "parentUuid": "d7a1c98c_a5345314",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 28,
        "endChar": 43
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4485f4a_2bff1696",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-11-30T06:14:48Z",
      "side": 1,
      "message": "Rewrote the design doc. There is no explicit action item in this comment.So resolving int.",
      "parentUuid": "fccb3acd_68297419",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 28,
        "endChar": 43
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6aa88ba_44c6c11d",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-12-09T17:24:47Z",
      "side": 1,
      "message": "Functionally this is now a completely new review.  Previous review was about a reactor library, new review is for a generic http client.  Regardless of whether I support it, pushing it to the old review makes this a completely new document, and should be pushed to a new review.",
      "parentUuid": "d7a1c98c_a5345314",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 28,
        "endChar": 43
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "155da91f_e61190dc",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-15T21:43:33Z",
      "side": 1,
      "message": "This whole paragraph doesn\u0027t list any requirements, yet it\u0027s in the requirements section.",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "971aa566_f9a25d01",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-16T15:18:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "155da91f_e61190dc",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df0a07f2_5ced34df",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-14T22:01:30Z",
      "side": 1,
      "message": "This sounds very similar to the Sender/Receiver pattern from the std::execution proposal.",
      "range": {
        "startLine": 47,
        "startChar": 59,
        "endLine": 48,
        "endChar": 68
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64562271_60ab219b",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-16T15:18:37Z",
      "side": 1,
      "message": "Yes, But sender-receiver does not have direct support for Flux-like sources and back-pressure capability discussed here.",
      "parentUuid": "df0a07f2_5ced34df",
      "range": {
        "startLine": 47,
        "startChar": 59,
        "endLine": 48,
        "endChar": 68
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9491db8d_6fc11a96",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-11-30T06:14:48Z",
      "side": 1,
      "message": "No action items. So resolving it",
      "parentUuid": "64562271_60ab219b",
      "range": {
        "startLine": 47,
        "startChar": 59,
        "endLine": 48,
        "endChar": 68
      },
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "145fc188_fdfce269",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 411,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-14T22:01:30Z",
      "side": 1,
      "message": "How will this interact with the use of generated dbus bindings?",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a9acd13_211eb811",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 411,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-16T15:18:37Z",
      "side": 1,
      "message": "can you explain it a bit more. I am happy to work on the prototype if details are available.",
      "parentUuid": "145fc188_fdfce269",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3304ddac_a7d73c84",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 411,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-11-30T06:14:48Z",
      "side": 1,
      "message": "Added dbus binding details and hopefully example code link will have the answers for it",
      "parentUuid": "9a9acd13_211eb811",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adda38ae_922821e1",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 447,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-14T22:01:30Z",
      "side": 1,
      "message": "I don\u0027t see any \"alternative\" proposed.  What is existing art in this space?  There are other programming paradigms as well.  What are existing implementations in this space?  Is there some thing we could pick up that already exists, such as Boost or std::execution (which is already picked up by sdbusplus)?",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "900dd35b_b3de566a",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 447,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-16T15:18:37Z",
      "side": 1,
      "message": "I was not comparing the reactor library against any other paradigm in this doc. I was discussing about the need for new repo. Looking at the comments, perhaps my focus was wrong here.",
      "parentUuid": "adda38ae_922821e1",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c24c5e0_ca9b5092",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 447,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-11-30T06:14:48Z",
      "side": 1,
      "message": "Added alternative details",
      "parentUuid": "900dd35b_b3de566a",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf744f68_f534b89a",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 467,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-14T22:01:30Z",
      "side": 1,
      "message": "I don\u0027t think we should start with an open-ended \"create a new library\".  We should find a real problem that we can solve and co-develop this code along-side showing ergonomic improvements in a specific application (or set of applications).\n\nIf, after more complete \"alternatives\" investigation, we want to go this direction, we could start with it being part of a proposed-to-be-refactored repository (like bmcweb?) and then split out once it has some level of maturity.",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40e31e9a_8df82c83",
        "filename": "designs/reactor.md",
        "patchSetId": 3
      },
      "lineNbr": 467,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2023-10-16T15:18:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "bf744f68_f534b89a",
      "revId": "ef1c29ab6659c2cba521b0b5213d30a48e959f2d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}