{
  "comments": [
    {
      "key": {
        "uuid": "eb808b9b_56f2ac50",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T06:15:27Z",
      "side": 1,
      "message": "smctp",
      "range": {
        "startLine": 125,
        "startChar": 32,
        "endLine": 125,
        "endChar": 36
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7777bb52_7939be06",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2021-02-19T08:23:44Z",
      "side": 1,
      "message": "you\u0027d think I\u0027d have learnt to type that by now ðŸ˜Š thanks, fixed.",
      "parentUuid": "eb808b9b_56f2ac50",
      "range": {
        "startLine": 125,
        "startChar": 32,
        "endLine": 125,
        "endChar": 36
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6f5fb61_6cabadb0",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T06:15:27Z",
      "side": 1,
      "message": "Define it before use? :)",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 130,
        "endChar": 6
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0315d2bb_30fc4bc0",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2021-02-19T08:23:44Z",
      "side": 1,
      "message": "Yeah, I think it\u0027s more important to introduce the `struct sockaddr_mctp` first (as it\u0027s the focus here), rather than have this document be compile-able. Happy to change though.",
      "parentUuid": "b6f5fb61_6cabadb0",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 130,
        "endChar": 6
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3038939_6a01b28b",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T09:49:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0315d2bb_30fc4bc0",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 130,
        "endChar": 6
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7eef9f8_f5a93daa",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 296,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T06:15:27Z",
      "side": 1,
      "message": "Can you clarify this sentence?\n\nSo the tag allocated on connect() won\u0027t be dropped until close() or another connect() as I understand it.\n\nWhat\u0027s the behaviour of the tag allocated for the sendto()/sendmsg() after connect? I think you\u0027re proposing it\u0027s retained until another sendto()/sendmsg(), so we\u0027re accumulating tags in the set associated with the socket in the manner that\u0027s suggested by `setsockopt(..., MCTP_TAG_CONTROL, ...)` without calling `setsockopt()`?\n\nHow does `setsockopt(..., MCTP_TAG_CONTROL, ...)` behave in the connect()-then-(sendto()/sendmsg()) case? I guess it only applies to the tag allocated with the most recent sendto()/sendmsg() call? This is partially a question about whether we should explicitly include the tag we want to control in the struct associated with MCTP_TAG_CONTROL. However, we would have to extract that information using getsockname() in order to provided it back to setsockopt(), so maybe that\u0027s not a good idea?",
      "range": {
        "startLine": 295,
        "startChar": 58,
        "endLine": 296,
        "endChar": 30
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23248921_2830e070",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 296,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2021-02-19T08:23:44Z",
      "side": 1,
      "message": "My intention for any sendto after connect (using a different dest EID) is to be the same case as when no connect() was called earlier: the sendto disregards the tag allocated by connect, and also does not invalidate it.\n\nLike the non-connected sendto-case, any tag allocated here would also be subject to the same invalidation logic, either on timeout or by a further sendto.\n\nI think the `MCTP_TAG_CONTROL` sockopt might have caused some confusion there, which I\u0027ll address below.",
      "parentUuid": "f7eef9f8_f5a93daa",
      "range": {
        "startLine": 295,
        "startChar": 58,
        "endLine": 296,
        "endChar": 30
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "330a7247_43af19f5",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 296,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T09:49:31Z",
      "side": 1,
      "message": "\u003e Like the non-connected sendto-case, any tag allocated here would also be subject to the same invalidation logic, either on timeout or by a further sendto.\n\nRight, the behaviour in the connected sendto-case was what I was trying to wrap my head around.\n\n\u003e \n\u003e I think the `MCTP_TAG_CONTROL` sockopt might have caused some confusion there, which I\u0027ll address below.\n\nThanks.",
      "parentUuid": "23248921_2830e070",
      "range": {
        "startLine": 295,
        "startChar": 58,
        "endLine": 296,
        "endChar": 30
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e9c2b11_102b7831",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 400,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T06:32:35Z",
      "side": 1,
      "message": "Ah wait! I think I was tripped up on the interpretation of this sentence with its use of \"previous\". I read it as ordering setsockopt() after sendmsg(), but that\u0027s not the intent at all. Instead the expected sequence is:\n\n sock \u003d socket(...);\n setsockopt(..., MCTP_TAG_CONTROL, ...);\n sendmsg(...);\n sendmsg(...);\n\nand for all sendmsg() calls the tags are accumulated against the socket.",
      "range": {
        "startLine": 399,
        "startChar": 0,
        "endLine": 400,
        "endChar": 73
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f668f39_18d675ec",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 400,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T09:49:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4e9c2b11_102b7831",
      "range": {
        "startLine": 399,
        "startChar": 0,
        "endLine": 400,
        "endChar": 73
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b4bd196_51ba821d",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 590,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T06:15:27Z",
      "side": 1,
      "message": "Should we be setting a timeout via setsockopt(..., MCTP_TAG_CONTROL, ...) so that the broadcast tag can be released without close()?\n\nActually, do we have a way to learn that a tag configured to expire via MCTP_TAG_CONTROL has in fact expired?",
      "range": {
        "startLine": 584,
        "startChar": 0,
        "endLine": 590,
        "endChar": 15
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c64c90d_be4e471e",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 590,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T09:49:31Z",
      "side": 1,
      "message": "\u003e Should we be setting a timeout via setsockopt(..., MCTP_TAG_CONTROL, ...) so that the broadcast tag can be released without close()?\n\nNo, PS4 clarifies there\u0027s a default (longish) timeout.\n\n\u003e \n\u003e Actually, do we have a way to learn that a tag configured to expire via MCTP_TAG_CONTROL has in fact expired?\n\nThis is unnecessary as userspace should be aware of the required timeouts and use appropriate APIs to enforce them.",
      "parentUuid": "8b4bd196_51ba821d",
      "range": {
        "startLine": 584,
        "startChar": 0,
        "endLine": 590,
        "endChar": 15
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d543f6fa_a553d067",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 655,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T06:15:27Z",
      "side": 1,
      "message": "I find the use of \u0027endpoint\u0027 and \u0027source address\u0027 unclear here. DSP0236 defines the message terminus as the (Message Tag, Tag Owner, Source Endpoint ID) tuple in 8.5. To use DSP0236-style terminology, by \u0027endpoint\u0027 do you mean \u0027Destination Endpoint ID\u0027 and \u0027source address\u0027 to mean \u0027Source Endpoint ID\u0027?\n\nAlso given that the smctp_tag member of struct sockaddr_mctp includes the TO bit, without thinking too much it feels unclear whether the use of \u0027tag\u0027 here includes the TO bit (in the manner of the message terminus definition). The following sentence suggests it\u0027s excluded. Maybe using \u0027tag value\u0027 in the tuple description is an improvement?",
      "range": {
        "startLine": 654,
        "startChar": 66,
        "endLine": 655,
        "endChar": 14
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c1a1e33_75da51fb",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 655,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2021-02-19T08:23:44Z",
      "side": 1,
      "message": "yeah, just me being lazy and not explicitly including TO there. I\u0027ll fix that up.",
      "parentUuid": "d543f6fa_a553d067",
      "range": {
        "startLine": 654,
        "startChar": 66,
        "endLine": 655,
        "endChar": 14
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "954cddf5_82fa93cf",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 664,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T06:15:27Z",
      "side": 1,
      "message": "even to a destination that we connect()ed to prior to sendto()? Or just another non-connected sendto()?",
      "range": {
        "startLine": 664,
        "startChar": 3,
        "endLine": 664,
        "endChar": 49
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75eeb428_5204435a",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 664,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2021-02-19T08:23:44Z",
      "side": 1,
      "message": "this paragraph only covers the sendto() behaviour, not connect()ed sockets.",
      "parentUuid": "954cddf5_82fa93cf",
      "range": {
        "startLine": 664,
        "startChar": 3,
        "endLine": 664,
        "endChar": 49
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94e52677_bb107314",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 664,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T09:49:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "75eeb428_5204435a",
      "range": {
        "startLine": 664,
        "startChar": 3,
        "endLine": 664,
        "endChar": 49
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42e29fcf_279498e0",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 665,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T06:15:27Z",
      "side": 1,
      "message": "... if set by `setsockopt(sock, 0, MCTP_TAG_CONTROL, ...);`",
      "range": {
        "startLine": 665,
        "startChar": 3,
        "endLine": 665,
        "endChar": 20
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08baa4f8_d20a467b",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 665,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2021-02-19T08:23:44Z",
      "side": 1,
      "message": "not in this case; the timeout always applies (but may be modified by MCTP_TAG_CONTROL). I\u0027ll make that more explicit in the doc.",
      "parentUuid": "42e29fcf_279498e0",
      "range": {
        "startLine": 665,
        "startChar": 3,
        "endLine": 665,
        "endChar": 20
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5d354b0_b6be82d9",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 665,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T09:49:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "08baa4f8_d20a467b",
      "range": {
        "startLine": 665,
        "startChar": 3,
        "endLine": 665,
        "endChar": 20
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0ce8545_d3fbc2d9",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 834,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T06:15:27Z",
      "side": 1,
      "message": "Broken line wrap here.\n\nHowever, we\u0027re still considering the idea of protocols to handle the message-type/integrity-check data, right? Is that worth mentioning here?",
      "range": {
        "startLine": 832,
        "startChar": 0,
        "endLine": 834,
        "endChar": 41
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9415840_73a5bbed",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 834,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2021-02-19T08:23:44Z",
      "side": 1,
      "message": "\u003e Broken line wrap here.\n\nCaused by the unclosed bracket. Is this the first time vim cindent mode has been useful for a markdown doc? ðŸ˜„\n\n\u003e However, we\u0027re still considering the idea of protocols to handle the message-type/integrity-check data, right? Is that worth mentioning here?\n\nYep, definitely, I\u0027ll add that.",
      "parentUuid": "b0ce8545_d3fbc2d9",
      "range": {
        "startLine": 832,
        "startChar": 0,
        "endLine": 834,
        "endChar": 41
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54d30919_b5d71a8d",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 892,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T06:15:27Z",
      "side": 1,
      "message": "I think it\u0027s a good idea to provide explicit examples here, e.g:\n\n* MCTP broadcasts\n* NVMe repeat last message",
      "range": {
        "startLine": 891,
        "startChar": 0,
        "endLine": 892,
        "endChar": 75
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b50add1_90428e4f",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 892,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2021-02-19T08:23:44Z",
      "side": 1,
      "message": "Good point, will add.",
      "parentUuid": "54d30919_b5d71a8d",
      "range": {
        "startLine": 891,
        "startChar": 0,
        "endLine": 892,
        "endChar": 75
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2931c256_e87fbbc4",
        "filename": "designs/mctp/mctp-kernel.md",
        "patchSetId": 3
      },
      "lineNbr": 892,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-02-19T09:49:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3b50add1_90428e4f",
      "range": {
        "startLine": 891,
        "startChar": 0,
        "endLine": 892,
        "endChar": 75
      },
      "revId": "7214b38515619e8c4f947a4682674d1071905654",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}