{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5d658eed_12bd9168",
        "filename": "anti-patterns.md",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-20T12:56:55Z",
      "side": 1,
      "message": "I\u0027m not sure our implementations are complete enough to count this as an anti-pattern at this point...",
      "revId": "43e516eda177cc19a6e0f02b224466c1e743ea15",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fe115f8_bee51228",
        "filename": "anti-patterns.md",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-01-22T22:43:36Z",
      "side": 1,
      "message": "Can you unpack that a bit?\n\nThis one was more aspirational than the others. I think it\u0027s reasonable that we try to prevent people adopting this pattern going forward.",
      "parentUuid": "5d658eed_12bd9168",
      "revId": "43e516eda177cc19a6e0f02b224466c1e743ea15",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c760cdaa_211f0224",
        "filename": "anti-patterns.md",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-24T19:38:01Z",
      "side": 1,
      "message": "I think the issue I have with it is even by reading this I\u0027m not sure _I_ know what to do.  So, if I don\u0027t know how to react to this anti-pattern, I have a hard time expecting anyone else to either.  Thus... what I wrote above.",
      "parentUuid": "6fe115f8_bee51228",
      "revId": "43e516eda177cc19a6e0f02b224466c1e743ea15",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fac771bd_56e71f9f",
        "filename": "anti-patterns.md",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-01-24T23:03:09Z",
      "side": 1,
      "message": "Right, maybe it\u0027s just ranting then at this point. I don\u0027t have any practical examples to point to, it just feels like the current approach is inherently broken.",
      "parentUuid": "c760cdaa_211f0224",
      "revId": "43e516eda177cc19a6e0f02b224466c1e743ea15",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db91f3bc_82f906f8",
        "filename": "anti-patterns.md",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-01-25T14:29:57Z",
      "side": 1,
      "message": "\u003e  by reading this I\u0027m not sure _I_ know what to do\n\nIsn\u0027t this outlined in the resolution section?",
      "parentUuid": "fac771bd_56e71f9f",
      "revId": "43e516eda177cc19a6e0f02b224466c1e743ea15",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5842c802_5e8ced8e",
        "filename": "anti-patterns.md",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-25T15:16:09Z",
      "side": 1,
      "message": "Are there any example implementations to point to?",
      "parentUuid": "db91f3bc_82f906f8",
      "revId": "43e516eda177cc19a6e0f02b224466c1e743ea15",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "895d677f_d1b072b6",
        "filename": "anti-patterns.md",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-01-25T20:03:57Z",
      "side": 1,
      "message": "Of waiting for an interface to show up on DBus? I\u0027m probably missing the intent of the question but there is the mapper wait code itself, or any application in dbus-sensors, or here is one that I wrote awhile back:\n\nhttps://github.com/openbmc/openpower-pnor-code-mgmt/commit/099543e4d7a30546570d615c9c8a5a2e8b0c09d4",
      "parentUuid": "5842c802_5e8ced8e",
      "revId": "43e516eda177cc19a6e0f02b224466c1e743ea15",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db15fe38_e3971daa",
        "filename": "anti-patterns.md",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-29T22:46:56Z",
      "side": 1,
      "message": "You\u0027re not waiting for an interface to show up, you\u0027re waiting for a path to show up on an unknown service.  Yes, this is what mapper does.  I don\u0027t think we want everyone reimplementing mapper in their own process.  Therefore, we\u0027d need an API that mapper provides that gives similar results as what mapper-wait does?  This is why I don\u0027t think there is anything obvious to point to as a solution here.",
      "parentUuid": "895d677f_d1b072b6",
      "revId": "43e516eda177cc19a6e0f02b224466c1e743ea15",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95cde6a0_9bea128a",
        "filename": "anti-patterns.md",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-01-29T23:20:38Z",
      "side": 1,
      "message": "Right, but the point is that waiting for paths is kinda broken in exactly the way you describe. Better to wait for a well known connection name that is guaranteed to provide the path of interest, where possible. The anti-pattern already addresses that this is not always possible.",
      "parentUuid": "db15fe38_e3971daa",
      "revId": "43e516eda177cc19a6e0f02b224466c1e743ea15",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4f96f50_3c428adc",
        "filename": "anti-patterns.md",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-29T23:40:07Z",
      "side": 1,
      "message": "\u003e Better to wait for a well known connection name that is guaranteed to provide the path of interest,\n\nI strongly disagree with this from as an architectural choice.  We\u0027ve gone back and forth on it.  \n\nGenerally speaking it doesn\u0027t work for cases where there are multiple of something, unless we shove everything of one type in a single executable.  This pretty much precludes any possibility of non-open implementations of anything and it also makes multi-host designs much harder with the current code-base.",
      "parentUuid": "95cde6a0_9bea128a",
      "revId": "43e516eda177cc19a6e0f02b224466c1e743ea15",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fbf5204_2940a590",
        "filename": "anti-patterns.md",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-01-30T01:59:33Z",
      "side": 1,
      "message": "\u003e I strongly disagree with this from as an architectural choice. \n\nPut me in the only-use-mapper-when-necessary and not all the time camp.\n\n\u003e This pretty much precludes any possibility of non-open implementations\n\nnon-open implementations can claim com.foocorp.foo and xyz.openbmc_project.foo at the same time, announcing their \u0027alternativeness\u0027 by way of com.foocorp and advertising their API compatibility by way of xyz.openbmc_project.\n\n\u003e multi-host designs much harder\n\nIf I were to interpret this as an invitation to add latency and complexity in the general case to satisfy my specific use cases, what would be wrong with that?",
      "parentUuid": "c4f96f50_3c428adc",
      "revId": "43e516eda177cc19a6e0f02b224466c1e743ea15",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db503bcc_6b53de3a",
        "filename": "anti-patterns.md",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-01-30T02:00:21Z",
      "side": 1,
      "message": "That\u0027s only required in some cases, not all. Here\u0027s a quick analysis of stuff using `mapper-wait@.service`:\n\nhttps://gist.github.com/amboar/2de16ec94e9595e87122f6f0d3772a42\n\nDependencies targeted by this anti-pattern are those that aren\u0027t parameterised:\n\n```\nWants\u003dmapper-wait@-org-openbmc-HostIpmi-1.service\n        meta-phosphor/recipes-phosphor/ipmi/phosphor-ipmi-host/xyz.openbmc_project.Ipmi.Internal.SoftPowerOff.service\n\nWants\u003dmapper-wait@-org-openbmc-mboxd.service\n        meta-phosphor/recipes-phosphor/mboxd/mboxd/mboxd-reload@.service\n\nWants\u003dmapper-wait@-xyz-openbmc_project-control-nvme.service\n        meta-quanta/meta-gbs/recipes-gbs/gbs-sysinit/files/gbs-sysinit.service\n        meta-quanta/meta-gbs/recipes-phosphor/sensors/phosphor-nvme/xyz.openbmc_project.nvme.manager.service.replace\n\nWants\u003dmapper-wait@-xyz-openbmc_project-inventory.service\n        meta-ibm/recipes-phosphor/fans/phosphor-fan/swift/phosphor-cooling-type@.service\n        meta-ibm/recipes-phosphor/fans/phosphor-fan/witherspoon/phosphor-cooling-type@.service\n        meta-ingrasys/meta-zaius/recipes-phosphor/gpio/phosphor-gpio-monitor/phosphor-gpio-presence@.service\n        meta-inspur/meta-fp5280g2/recipes-phosphor/fans/phosphor-fan/phosphor-cooling-type@.service\n        meta-openpower/recipes-phosphor/network/first-boot-set-mac/first-boot-set-mac@.service\n        meta-openpower/recipes-phosphor/occ/openpower-occ-control/org.open_power.OCC.Control.service\n        meta-openpower/recipes-phosphor/vpd/openpower-fru-vpd/op-vpd-parser.service\n        meta-phosphor/recipes-phosphor/dbus/phosphor-dbus-monitor/phosphor-msl-verify.service\n        meta-phosphor/recipes-phosphor/ipmi/phosphor-ipmi-fru/obmc-read-eeprom@.service\n        meta-quanta/meta-gbs/recipes-gbs/gbs-sysinit/files/gbs-sysinit.service\n        meta-quanta/meta-gbs/recipes-phosphor/gpio/phosphor-gpio-monitor/phosphor-gpio-presence@.service.replace\n        meta-quanta/meta-olympus-nuvoton/recipes-olympus-nuvoton/power/first-boot-set-psu/first-boot-set-psu@.service\n\nWants\u003dmapper-wait@-xyz-openbmc_project-led-groups.service\n        meta-ibm/meta-romulus/recipes-phosphor/gpio/id-button/id-button-pressed.service\n        meta-ibm/recipes-phosphor/gpio/id-button/id-button-pressed.service\n        meta-phosphor/recipes-phosphor/leds/phosphor-led-manager/obmc-fru-fault-monitor.service\n\nWants\u003dmapper-wait@-xyz-openbmc_project-network-snmp.service\n        meta-ibm/recipes-phosphor/dbus/phosphor-dbus-monitor/phosphor-dbus-monitor-snmp.conf\n\nWants\u003dmapper-wait@-xyz-openbmc_project-settings-fanctrl.service\n        meta-quanta/meta-gbs/recipes-google/acpi-power-state/acpi-power-state-daemon/gbs-host-s0-set-failsafe.service\n        meta-quanta/meta-gbs/recipes-google/acpi-power-state/acpi-power-state-daemon/gbs-host-s5-set-failsafe.service\n```\n\nMost of these I suspect are provided by a single process, in which case an alternative implementation just needs to acquire the well known connection name.\n\nPerhaps I have a misunderstanding?",
      "parentUuid": "c4f96f50_3c428adc",
      "revId": "43e516eda177cc19a6e0f02b224466c1e743ea15",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c636d404_e026e319",
        "filename": "anti-patterns.md",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-30T14:26:34Z",
      "side": 1,
      "message": "\u003e non-open implementations can claim com.foocorp.foo and xyz.openbmc_project.foo at the same time, announcing their \u0027alternativeness\u0027 by way of com.foocorp and advertising their API compatibility by way of xyz.openbmc_project.\n\nI agree when there is intentionally only \"one of\".  I was thinking more specifically about a proposal Google brought up at OCP, which they claimed they had Intel and AMD on board with, to add an interface for crash-dump like data collection that both Intel and AMD would have closed-source services for.  A blade / chassis-manager design can\u0027t handle a \"reserved name for the location of the crash-dump initiation\" since you can have a mixture of AMD/Intel/Ampere blades.\n\n\u003e If I were to interpret this as an invitation to add latency and complexity in the general case to satisfy my specific use cases, what would be wrong with that?\n\nI\u0027m sure there is a spectrum of complexity here, so I don\u0027t know what you have in mind behind this question.  I don\u0027t see prefacing calls with a mapper lookup as significant complexity.\n\nI gave multi-host designs as an example because, yes, it is something I care about.  IBM has mentioned some kind of aggregation service in a multi-node design of their own.  I don\u0027t know how you make that work without mapper because you have some local entities and some hosted by the aggregation service.  Maybe I\u0027ve just not thought about it enough.\n\nIn terms of \"my specific use cases\", it probably depends on the specific complexity and contributor(s), no?  An addition of complexity proposed by a major contributor, I think, merits more consideration than one by a drive-by.  But, even in terms of major contributors there is probably some point where the complexity is more than other maintainers are willing to absorb.\n\n\u003e That\u0027s only required in some cases, not all. Here\u0027s a quick analysis of stuff using mapper-wait@.service:\n\nI do agree that most of these can likely be simplified to avoid the mapper-wait.  We also need to consider ones installed by repositories directly because there are many of those.  For what it\u0027s worth, on Bletchley which is a \"simple\" design (as there is no IPMI/PLDM to the managed hosts), there are lots of mapper-waits as well.\n\n```\nroot@bletchley:/lib/systemd/system# ls *.service | xargs grep Wants\u003dmapper-wait | wc -l\n62\n```\n\nAnother thing which comes to mind is that we do still have some processes which are claiming their busname before they create their objects (which is not correct in most cases), so it isn\u0027t always a simple mapper-wait to dbus-activation transformation.\n\n\u003e Wants\u003dmapper-wait@-org-openbmc-HostIpmi-1.service\n\nThis one looks like a hard-coded parameterization.  Not sure the intent there, but anything with \u0027org.openbmc\u0027 probably deserves to be re-examined anyhow.\n\n\u003e Wants\u003dmapper-wait@-xyz-openbmc_project-inventory.service\n\nThis one is likely wrong anyhow considering EM exists (at least for meta-phosphor recipes).",
      "parentUuid": "db503bcc_6b53de3a",
      "revId": "43e516eda177cc19a6e0f02b224466c1e743ea15",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}