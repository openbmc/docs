{
  "comments": [
    {
      "key": {
        "uuid": "e7d85afa_3b518b09",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 2
      },
      "lineNbr": 3,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-03-30T03:51:53Z",
      "side": 1,
      "message": "Can you please add your email address here too (i.e. `Chris Engel \u003c...@us.ibm.com\u003e`)? That way people reading the document can easily get in touch with you if necessary without digging into the git history.",
      "range": {
        "startLine": 3,
        "startChar": 8,
        "endLine": 3,
        "endChar": 19
      },
      "revId": "d409431c61139d401f77d51988bda4f211970dd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e01bf80_fa5d2963",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-05-28T06:44:44Z",
      "side": 1,
      "message": "This URL fails to open, please use a \"permanent link\" here.",
      "revId": "d409431c61139d401f77d51988bda4f211970dd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c3d3c36_55586925",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-06-16T14:45:26Z",
      "side": 1,
      "message": "I suspect it might be this:\n\nhttps://github.com/facebook/openbmc/tree/de9cd6421c7bfde56c2d0a1ff6a9d0fb628492ee/tests2/experimental/vboot_tests",
      "parentUuid": "4e01bf80_fa5d2963",
      "revId": "d409431c61139d401f77d51988bda4f211970dd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "869ac477_c38401df",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1000235
      },
      "writtenOn": "2020-01-03T03:14:40Z",
      "side": 1,
      "message": "Consider adding a reference to the Secure Boot section of\nhttps://www.opencompute.org/documents/csis-firmware-security-best-practices-position-paper-version-1-0-pdf",
      "revId": "d409431c61139d401f77d51988bda4f211970dd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78f5ccaf_da12e164",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-01-02T17:54:53Z",
      "side": 1,
      "message": "I\u0027m slightly concerned that we\u0027re signing the SPL directly from the OTP.  I don\u0027t have the AST2600 datasheet handy to be able to know what capabilities are available in hardware.\n\nI recently worked on another project using the Marvell Armada 3700.  The way secure boot works there is that there was an additional indirection from the OTP to SPL.  OTP key -\u003e SW keychain key -\u003e SPL key.  It also had ability to put in up to 4 OTP keys and to later on expire them in the field (invalidate the valid bit).\n\nThere are a few reasons for this:\n\n1. Having a few OTP slots allows you to expire hardware keys.  A single key does not give you any mechanism if your key has been leaked or cracked.\n\n2. There is some concern that the more times you use a key to sign the less secure that key becomes.  Having the indirection gives you a higher order of signings you can do.\n\nDoes the AST2600 give us any mechanism for an indirection like this?",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 62,
        "endChar": 25
      },
      "revId": "d409431c61139d401f77d51988bda4f211970dd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "539caf40_83a958ab",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1000452
      },
      "writtenOn": "2020-01-07T16:37:38Z",
      "side": 1,
      "message": "The AST2600 supports 8 keys with the ability to retire keys.  The HW itself doesn\u0027t provide a layer of indirection like you referred to.  If you wanted that you would have to architect that with a thin layer of FW that is loaded by the AST2600 and verified with OTP keys and which in turn then loads the SPL with a new set of keys.",
      "parentUuid": "78f5ccaf_da12e164",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 62,
        "endChar": 25
      },
      "revId": "d409431c61139d401f77d51988bda4f211970dd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d49bfb1f_6e690aa0",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2019-12-16T22:08:46Z",
      "side": 1,
      "message": "Are you sure AST2600 supports a TPM over SPI?  We\u0027re finding out that the AST2500 doesn\u0027t really because it is a half-duplex SPI master and the TCG spec requires full-duplex.",
      "revId": "d409431c61139d401f77d51988bda4f211970dd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5087d6d0_e8df15d3",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-01-02T17:54:53Z",
      "side": 1,
      "message": "I have some patches that will hopefully be public soon that enable interaction with spi-tpm chips using a half-duplex master, but it violates a small aspect of the TCG spec.  It seems that at least one part vendor\u0027s parts do not care.\n\nI\u0027ll follow up when those are public and also will be striking up a conversation upstream with how to deal with half-duplex masters, since there are about 3 options (and I only implemented one of them).",
      "parentUuid": "d49bfb1f_6e690aa0",
      "revId": "d409431c61139d401f77d51988bda4f211970dd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fc11fab_d4513b74",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1000452
      },
      "writtenOn": "2020-01-07T16:37:38Z",
      "side": 1,
      "message": "Thanks for this information.  Unfortunately due to other priorities we haven\u0027t been able to attempt communicating to the TPM.  I will see what I can find out about this on my end as well.",
      "parentUuid": "5087d6d0_e8df15d3",
      "revId": "d409431c61139d401f77d51988bda4f211970dd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c50c8c52_e66515f3",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1000910
      },
      "writtenOn": "2021-02-05T00:06:31Z",
      "side": 1,
      "message": "A simple GPIO jumper makes it very easy to do a physical attack, and no way to log the operation. Any use cases for the jumper? can we use the owner transfer procedure to cover them instead?",
      "revId": "d409431c61139d401f77d51988bda4f211970dd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3e1995b_0c926fc8",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-01-02T17:54:53Z",
      "side": 1,
      "message": "I\u0027m not understanding how this is \"key transition support\".  Doesn\u0027t the SPL always get verified against OTP keys?",
      "revId": "d409431c61139d401f77d51988bda4f211970dd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "558b11d9_bc356fc5",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1000452
      },
      "writtenOn": "2020-01-07T16:37:38Z",
      "side": 1,
      "message": "Yes, there is no way to transition the keys used to verified the SPL other than through expiring the limited set of 8 keys that the AST2600 has support for.  This key transition is for the remainder of the stack above the SPL.  I will update the document to clarify",
      "parentUuid": "d3e1995b_0c926fc8",
      "revId": "d409431c61139d401f77d51988bda4f211970dd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6ce7d83_6a282bdb",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 1000576
      },
      "writtenOn": "2020-09-30T20:38:02Z",
      "side": 1,
      "message": "Yes, recently facebook is looking into combine facebook verified boot \nwith AST2600 security boot feature. The main benefit we get via integrate\nverified-boot with AST2600 security boot is we can upgrade the SPL, \ninstead of like now, the SPL is locked down in Flash.(We write protect the\nFlash contain the SPL). \n\nOur initial design is almost the same as you proposed, except:\n\u003e U-Boot SPL loads second layer public key from EEProm\nIn our design the second layer public key is built in SPL dtb, which \nwill get verified by the ROM with keys in OTP.  \n\nTwo main concerns mainly related to AST2600 h/w:\n1. No real \"key transition\". As you mentioned, the keys used to verify SPL\n   cannot change, because it is in OTP.\n2. AST2600 SRAM limits the SPL size to 63KB, this limits what can be \nimplemented in the SPL for a CRoT. Currently our SPL size is around 100KB\nwhich implements the 3 main CRoT function (verification, measurement and \nrollback protection ) besides the common boot loader function.",
      "revId": "d409431c61139d401f77d51988bda4f211970dd2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}