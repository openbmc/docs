{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e92319ae_cec87b8f",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 20,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "are these achieved or just communication when the role was established (as the election is in the hardware specific daemon).\nthe what was explained but not how.   \n\nshould more become redfish via restricted role to give the BMC access to sibling state especially wrt redundancy enable?   or it\u0027s part of the system sync service mentioned? or is that just file sync.\n\nin other words beyond the aliveness and mentioned you try signaling over hardware specific can the rest rely on the network and be common?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89016fa5_231bf16d",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 20,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "Down below I describe what we get from the sibling, and that it doesn\u0027t use Redfish.",
      "parentUuid": "e92319ae_cec87b8f",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43a7f050_d3828fbc",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 71,
      "author": {
        "id": 1000348
      },
      "writtenOn": "2024-08-20T06:51:07Z",
      "side": 1,
      "message": "FSI is FRU Support Interface.",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b5bdd3a_82ca1ea4",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 71,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "that\u0027s what I had in the first patch set but someone pointed to a doc that said something else.  I\u0027ll change it back.",
      "parentUuid": "43a7f050_d3828fbc",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78ef7e4a_d284ade8",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 74,
      "author": {
        "id": 1000348
      },
      "writtenOn": "2024-08-20T06:51:07Z",
      "side": 1,
      "message": "The processors have slave FSI ?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c5dd0bf_e02ea747",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 74,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "Yes.  Or are you saying they dont\u0027?",
      "parentUuid": "78ef7e4a_d284ade8",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "074a67d4_bda866a1",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 81,
      "author": {
        "id": 1000348
      },
      "writtenOn": "2024-08-20T06:51:07Z",
      "side": 1,
      "message": "u meant BMC chip or card here ?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7caab1c_24bbf15a",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 81,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "I think it works for either chip or card here?",
      "parentUuid": "074a67d4_bda866a1",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e9a415a_04fb91cf",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 124,
      "author": {
        "id": 1000348
      },
      "writtenOn": "2024-08-20T06:51:07Z",
      "side": 1,
      "message": "The BMCs? means both active and passive must report via PLDM and redfish ?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ceb24962_4764e9fb",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 124,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "will fix.",
      "parentUuid": "6e9a415a_04fb91cf",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d840b8b5_4b10d4a8",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 185,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "My initial read thought this implied a separate UI application and I was going to challenge how it was selected but in impacts you just anticipate selective panel availability.",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3abcf395_1b3f0689",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 185,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "It should be able to be the same application.",
      "parentUuid": "d840b8b5_4b10d4a8",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd5b9b61_08ff323f",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 226,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "This is set active service.\na second passive service may be useful for BMC ready determination that could conflict with fallover and this.\n\nseparating will help address the comments I\u0027m the next block.",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "274cbf0f_de4e0f6a",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 240,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "putting it in the same target requires every conditional service to take a dependancy in this active passive service.   wouldn\u0027t it be simpler to do this as a prerequisite of the active target?\n(is this a thing?)\n\nin which case can a common service host a dbua object with the role and host actions to start as active or initiate fallover) (much of this block started with just the context to this point with minor edits and some updates after reading the rest of the document) ohh you separated the service in response to feedback but didn\u0027t get the implications here)\n\ngoing back to @Ed comment, could this be optional manager State?  hence just another system state waiting for hardware access?   \nreading the rest a separate application may make sense but having it\u0027s transition be driven by methods from the hardware discovery still makes sense \n(reading further got some updated design but missed BMC ready implications)\n\nafter processing the implications of fallover from passive to active without a reboot this is definitely the wrong way to condition the service.   while it blocks the startup of the services it creates state where the target state is active without me service running and fallover won\u0027t actually restart them without isolating to the previous mukti-user target.   the psm conditional execution is for where the preconditioning commands prior to establishing to the active state are actively harmful.\n\nso eg forcing the hardware access away from the sibling BMC makes sense to be conditional preventing failed BMC from interfering with the now active BMC.\n\n\nthe BMC active target needs to have a hard dependency to being selected as active.  not just conditionally starting service to a common ready state.\n\nmaybe this is a file to enable a single onshot persistent service which the rest of the target takes a hard dependency but need to prohibit it from being stopped.\n\nsimilarly the passive might conditionally enable unforced failover .",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f329564_beb91c43",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 240,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "I will need some time to ponder all of these systemd questions, and definitely appreciate the input.",
      "parentUuid": "274cbf0f_de4e0f6a",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "deb28e03_37dd1394",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 249,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "won\u0027t this imply set active passive service will be inferred to start as part of multi user service? also hence it would always become active?\n\nor the condition us evaluated before the dependent initiation is this documented?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe095230_0e357fb7",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 249,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "No, it doesn\u0027t start as part of multi-user.",
      "parentUuid": "deb28e03_37dd1394",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a7908b7_34d5d5b8",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 361,
      "author": {
        "id": 1000348
      },
      "writtenOn": "2024-08-20T06:51:07Z",
      "side": 1,
      "message": "what will be the default and is the value persisted ?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a137c77d_daf23e6d",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 361,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "The default Role value will be Unknown, and it is persisted.",
      "parentUuid": "7a7908b7_34d5d5b8",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c649f87e_2047e545",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 364,
      "author": {
        "id": 1000348
      },
      "writtenOn": "2024-08-20T06:51:07Z",
      "side": 1,
      "message": "is this persisted ?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ee2aa00_a5450da3",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 364,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "I wasn\u0027t thinking it would be and would just be rediscovered each time. Otherwise I\u0027d be worried about getting into a case where we disable it and lose the reason why.  Can you see any issues with that?",
      "parentUuid": "c649f87e_2047e545",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8d1381d_6e514cfd",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 374,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "could this be useful to the customer for testing or isolating in automatic external initiation?   while lab and manufacturing can\u0027t justify the requirements it\u0027s worded to be restricted to those users.",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8590e5cf_7de4c252",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 374,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "That\u0027s true. I can reword some. We don\u0027t plan on exposing it on Redfish but wouldn\u0027t prevent someone else from doing so.",
      "parentUuid": "d8d1381d_6e514cfd",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f114f471_11671a4c",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 381,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "does this imply all states (code level mismatched)? or\nwould it have a force takeover that is more destructive to any current host states? or would force always destroy the host states?\n\n\ninstead of a force parameter why not a separate \n`ForcedTakeover` action? to manager reset actions?  this would allow OEM refinement or additional beyond nominal takeover (eg just couldn\u0027t find siblings or some expected hardware vs unprovisioned or code mismatched)\n\nor an enum parameter that could expand by redfish OEM Does redfish have this concept?). Thia would allow eg try to preserve host state or force off on etc.   getting a failure message back from a reset action with why the takeover was rejected/blocked is difficult and may have OEM limits.   maybe someone wants to be try to release the hardware and give up the active role on the active BMC for a graceful takeover.",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e3322b4_5e5e21bc",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 381,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "\u003e does this imply all states (code level mismatched)? \n\nNo, in fact now I think we are going the direction of have a case where redundancy is enabled (syncs are happening), but we will reject failovers - \u0027failovers paused\u0027. For example when we are in the middle of a boot or dump.  The force would then override the paused state.  Will need to do some rewording base on that.\n\n\u003e instead of a force parameter why not a separate ForcedTakeover action?\n\nThanks for the ideas.  I will consult with others.",
      "parentUuid": "f114f471_11671a4c",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c89d9717_048a7056",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 394,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "Thia is hosted by the common application?   how does it communicate with the hardware specific service?  why wouldn\u0027t it be common?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b2e47d7_e378ddbc",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 394,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "No, this is hosted by the HW specific one.  Maybe just restating things again, but it will do the following for us:\na) Write the fields in the below table to its own CFAM. Most are on D-Bus, so it can just watch the properties.\nb) Read the sibling CFAM and put the fields on this object path using the below interface.",
      "parentUuid": "c89d9717_048a7056",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f39ff63_ed2cdf54",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 395,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "which daemon are we back to the hardware specific?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab54645e_58b6cd73",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 395,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "The one that deals with with getting D-Bus properties to and from the sibling.",
      "parentUuid": "0f39ff63_ed2cdf54",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d14ab72_c3a060f7",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 414,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "All if this is common correct?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a6a57f5_5cc87e44",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 414,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "Common as in both BMCs have the same fields?  yes.",
      "parentUuid": "8d14ab72_c3a060f7",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c55ecce2_13446d3d",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 451,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "separate this into another paragraph, it\u0027s changing topic from IBM design to theoretical other systems",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d0eeed7_dc4c477f",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 451,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "c55ecce2_13446d3d",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b12558a_9a55c218",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 465,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "so this is somehow from the sibling?   can the initial role be found or defaulted until network access and sync is achieved?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b9c5c4c_226ae570",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 465,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "\u003e so this is somehow from the sibling? \n\nNot sure what you\u0027re asking? We are getting the BMC state and a heartbeat from the sibling.\n\n\u003e can the initial role be found or defaulted until network access and sync is achieved?\n\nYes. Because we are using FSI, we can determine the initial role completely without  the network, which is why we are using it.",
      "parentUuid": "3b12558a_9a55c218",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d84f18e_b30f6094",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 472,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "won\u0027t this complicate factory reset?\n\nwhy not leave it to provisiong to initiate a fallover to transition to active the first time?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a86be86_b50468e6",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 472,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "\u003e won\u0027t this complicate factory reset?\n\nHow so? After a factory reset I don\u0027t see that one could expect the active BMC to necessarily stay the same.\n\nIn our manufacturing, redundancy will be disabled, so there won\u0027t be any failovers happening even though there will be provisioning.",
      "parentUuid": "3d84f18e_b30f6094",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f08c44ca_899e0ebb",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 476,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "repeative with lime 467 above.   kept separate for emphasis and separation of thought implies keeping this instance may be preferable.",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16e7b047_6feeeffc",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 476,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "Yea, trying to state how if that BMC happens to come up much later (minutes? hours? days?) after the first BMC, it would know how to not also try to be active if there already is one.",
      "parentUuid": "f08c44ca_899e0ebb",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "736d3f13_731ad38a",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 487,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "this seems like a substate of passive ....  passive, limited, active",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f3394e3_17af2091",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 487,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "Possibly, though I don\u0027t think we need to track it as one.",
      "parentUuid": "736d3f13_731ad38a",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e83aec3f_25103809",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 490,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "this would no longer be ready right?  I understand it\u0027s good gate to transition, but if it\u0027s rebooted will it be able to transition to redundancy enabled or would it require a force takeover?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "656c2cd6_5e06f722",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 490,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "The plan is to be able to enable redundancy when the passive comes back from a reboot (assuming there is still nothing remaining preventing it).",
      "parentUuid": "e83aec3f_25103809",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9dcbc61_e80318ab",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 497,
      "author": {
        "id": 1000348
      },
      "writtenOn": "2024-08-20T06:51:07Z",
      "side": 1,
      "message": "will sync happen before the services are started ? what would it sync at this time ? persisted data or only base information held by the RBMC app?",
      "range": {
        "startLine": 496,
        "startChar": 9,
        "endLine": 497,
        "endChar": 51
      },
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f7d8573_6d9bd97f",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 497,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "Yea you\u0027re right.  In fact even down below I list the sync happening after the services are started. so not sure what happened here.  Will fix.",
      "parentUuid": "f9dcbc61_e80318ab",
      "range": {
        "startLine": 496,
        "startChar": 9,
        "endLine": 497,
        "endChar": 51
      },
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c2fd545_def867b7",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 501,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "hmmm what does it mean to do a full sync in fallover?  \nseems like the possibility previously active would need to be alive \n\nshould the sync be part of allowing redundancy but just some kind of file consistently check (eliminate/clean up partially transferred files) be before active, and the redundancy enabled be deferred?\n\nwriting this tells me then the passive could be left behind and would need to be aware it will need to use force fallover.   hmmm...",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b7b6478_bb20d02d",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 501,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "\u003e seems like the possibility previously active would need to be alive \n\nI probably need to reword this.  The sync happens as part of enabling redundancy after the new passive BMC has already come back from its reboot.\n\n\u003e should the sync be part of allowing redundancy but just some kind of file consistently check (eliminate/clean up partially transferred files) be before active, and the redundancy enabled be deferred?\n\nI think the full sync just looks the same as other times we enable redundancy, so we wouldn\u0027t need to do anything special?  Can you elaborate if you think otherwise?\n\n\u003e writing this tells me then the passive could be left behind and would need to be aware it will need to use force fallover. hmmm...\n\nI think I maybe just need to reword this to better state how we will do the full sync when/if the new passive comes back up, because I can\u0027t think of how we\u0027d be in danger of it getting left behind.",
      "parentUuid": "1c2fd545_def867b7",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "559f8171_da2daa6d",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 513,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "why is update role not before taking over hardware access?\n\nwouldn\u0027t it always be required to ensure the hardware access is to whichever BMC is active? \n\nif hardware is only partially discovered due to latent issues the previously active BMC just not fully available.\n\nthis points out that BMC ready is now broken it\u0027s no longer services started and redfish resources stable.  should it not be set until passive role is decided and cleared from failover initiated until completed?  should we send a reboot event for unaware client to reset their state?\n\nthe manager needs to also check that fallover in progress is false before trying to manage the system / or enumerating the Reddish tree ?  I see it\u0027s also role active.",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c5c35e6_a7000f69",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 513,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "\u003e if hardware is only partially discovered due to latent issues the previously active BMC just not fully available.\n\nThose are good points,  I don\u0027t think there\u0027s a reason it can\u0027t be moved earlier.\n\n\u003e this points out that BMC ready is now broken it\u0027s no longer services started and redfish resources stable. should it not be set until passive role is decided\n\nOur initial plan was to not even decide active/passive until we get to BMCReady, but yea, it may be better to hold it off.  I\u0027ll look into it.\n\n\n\u003e  should we send a reboot event for unaware client to reset their state?\n\nAnyone that cares should be listening for the role changed redfish event.  I don\u0027t think we\u0027ve found a requirement for a reboot event yet. (or maybe it already exists and is being used and I just don\u0027t know about it)\n\n\u003e the manager needs to also check that fallover in progress is false before trying to manage the system / or enumerating the Reddish tree ?\n\nGood question.  We may need to consider adding that.",
      "parentUuid": "559f8171_da2daa6d",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "914f4359_dbd22d38",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 518,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "watt for the passive BMC to reach it\u0027s BMC ready?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eacc6841_ef5b7172",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 518,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "yea.  Will reword.",
      "parentUuid": "914f4359_dbd22d38",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c7f6c15_9a956256",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 520,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "this seems to require the passive BMC to be notified it to enable it\u0027s redundancy enabled State?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "493d670c_0eb44063",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 520,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "It would see it when the property on /xyz/openbmc_project/state/bmc1 is updated by the active.",
      "parentUuid": "6c7f6c15_9a956256",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0af57306_d4f15999",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 523,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "it would seem to me that after forcing the previously active BMC away is unique, once done and the role set to active the sibling reset a could be released and the reboot block removed.   \n\ndiscovery of the hardware should just be part of establisheing the active system state (target) once the hardware is forced away (I understand that establisheing access and forcing sibling isolation might be required or more efficient in a single bus walk but checking would be every time).   \n\nthis would reduce the reset block duration especially during discovery which would seem to be a high risk to hang.\n\nfailover in progress would persist and may affect role selection (maybe only check access vs force switch access and hence block failed BMC from becoming master without force but allowing force)\n\nshould we make isolation it\u0027s own service with systemd time limit to allow better failures response even if it requires outside initiated recovery ?   still seems better than requiring access to force reboot eg by power interruptions to the BMC.  \n\nalternative instead of it\u0027s own service the r\ngeneric role transition can establish the block and time the method call to the hardware but this might impose concurrency constraints should it be a method to trigger and a signal to complete?\n\nhow to interact between role and role transition service and the hardware role state can be TBD.",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1d75b56_6aac5eb7",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 523,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "\u003e it would seem to me that after forcing the previously active BMC away is unique, once done and the role set to active the sibling reset a could be released and the reboot block removed. \n\nYea, good points, I think releasing the reset earlier makes sense\n\n\n\u003e failover in progress would persist and may affect role selection \n\ngood point\n\n\u003e maybe only check access vs force switch access and hence block failed BMC from becoming master without force but allowing force)\n\nCould you elaborate, I don\u0027t quite follow?\n\n\n\u003e should we make isolation it\u0027s own service with systemd time limit to allow better failures response even if it requires outside initiated recovery ?\n\nThis would include everything in between the block and unblock of a BMC reboot?\n\n\u003e and time the method call to the hardware \n\nIs it the FSI local bus takeover and/or FSI scan you\u0027re talking about here, that you are worried about hanging?",
      "parentUuid": "0af57306_d4f15999",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66057152_c35d9aed",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 532,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "so this can be redfish aggregation to initiate a graceful takeover?    how does it know the partner has a better view until it attempts to probe?   is/can this decision made before reaching active?   should a failure cause it to remove itself from redundancy enabled before initiating the fallover request to the sibling?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a9fd76e_6c0150c8",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 532,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "\u003e so this can be redfish aggregation to initiate a graceful takeover?\n\nIf necessary, though if this is our only use of BMC-\u003eBMC redfish we\u0027d like to avoid it.  The active BMC can easily enough reboot itself into passive (by leaving a breadcrumb), then the question is can it also reboot the sibling such that it would know to come back as active, or can we just use an FSI backdoor to request a failover.\n\n\u003e how does it know the partner has a better view until it attempts to probe?\n\nWe\u0027re not going to know which is absolutely better until hostboot has gone though some steps, for example we can\u0027t know if hostboot can even talk to the BMC until after a boot starts.  So I think the plan is to gather up all the HW related results at some point in the boot (except for FSI cable errors which we can know before selecting the active with power off).\n\n\n\u003e should a failure cause it to remove itself from redundancy enabled before initiating the fallover request to the sibling?\n\nYea, it would need to somehow indicate redundancy can\u0027t be enabled.  We still need to work out a good way to track that.",
      "parentUuid": "66057152_c35d9aed",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0eb6acfc_16e37dcd",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 561,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "UI needs to treat passive to active as a new connection and throw away it\u0027s cache of empty collections.   see the BMC ready discussion in fallover action.",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f806d10_f1551e3e",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 561,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "good point. Will add.",
      "parentUuid": "0eb6acfc_16e37dcd",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb8438c7_db5c3657",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 574,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "how should delete or mark service be handled if the sibling is unreachable?   does it need to have redundancy disabled?  should the BMC identifier be used to control the master source to delete?\n\nwhat if the BMC is placed in the opposite site eg for problem isolation?  should it be provisioned or hardware location id?\n\nthe Web UI is currently sorting by id not time although this is being discussed in discord.  is this desirable?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f83a987e_cbf83623",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 574,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "\u003e  should the BMC identifier be used to control the master source to delete?\n\nCould you elaborate here, I don\u0027t quite follow the question?\n\n\u003e what if the BMC is placed in the opposite site eg for problem isolation? should it be provisioned or hardware location id?\n\nSo a BMC is moved to the other position? I don\u0027t think provisioning would be necessary, unless I\u0027m forgetting something.  I guess any new event logs would just have the new ID.\n\n\u003e the Web UI is currently sorting by id not time although this is being discussed in discord. is this desirable?\n\nGood catch, we would want it to sort by time otherwise the logs would be grouped by originating BMC.  I can put that in the doc.",
      "parentUuid": "bb8438c7_db5c3657",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51d9afa3_893c5767",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 593,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "this implies stopping and restarting the service?   \ncan we instead create a virtual? plug dect when it becomes active?\n\nhow is the system serial checked is it exposed always for mismatch trouble shooting?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70d743a2_775da8b1",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 593,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "\u003e can we instead create a virtual? plug dect when it becomes active?\n\ncould you elaborate on how this would work?  I would like to avoid restarting it, so definitely open to something else here.\n\n\u003e how is the system serial checked is it exposed always for mismatch trouble shooting?\n\nWe\u0027re trying to get the hardware such that the system SN is on a standalone FRU available to both BMCs.",
      "parentUuid": "51d9afa3_893c5767",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bea9c515_ea7707eb",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 605,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "adding watches seems excessive will consume kernel memory for each file, especially when a limited number will be changed in each sync.   preferably the sync daemon could write the state ov r dbua directly but alternatively a signal to re-read and signal changes?   do we need to have many restricted from modification when in passive role (obviously not the role determination state).   does this imply syncing to a temporary directory?   would it also psm to do change detection more directly and eliminate the sync daemon from having to detect unchanged settings and eliminate false changed signals?",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51a4d292_6cb693a7",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 605,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "\u003e  but alternatively a signal to re-read and signal changes?\n\nThat\u0027s not a bad idea, it would definitely be less code (and resources as you state above) than inotify watches, to just have a way to tell it to reread its persisted files.\n\n\u003e  do we need to have many restricted from modification when in passive role \n\nI don\u0027t think that would be necessary.  The understanding is that if it is changed on the passive it could get overwritten by a sync.\n\n\u003e  would it also psm to do change detection more...\n\nI didn\u0027t quite follow this.  Could you elaborate?",
      "parentUuid": "bea9c515_ea7707eb",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf21ecce_13ed2c16",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 630,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "will the override wants leave default [Wants] in the service file?  does this break systemctl enable disabled?   can the target be filtered during bbappend or service install to adjust the target?   (do we only remove multi user target?)",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af04e4eb_bf55f54a",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 630,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-08-21T20:49:25Z",
      "side": 1,
      "message": "will get back to this one after I grok your big systemd related comments above.",
      "parentUuid": "cf21ecce_13ed2c16",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca9eb37d_7c3a5728",
        "filename": "designs/redundant-bmc.md",
        "patchSetId": 7
      },
      "lineNbr": 636,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-19T10:26:30Z",
      "side": 1,
      "message": "see above discussiin in fallover re BMC ready.",
      "revId": "10d7f9f66672f379d918364c88b14d428b115d25",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}