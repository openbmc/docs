{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0d2b5943_0e665092",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-05-15T08:03:31Z",
      "side": 1,
      "message": "FYI: This design doc about [System Diagnostic Data Collection](https://gerrit.openbmc.org/c/openbmc/docs/+/79448) can give a view about how PLDM File Transfer can be used in a system context. In this design, `phosphor-debug-collector` is the one directly interacting with the file interfaces and providing D-Bus interfaces for bmcweb to trigger collecting/offloading dump records. Hence, the blocking issue caused by libfuse might not impact bmcweb.",
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8819b5eb_cc273cea",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 606,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-19T01:48:20Z",
      "side": 1,
      "message": "I think you should discuss why you\u0027re proposing a flat structure up front.",
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a86a91b_dba80906",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 606,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-05-22T03:17:15Z",
      "side": 1,
      "message": "Updated. Please help re-check.",
      "parentUuid": "8819b5eb_cc273cea",
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dee5ec6e_c052aab4",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 609,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-19T01:48:20Z",
      "side": 1,
      "message": "I feel that using associations to construct a path hierarchy is pretty expensive. D-Bus has paths, why not exploit them?",
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3652db37_f6c0bd2a",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 609,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-05-21T10:34:43Z",
      "side": 1,
      "message": "I had mentioned 2 approaches. Removed the association one.",
      "parentUuid": "dee5ec6e_c052aab4",
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a09bc6c_99aca9e3",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 617,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-19T01:48:20Z",
      "side": 1,
      "message": "I feel this would be better specified as sdbusplus yaml?",
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57e16b5c_89213505",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 617,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-05-21T10:34:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a09bc6c_99aca9e3",
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be2ec501_076ed9a1",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 617,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-05-21T10:34:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a09bc6c_99aca9e3",
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40dd1c58_faa987b7",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 649,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-19T01:48:20Z",
      "side": 1,
      "message": "I don\u0027t think that\u0027s something that can be left up to some implementation. This needs to be handled by pldmd.",
      "range": {
        "startLine": 648,
        "startChar": 25,
        "endLine": 649,
        "endChar": 15
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ade2154_b8be45fb",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 649,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-05-21T10:34:43Z",
      "side": 1,
      "message": "ACK. Added some elaborations on how it should be used.",
      "parentUuid": "40dd1c58_faa987b7",
      "range": {
        "startLine": 648,
        "startChar": 25,
        "endLine": 649,
        "endChar": 15
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9f2ee6b_aff1b28a",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 649,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-05-22T03:17:15Z",
      "side": 1,
      "message": "DfHeartbeat is Optionally supported by File Host and a Conditional command for File CLient according to table `Table 6 â€” PLDM for File Transfer Command Codes` in DSP0242 1.0.0. Therefore, I removed the sentence.",
      "parentUuid": "7ade2154_b8be45fb",
      "range": {
        "startLine": 648,
        "startChar": 25,
        "endLine": 649,
        "endChar": 15
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bf5bee7_e383434f",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 663,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2025-04-17T10:29:47Z",
      "side": 1,
      "message": "We should not preclude this from the design.",
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3617aaf_d3304f4e",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 663,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-05-21T10:34:43Z",
      "side": 1,
      "message": "According to Table 9 DfOpen Command Format (Section 9.2.5 DSP0242 v1.0.0). `DfOpenAttribute` field in DfOpen command has `DfOpenReadWrite` bitfield not supporting `Write` so I mentioned that it\u0027s not supported. Should I remove the sentence to save it for future?",
      "parentUuid": "2bf5bee7_e383434f",
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c8c9bee_c04bb1f0",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 747,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-19T01:48:20Z",
      "side": 1,
      "message": "Why is this a concern? This is how async applications are implemented anyway (or via `io_uring`).",
      "range": {
        "startLine": 744,
        "startChar": 0,
        "endLine": 747,
        "endChar": 1
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af67b3cb_f67ee14d",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 747,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-05-21T10:34:43Z",
      "side": 1,
      "message": "Acknowledged. I will address this after my concerns about socketpair are cleared.",
      "parentUuid": "5c8c9bee_c04bb1f0",
      "range": {
        "startLine": 744,
        "startChar": 0,
        "endLine": 747,
        "endChar": 1
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31ef6e91_5b7143fc",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 747,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-05-23T04:46:14Z",
      "side": 1,
      "message": "Agree with arj\u0027s statement here, this can be implemented using async IO, where we open the socket in NONBLOCKING mode, and let the application be waiting on eventloop and execute the transfer only when ever the data becomes available.",
      "parentUuid": "af67b3cb_f67ee14d",
      "range": {
        "startLine": 744,
        "startChar": 0,
        "endLine": 747,
        "endChar": 1
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89f1d170_a8000b0e",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 747,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-05-23T09:43:00Z",
      "side": 1,
      "message": "But I see some problems with socket, where  pldmd has to rely on the client to start reading the data off, or the kernel buffer will overflow. pldmd and the client app has to cover how long to wait for the socket\u0027s readiness and error handling. While with memfd, when it\u0027s returned from the D-Bus method to the client, it\u0027s ready for the client to read. Do you think I should update to mention these in the comparison?",
      "parentUuid": "31ef6e91_5b7143fc",
      "range": {
        "startLine": 744,
        "startChar": 0,
        "endLine": 747,
        "endChar": 1
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7ff07f8_92cc9fc4",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 747,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-06-02T01:11:40Z",
      "side": 1,
      "message": "\u003e or the kernel buffer will overflow.\n\nWhat do you mean by this? If the socket buffer is full the socket is not write-ready and so pldmd won\u0027t write to it. Overflows are prevented this way. Once a read has been performed the socket buffer is (partially) drained and so becomes write-ready, allowing pldmd to write more data. pldmd continues to read the file from the device until the data transfer is complete or the client application closes its socket.\n\nWhat we\u0027re proposing is that pldmd act like a proxy. That\u0027s not an unusual thing to do.",
      "parentUuid": "89f1d170_a8000b0e",
      "range": {
        "startLine": 744,
        "startChar": 0,
        "endLine": 747,
        "endChar": 1
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5438dd6b_d63ec2a0",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 747,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-06-10T08:39:14Z",
      "side": 1,
      "message": "Blocking concerns are invalid, removed.",
      "parentUuid": "a7ff07f8_92cc9fc4",
      "range": {
        "startLine": 744,
        "startChar": 0,
        "endLine": 747,
        "endChar": 1
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f56271d_23134321",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 771,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-19T01:48:20Z",
      "side": 1,
      "message": "But we can do this as a stream by sending PLDM messages on demand while not blocking the client application, right?",
      "range": {
        "startLine": 769,
        "startChar": 0,
        "endLine": 771,
        "endChar": 72
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13e6180c_f3fa98fa",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 771,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-05-21T10:34:43Z",
      "side": 1,
      "message": "Hi Andrew, thanks for your feedback. I\u0027ve spent sometimes looking at socket implementation in openbmc and have some questions. This allows the client app to read the client side of the socketpair before all the data is written to the socket. Does it mean that it can call Read() -\u003e receive the client side of the pair when Read() returns and starts reading from the socket while pldmd is still writing to the server side. I wonder how pldmd can return D-Bus error during reading data from the other terminus to the client apps when Read() already returns after the socketpair is setup? In other words, how clients know that the Read() method succeeds or not. Please correct me if I misunderstand somewhere.",
      "parentUuid": "3f56271d_23134321",
      "range": {
        "startLine": 769,
        "startChar": 0,
        "endLine": 771,
        "endChar": 72
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a7d47bb_afdded63",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 771,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-05-22T07:27:08Z",
      "side": 1,
      "message": "Moreover, I think I was wrong at first by expecting that `pldmd` will write the whole file content to the `memfd`. Instead, the client app\u0027s supposed to specify its read buffer size in the Read() method.\n\nWith socketpair, we have to depend on the client app to read the data from the socket. Otherwise, the kernel buffer will overflow, then `pldmd` will need to cover how long it should poll the socket until it can be written to again.",
      "parentUuid": "13e6180c_f3fa98fa",
      "range": {
        "startLine": 769,
        "startChar": 0,
        "endLine": 771,
        "endChar": 72
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23d09777_4111e862",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 771,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-06-02T01:11:40Z",
      "side": 1,
      "message": "I don\u0027t see a problem there? As mentioned above, we\u0027re proposing pldmd act like a proxy.\n\nIf you want to see this strategy in action, have a look at obmc-console. That has some other complications, but the principle is the same (acting as an intermediary between a data producer and a data consumer).",
      "parentUuid": "0a7d47bb_afdded63",
      "range": {
        "startLine": 769,
        "startChar": 0,
        "endLine": 771,
        "endChar": 72
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "438fad9f_7b424ccd",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 771,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2025-06-09T02:29:14Z",
      "side": 1,
      "message": "I think the main concern is stream or not stream. We are proposing the PLDM file transfer, so I think we don\u0027t need to support stream. In case we want to transfer the serialFifo log, instead of streaming we can get the log in small part (1kB-4kB) then show them to user.\n\nIn the proposal, we are providing D-Bus interface which includes D-Bus APIs to allow the D-Bus consumers retrieves the file from the D-Bus interface provider in this case is `pldmd`. We want to make the D-Bus APIs as much simple as possible.\n\nWith the current proposal, the D-Bus consumer just needs async call the `read` D-Bus API and handle callback to retrieve the file data. It is more simpler then supporting some APIs (Open, Read, Close) to do streaming. Not only simpler D-Bus interface, but also the simpler D-Bus consumer code.\n\nIf the D-Bus consumer wants to get the serial Fifo data as soon as possible, just need call read with small data size. It is worth to add some `open`, `close` PLDM request commands to terminus in `pldmd` to make the D-Bus API simple. And that D-Bus APIs can be applied for other protocol but not only PLDM.",
      "parentUuid": "23d09777_4111e862",
      "range": {
        "startLine": 769,
        "startChar": 0,
        "endLine": 771,
        "endChar": 72
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16b45d5a_c306af63",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 771,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-06-10T08:39:14Z",
      "side": 1,
      "message": "The reason we chose memfd is we view PLDM file transfer as the underlying interface between BMC and Host that allows users to download system diagnostic files through Redfish (/LogServices/Dump schema), in the context that the current handling mechanism of bmcweb for a user download request to a dump file (https://github.com/openbmc/bmcweb/blob/5c467f93d9dd4fc8de98dd51639f9039d5a52e7a/redfish-core/lib/log_services.hpp#L678) is to set the FD of the file that contains the whole dump content (provided by phosphor-debug-collector) to the http_body\u0027s fileHandle. There\u0027s currently no scheme to stream dump content in small chunks to users. Not to mention, the WebUI also support the UI to collect and download the dumps as files, so I think if the output to users is a single binary data to be downloaded, then mem_fd is good.\n\nIf pldmd should implement streaming, phosphor-debug-collector still needs to finally pack all the data to a file to prepare for a user download request, or the mechanism in bmcweb needs to change to supporting streaming dump data in chunks (now directly through the socket pair opened between it and pldmd).",
      "parentUuid": "438fad9f_7b424ccd",
      "range": {
        "startLine": 769,
        "startChar": 0,
        "endLine": 771,
        "endChar": 72
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a3f6b73_cd66b21e",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 771,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-06-24T09:19:11Z",
      "side": 1,
      "message": "I updated the memfd-socketpair comparison to better address the comments. Please help scan through when you have time and leave feedback. Thank you.",
      "parentUuid": "16b45d5a_c306af63",
      "range": {
        "startLine": 769,
        "startChar": 0,
        "endLine": 771,
        "endChar": 72
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02a49512_4ff8ca1e",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 773,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-19T01:48:20Z",
      "side": 1,
      "message": "I think we want to avoid doing this? Why read it all at once when we can stream chunks all the way from the PLDM endpoint through to the client application?",
      "range": {
        "startLine": 773,
        "startChar": 2,
        "endLine": 773,
        "endChar": 66
      },
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9e29eed_60d4844d",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 775,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2025-04-17T10:29:47Z",
      "side": 1,
      "message": "How about a libpldm API for discovery (file paths and related metadata)? File reads/writes can be just as regular files (with inotify based mechanism if pldmd has to update files to the device, or writes could be a libpldm API).",
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b11eb48_e66018d5",
        "filename": "designs/pldm-stack.md",
        "patchSetId": 12
      },
      "lineNbr": 775,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-05-21T10:34:43Z",
      "side": 1,
      "message": "Hi, thanks for your suggestion. As my above comment, write is not supported in the File Transfer spec yet. Except for that, I think your idea matches the alternative method, which involves the use of libfuse, when you said \"can be just as regular files\", right?",
      "parentUuid": "b9e29eed_60d4844d",
      "revId": "6f7be3dd7fc4eecc63c3a31b60a311a7356c8173",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}