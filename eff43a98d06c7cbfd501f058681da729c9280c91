{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ea9ef520_b72526c6",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-18T21:31:30Z",
      "side": 1,
      "message": "\"Since\"",
      "range": {
        "startLine": 12,
        "startChar": 44,
        "endLine": 12,
        "endChar": 51
      },
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d3c0eb7_f8371d25",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1001802
      },
      "writtenOn": "2024-11-20T22:36:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea9ef520_b72526c6",
      "range": {
        "startLine": 12,
        "startChar": 44,
        "endLine": 12,
        "endChar": 51
      },
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00ef1586_7d332170",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2024-11-17T07:33:39Z",
      "side": 1,
      "message": "does this redfish client support talking to multiple SMCs at the same time?",
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5feca1d_da6fbbdd",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1001802
      },
      "writtenOn": "2024-11-20T21:01:36Z",
      "side": 1,
      "message": "Yes.",
      "parentUuid": "00ef1586_7d332170",
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fc29140_b9d66c6e",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-11-15T05:03:24Z",
      "side": 1,
      "message": "If you\u0027re addressing a specific SMC communication issue, a daemon might be effective. However, for the broader challenge of REST/HTTPs/Redfish communication, it seems to add unnecessary complexity and reduces flexibility. Relying on a single application for all communications introduces a single point of failure. Additionally, the need for type-safe classes for Redfish schemas may stem from this added layer of indirection between the application and server. The two reasons you mentioned for a Redfish client daemon—reusability and security—are already addressed in the industry through HTTP libraries, OpenSSL, and various server-specific authentication and authorization methods.",
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3aa5e9d4_19d4eeec",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1001802
      },
      "writtenOn": "2024-11-15T19:45:57Z",
      "side": 1,
      "message": "1. This design/daemon is concentrating on enabling BMC to be able to communicate with SMCs that specifically can only talks Redfish, and has no intention for solving the broader challenge of REST/HTTPs/Redfish communication.\n2. Single point of failure also means single point of optimization/fix and no duplicated code, which is a reasonable tradeoff in this case as failure to communicating with SMCs is not something completely unacceptable.\n3. The client and server are still going to be communicate via Redfish directly, the type-safe classes are just client implementation detail of how to process response and construct request regarding Redfish protocol. It is a common and good practice to wrap complex raw json objects with classes, and the codegen lib will save engineer time for manually writing those classes. In terms of flexibility, even though I don\u0027t believe that\u0027s a must-have or high priority feature, the lib itself should have enough room for making change and improvement.\n4. The proposal daemon will definitely use some HTTP libraries that can provide\nindustry standard security feature and may apply SMC specific authentication and\nauthorization methods if any. The reason that security is being mentioned in the design is purely a comparison to \"redfish aggregation\", which exposing the SMC\ndirectly onto the external network. HTTP layer security won\u0027t solve this problem as we would like the SMC to be completely invisible to external other than the BMC.",
      "parentUuid": "7fc29140_b9d66c6e",
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89e8027c_75d665c7",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1001802
      },
      "writtenOn": "2024-11-20T21:01:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3aa5e9d4_19d4eeec",
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2b2fd95_4e42e684",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-12-03T19:10:11Z",
      "side": 1,
      "message": "\u003e and has no intention for solving the broader challenge of REST/HTTPs/Redfish communication.\n\nSo we\u0027re duplicating a lot of code?  Unclear how that scales in this design.\n\nThis looks like it got marked done without really answering the overall question (which I had the same question below).  This design is proposing we do redfish parsing in more than one repository, whereas previously there was only one (bmcweb).  How do we make sure we\u0027re not duplicating a lot of code between them, and thereby requiring all redfish features be added twice, once to the aggregator and once to this client?\n\n\u003e Single point of failure\n\nNot sure I agree the tradeoff is reasonable, and single point of failure implies that we can\u0027t create new applications with shared code, rather than rewriting.  Please reword.  FWIW, the reason this wasn\u0027t rolled out into its own application for redfish aggregation is so that connections could be persistent, queued, and shared, so as not to overwhelm the Redfish server.  There\u0027s certainly a tradeoff here to discuss, but it needs discussed in the background section.\n\n\u003e common and good practice\n\nIs there any other Redfish client that\u0027s done this?  As someone who has tried and failed several times, I wasn\u0027t aware of any that are used at any kind of scale.  Others have tried (links below) and ended up having to fall back to normal HTTP.  I thought even the guys doing grpc rack manager had fallen back to passing around raw json objects and binary blobs because of the inconsistencies in the Redfish type system.\n\nAs much as I really want to see this succeed, I\u0027m worried we\u0027re going to solve 80% of the problem, then not have the ability to solve the last 20%\nto make a complete solution.\n\nhttps://github.com/Nordix/go-redfish\nhttps://gbmc.googlesource.com/gbmcweb/+/refs/heads/master",
      "parentUuid": "89e8027c_75d665c7",
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0288e3c7_58292225",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-12-06T04:10:33Z",
      "side": 1,
      "message": "@Xinyuan. \n\"I’m unclear about the purpose of the Redfish client service since no other service depends on it. My assumption is that other BMC services use it for external communications.\n\nWhile a single point of failure can streamline optimization and reduce code duplication, achieving this doesn’t require a single service. A library can provide the same benefits without introducing a single point of failure. If a service using the library fails, only that service is affected, and other HTTP services remain operational.\n\nBy replacing the DBus calls to the Redfish client service with HTTP library calls, any service can directly communicate with external SMCs.\"",
      "parentUuid": "f2b2fd95_4e42e684",
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "baef6918_1f297e4b",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2024-11-17T07:33:39Z",
      "side": 1,
      "message": "Does this redfish client supports redfish event listener as well?",
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6fe3027_2eb7713c",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1001802
      },
      "writtenOn": "2024-11-20T21:01:36Z",
      "side": 1,
      "message": "Not in the current plan, might support such feature in the future.",
      "parentUuid": "baef6918_1f297e4b",
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6b6a4c6_b4dc9d8a",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2024-11-17T07:33:39Z",
      "side": 1,
      "message": "how does task maintain this internal state, can you please elaborate?",
      "range": {
        "startLine": 61,
        "startChar": 42,
        "endLine": 61,
        "endChar": 79
      },
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2df3c4e4_c6793321",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1001802
      },
      "writtenOn": "2024-11-20T21:01:36Z",
      "side": 1,
      "message": "Each task will maintain its own state in memory in some cpp struct and will be updated in every poll to the SMC. The state would mainly contain the result of the last poll (likely a map or vector of cpp object that corresponds to the exposed D-Bus object by leveraging the `sdbusplus` lib), as well as value needed for task execution such as last poll time.",
      "parentUuid": "c6b6a4c6_b4dc9d8a",
      "range": {
        "startLine": 61,
        "startChar": 42,
        "endLine": 61,
        "endChar": 79
      },
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "628c8c3d_74cc494b",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2024-11-17T07:33:39Z",
      "side": 1,
      "message": "how does read/write error handling done in this redfish client.\n\ndoes this redfish-client support re-try mechanisms?",
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9016e397_b0218d79",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1001802
      },
      "writtenOn": "2024-11-20T21:01:36Z",
      "side": 1,
      "message": "Re-try should be supported. Error handling would be case by case depending on the feature. For example in sensor monitoring, if the SMC isn\u0027t available, the client would marked the monitored sensor as unavailable and probably emit a Event Log. Both retry and error handling should be configurable individually for each task by the configuration files to some extend.",
      "parentUuid": "628c8c3d_74cc494b",
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0344061_87ea9da1",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2024-11-17T07:33:39Z",
      "side": 1,
      "message": "any other BMC can act as SMC here right?",
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0182f55a_bbfd1943",
        "filename": "designs/redfish-client.md",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1001802
      },
      "writtenOn": "2024-11-20T21:01:36Z",
      "side": 1,
      "message": "Theoretically any device that accept Redfish protocol and can be reached by the host BMC can be the target SMC for this redfish client.",
      "parentUuid": "e0344061_87ea9da1",
      "revId": "eff43a98d06c7cbfd501f058681da729c9280c91",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}