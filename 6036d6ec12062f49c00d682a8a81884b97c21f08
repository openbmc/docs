{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e1a9b333_af9af9c6",
        "filename": "designs/redfish-oauth.md",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-11-15T07:46:52Z",
      "side": 1,
      "message": "Duplicated \"valid time\"",
      "range": {
        "startLine": 86,
        "startChar": 30,
        "endLine": 86,
        "endChar": 40
      },
      "revId": "6036d6ec12062f49c00d682a8a81884b97c21f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37b9316f_8a02016c",
        "filename": "designs/redfish-oauth.md",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-15T20:15:59Z",
      "side": 1,
      "message": "Thanks! Done",
      "parentUuid": "e1a9b333_af9af9c6",
      "range": {
        "startLine": 86,
        "startChar": 30,
        "endLine": 86,
        "endChar": 40
      },
      "revId": "6036d6ec12062f49c00d682a8a81884b97c21f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d405e51c_1d7f0dd7",
        "filename": "designs/redfish-oauth.md",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-11-15T07:46:52Z",
      "side": 1,
      "message": "It is a bit complicated for expiration.\nWe have a requirement for 1 hour expiration for logged in users. So in Bytedance\u0027s SSO implementation, we do not check the expiration from the token, it is assumed as 1 hour that is configured in SessionStore",
      "range": {
        "startLine": 122,
        "startChar": 58,
        "endLine": 122,
        "endChar": 68
      },
      "revId": "6036d6ec12062f49c00d682a8a81884b97c21f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8eda5e9c_f54abe7d",
        "filename": "designs/redfish-oauth.md",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-15T20:15:59Z",
      "side": 1,
      "message": "For the proposed workflow here, it\u0027s a pretty straightforward check: |local time| \u003c\u003d |create time| + |valid time|. |local time| can be get from std library, |create time| + |valid time| are just strings in the JWT.\n\nCould you elaborate why you think it\u0027s complicated here?",
      "parentUuid": "d405e51c_1d7f0dd7",
      "range": {
        "startLine": 122,
        "startChar": 58,
        "endLine": 122,
        "endChar": 68
      },
      "revId": "6036d6ec12062f49c00d682a8a81884b97c21f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e22c061_d0788f35",
        "filename": "designs/redfish-oauth.md",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-11-16T10:49:35Z",
      "side": 1,
      "message": "By \"complicated\" I mean the session timeout, would this mean the session timeout is set every time when an SSO login is performed?",
      "parentUuid": "8eda5e9c_f54abe7d",
      "range": {
        "startLine": 122,
        "startChar": 58,
        "endLine": 122,
        "endChar": 68
      },
      "revId": "6036d6ec12062f49c00d682a8a81884b97c21f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e51a2d9e_f70c7c61",
        "filename": "designs/redfish-oauth.md",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-17T01:21:56Z",
      "side": 1,
      "message": "I see where you are from now. I have two options here,\n\n1. not use the session codes at all in BMCWeb. This means every request will go to token verification. This might affect performance but I need to evaluate how slow it is. To my understanding, verifying a signature of short token should be fast.\n\n2. use session. Whenever we found there is no session for this token, we create a new session and set the session timeout to min(CurrTime + MaxSessionTimeout, CurrTime + TokenValidFor).\n\nMakes sense to you?",
      "parentUuid": "7e22c061_d0788f35",
      "range": {
        "startLine": 122,
        "startChar": 58,
        "endLine": 122,
        "endChar": 68
      },
      "revId": "6036d6ec12062f49c00d682a8a81884b97c21f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01eae5fb_60f42e9e",
        "filename": "designs/redfish-oauth.md",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-07-10T16:23:12Z",
      "side": 1,
      "message": "The Redfish specification requires the `exp` claim be present and be processed.  To avoid confusion, standards rely on application profiles to differentiate between access tokens and other uses of JSON Web Tokens, for example the security event token specification (SET, RFC8417 section 4.1), which can be used to log security relevant events, explicitly omits and rejects the exp claim.\n\nTokens may be rejected when otherwise valid for policy reasons; there is a standard introspection endpoint (RFC7662) that will identify arbitrary tokens from an associated token endpoint as invalid (eg to implement revocation) or valid.  Regardless, the lifetime of the token should be limited at the authorization service.  ByteDance like all users is welcome to add additional checks for tokens in their downstream code as they desire.\n\nIf the concern is using a token near the end of its lifetime being used to persist the usage of a token via a Redfish session beyond its lifetime realize that session creation requires a POST with a username and password and therefore do not provide a path to authenticate to an account.\n\nIf verifying tokens via processing their algorithm and signature (Nam option 1) proves to be too expensive then they can be presented to an introspection service (RFC7662) which can be used as part of a token revocation system however encrypting for transport over TLS is likely as or more expensive as validating the JWT;",
      "parentUuid": "e51a2d9e_f70c7c61",
      "range": {
        "startLine": 122,
        "startChar": 58,
        "endLine": 122,
        "endChar": 68
      },
      "revId": "6036d6ec12062f49c00d682a8a81884b97c21f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2552fc1_126c2578",
        "filename": "designs/redfish-oauth.md",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-11-15T07:46:52Z",
      "side": 1,
      "message": "In BMC the privileges are bound to a user group, how do you manage the user that is logged in to the BMC?",
      "range": {
        "startLine": 178,
        "startChar": 21,
        "endLine": 178,
        "endChar": 39
      },
      "revId": "6036d6ec12062f49c00d682a8a81884b97c21f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a544412_3ce0b2fe",
        "filename": "designs/redfish-oauth.md",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-15T20:15:59Z",
      "side": 1,
      "message": "Yes, there are two flavors:\n\n1. Redfish Privileges in JTW claim. We might send a dbus call to phosphor-user-manager to check if these privileges are in the system. Or we just skip the check, and directly use these strings as is when performing intersection.\n\n2. Redfish Roles in JTW claim. We need to send a DBus query to phosphor-user-manager to check what privileges this role has.\n\nI understand privileges are stored as groups. I have an approved design doc to add OEM privileges and roles in https://github.com/openbmc/docs/blob/master/designs/redfish-authorization.md",
      "parentUuid": "e2552fc1_126c2578",
      "range": {
        "startLine": 178,
        "startChar": 21,
        "endLine": 178,
        "endChar": 39
      },
      "revId": "6036d6ec12062f49c00d682a8a81884b97c21f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dde0b9bd_b1a021e5",
        "filename": "designs/redfish-oauth.md",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-11-16T10:49:35Z",
      "side": 1,
      "message": "I still have the question about the user who logged in.\nWhen the user logged in via OAuth will the session be associated with a user in phosphor-user-manager?",
      "parentUuid": "1a544412_3ce0b2fe",
      "range": {
        "startLine": 178,
        "startChar": 21,
        "endLine": 178,
        "endChar": 39
      },
      "revId": "6036d6ec12062f49c00d682a8a81884b97c21f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73295d4c_d43ad08d",
        "filename": "designs/redfish-oauth.md",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-11-17T01:21:56Z",
      "side": 1,
      "message": "No, there is no concept of \"user\" in authorization delegation. Only either \"Redfish Role\" or \"Redfish privileges\".\n\nFor mTLS connections, we might check if the peer\u0027s identity matches the subject role.",
      "parentUuid": "dde0b9bd_b1a021e5",
      "range": {
        "startLine": 178,
        "startChar": 21,
        "endLine": 178,
        "endChar": 39
      },
      "revId": "6036d6ec12062f49c00d682a8a81884b97c21f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "582ea4a9_b70e26c6",
        "filename": "designs/redfish-oauth.md",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-07-10T16:23:12Z",
      "side": 1,
      "message": "RFC8705 describes how to bind a bearer token to a mTLS client certificate (when the same mTLS client certificate is used to authenticate to the authorization server and the resource (Redfish) server).\n\n##### In regards to identifying a user:\nRFC7523 (JWT Profile for OAuth 2.0 Authentication and Authorization Grants) gives requirements for the authorization server and gives expectations for the subject (`sub`) claim for an authorization JWT.  It describes the subject being authorized accessor, but explicitly states the subject claim can be pseudonymous and may be opaque (section 3 requirement 2 A).\n\nThis means the JWT subject (`sub`) combined with the issuer (`iss`) claim can be used as an identifier (eg for audit, ownership of subscriptions, tasks, and any other uses of `ConfigureSelf`), but `sub` should not be interpreted beyond that, certainly not as a user account in the `ManagerAccount` service implemented by phosphor-user-manager.\n\nValidating the access token provides the requirement to authenticate the request.  Requiring a Redfish Session implies knowledge of the password assigned to an account and allows the access to the Role assigned to the account by omitting the access token from the request.  In addition it requires some method to maintain accounts visible to the account service and defeats the concepts of SSO and passwordless.  The RFCs explicitly forbid multiple values of the Authentication header or multiple schemes for its use to be defined.  We should honor that intent by not allowing a session to be specified.  See also the discussion about session lifetimes; avoiding the session avoids the confusion.",
      "parentUuid": "73295d4c_d43ad08d",
      "range": {
        "startLine": 178,
        "startChar": 21,
        "endLine": 178,
        "endChar": 39
      },
      "revId": "6036d6ec12062f49c00d682a8a81884b97c21f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}