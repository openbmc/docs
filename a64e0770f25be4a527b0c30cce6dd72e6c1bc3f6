{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ee0402fb_753e1737",
        "filename": "meta-layer-guidelines.md",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-11T20:49:00Z",
      "side": 1,
      "message": "I\u0027m somewhat surprised to see the people that gave a +1 one this given the following:\n\n  $ git ls-files -- \u0027:!:poky/**\u0027 \u0027:!:meta-security/**\u0027 \\\n        \u0027:!:meta-raspberrypi/**\u0027 \u0027:!:meta-openembedded/**\u0027 | \\\n    xargs grep SRC_URI | grep github.com | grep -v openbmc | \\\n    sed \"s#/.*##\" | sort | uniq -c | sort -n\n      1 meta-aspeed\n      2 meta-hpe\n      2 meta-inspur\n      2 meta-quanta\n      3 meta-nuvoton\n      5 meta-google\n      6 meta-phosphor\n      7 meta-yadro\n     13 meta-openpower\n\nWouldn\u0027t most of these recipes start to be a violation of this guideline?  It seems like a fairly common pattern for openpower at least to put recipes pointing to elsewhere.",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 96,
        "endChar": 29
      },
      "revId": "a64e0770f25be4a527b0c30cce6dd72e6c1bc3f6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc023317_34f74235",
        "filename": "meta-layer-guidelines.md",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-11T22:05:43Z",
      "side": 1,
      "message": "meta aspeed is on compliance, the only hit is socsec, which is intended to be a generic tool (admittedly targetted at aspeed bmcs, but not openbmc specific)\n\nmeta-google has a number of recipes, nanopb, glome, sslh, conf2struct, and mstp, none of which are openbmc specific or would violate this rule.\n\ngxp.... yeah.... points to a custom copy of u-boot.  That will need fixed to point to at least the openbmc fork of u-boot.\n\ninspur has a couple direct violations of the intent of this rule.\n\nNuvoton has its own copy of u-boot as well, the rest look like generic tools for their SOC and not openbmc specific.\n\nmeta-openpower looks like it\u0027s mostly generic tools, although I can\u0027t say that for sure for all of them.  Looking at it, I do recognize that guard is an openbmc-specific tool hosted in the github open-power org, I\u0027m assuming that\u0027s just an oversight, as I do recall a design doc for it in openbmc upstream.\n\nfbterm and urart-render-controller seem generic.\n\nQuanta seems to have violated this rule with a couple repos.  I\u0027ll let them call out their plan here (and FWIW, read-margin-temp has been an issue for gbs in the past, so it\u0027s worth fixing).\n\nYardro also seems to have their own copies of several tools.\n\n\nComplete list is below (derived from your script):\ngit ls-files -- \u0027:!:poky/**\u0027 \u0027:!:meta-security/**\u0027 \\\n        \u0027:!:meta-raspberrypi/**\u0027 \u0027:!:meta-openembedded/**\u0027 | \\\n    xargs grep SRC_URI | grep github.com | grep -v openbmc    \ngrep: bitbake: Is a directory\ngrep: meta: Is a directory\nmeta-aspeed/recipes-aspeed/python/socsec.inc:SRC_URI \u003d \"git://github.com/AspeedTech-BMC/socsec.git;protocol\u003dhttps;branch\u003d${BRANCH}\"\nmeta-google/recipes-extended/libconfig/conf2struct-native_git.bb:SRC_URI \u003d \"git://github.com/yrutschle/conf2struct;branch\u003dmaster;protocol\u003dhttps\"\nmeta-google/recipes-extended/networking/mstpd_git.bb:SRC_URI \u003d \"git://github.com/mstpd/mstpd;branch\u003dmaster;protocol\u003dhttps\"\nmeta-google/recipes-extended/networking/sslh_git.bb:SRC_URI \u003d \"git://github.com/yrutschle/sslh;branch\u003dmaster;protocol\u003dhttps\"\nmeta-google/recipes-google/console/glome_git.bb:SRC_URI \u003d \"git://github.com/google/glome.git;branch\u003dmaster;protocol\u003dhttps\"\nmeta-google/recipes-google/nanopb/nanopb_0.4.5.bb:SRC_URI \u003d \"git://github.com/nanopb/nanopb;branch\u003dmaster;protocol\u003dhttps\"\nmeta-hpe/meta-gxp/classes/gxp-bootblock-n-poc.bbclass:SRC_URI \u003d \"git://github.com/HewlettPackard/gxp-bootblock.git;branch\u003d${BBRANCH};protocol\u003dhttps\"\nmeta-hpe/meta-gxp/recipes-bsp/u-boot/u-boot-common-gxp_2020.10.inc:SRC_URI \u003d \"git://github.com/HewlettPackard/gxp-uboot.git;branch\u003d${UBRANCH};protocol\u003dhttps\"\nmeta-inspur/meta-fp5280g2/recipes-phosphor/power/phosphor-fp5280g2-psu-update.bb:SRC_URI \u003d \"git://github.com/inspur-bmc/fp5280g2-psu-update-tool;branch\u003dmaster;protocol\u003dhttps\"\nmeta-inspur/meta-on5263m5/recipes-inspur/inspur-uuid/inspur-uuid_git.bb:SRC_URI \u003d \"git://github.com/inspur-bmc/inspur-uuid.git;branch\u003dmaster;protocol\u003dhttps\"\nmeta-nuvoton/recipes-bsp/images/npcm7xx-bingo-native_git.bb:SRC_URI +\u003d \"git://github.com/Nuvoton-Israel/bingo;branch\u003dmaster;protocol\u003dhttps\"\nmeta-nuvoton/recipes-bsp/u-boot/u-boot-common-nuvoton.inc:SRC_URI \u003d \"git://github.com/Nuvoton-Israel/u-boot.git;branch\u003d${UBRANCH};protocol\u003dhttps\"\nmeta-nuvoton/recipes-nuvoton/loadsvf/loadsvf_git.bb:SRC_URI \u003d \"git://github.com/Nuvoton-Israel/loadsvf.git;branch\u003dmaster;protocol\u003dhttps\"\nmeta-openpower/recipes-bsp/ecmd-pdbg/ecmd-pdbg_1.0.bb:SRC_URI \u003d \"git://git@github.com/open-power/ecmd-pdbg.git;branch\u003dmaster;protocol\u003dhttps\"\nmeta-openpower/recipes-bsp/ecmd/croserver_git.bb:SRC_URI \u003d \"git://github.com/open-power/eCMD.git;branch\u003dmaster;protocol\u003dhttps\"\nmeta-openpower/recipes-bsp/ecmd/libecmd_git.bb:SRC_URI \u003d \"git://github.com/open-power/eCMD.git;branch\u003decmd15;protocol\u003dhttps\"\nmeta-openpower/recipes-bsp/ffs/ffs_git.bb:SRC_URI +\u003d \"git://github.com/open-power/ffs.git;branch\u003dmaster;protocol\u003dhttps\"\nmeta-openpower/recipes-bsp/fsidbg/fsidbg_git.bb:SRC_URI +\u003d \"git://github.com/eddiejames/fsidbg.git;branch\u003dmaster;protocol\u003dhttps\"\nmeta-openpower/recipes-bsp/guard/guard_git.bb:SRC_URI \u003d \"git://git@github.com/open-power/guard;branch\u003d\"main\";protocol\u003dhttps\"\nmeta-openpower/recipes-bsp/ipl/ipl_git.bb:SRC_URI \u003d \"git://git@github.com/open-power/ipl;branch\u003d\"main\";protocol\u003dhttps\"\nmeta-openpower/recipes-bsp/libekb/libekb_git.bb:SRC_URI \u003d \"git://git@github.com/open-power/libekb_p10;branch\u003d\"main\";name\u003dlibekb;protocol\u003dhttps \\\nmeta-openpower/recipes-bsp/pdata/pdata_git.bb:SRC_URI \u003d \"git://git@github.com/open-power/pdata;branch\u003d\"main\";protocol\u003dhttps\"\nmeta-openpower/recipes-bsp/pdbg/pdbg_3.4.bb:SRC_URI +\u003d \"git://github.com/open-power/pdbg.git;branch\u003dmaster;protocol\u003dhttps\"\nmeta-openpower/recipes-bsp/skiboot/skiboot.inc:SRC_URI +\u003d \"git://github.com/open-power/skiboot.git;branch\u003dskiboot-6.5.x;protocol\u003dhttps\"\nmeta-openpower/recipes-phosphor/host/aspeed-lpc-ctrl_git.bb:SRC_URI +\u003d \"git://github.com/shenki/aspeed-lpc-control;branch\u003dmaster;protocol\u003dhttps\"\nmeta-openpower/recipes-phosphor/logging/python3-sbe-log-parsers_git.bb:SRC_URI +\u003d \"git://git@github.com/open-power/sbe;branch\u003d\"master-p10\";protocol\u003dssh;protocol\u003dhttps\"\nmeta-phosphor/aspeed-layer/recipes-kernel/cf-fsi-firmware/cf-fsi-firmware_git.bb:SRC_URI \u003d \"git://github.com/ozbenh/cf-fsi.git;branch\u003dmaster;protocol\u003dhttps\"\nmeta-phosphor/classes/mrw-rev.bbclass:MRW_API_SRC_URI ?\u003d \"git://github.com/open-power/serverwiz.git;branch\u003dmaster;protocol\u003dhttps\"\nmeta-phosphor/recipes-devtools/iotools/iotools_1.6.bb:SRC_URI \u003d \"git://git@github.com/jonmayergoogle/iotools.git;protocol\u003dhttps;branch\u003dmaster\"\nmeta-phosphor/recipes-phosphor/ipmi/ipmitool_%.bbappend:SRC_URI \u003d \"git://github.com/ipmitool/ipmitool.git;protocol\u003dhttps;branch\u003dmaster\"\ngrep: meta-poky: Is a directory\ngrep: meta-skeleton: Is a directory\ngrep: scripts: Is a directory\nmeta-phosphor/recipes-phosphor/video/fbterm_git.bb:SRC_URI +\u003d \"git://github.com/jk-ozlabs/fbterm.git;nobranch\u003d1;protocol\u003dhttps\"\nmeta-phosphor/recipes-phosphor/video/uart-render-controller_git.bb:SRC_URI +\u003d \"git://github.com/jk-ozlabs/uart-render-controller;branch\u003dmaster;protocol\u003dhttps\"\nmeta-quanta/meta-common/recipes-quanta/fans/read-margin-temp_git.bb:SRC_URI \u003d \"git://github.com/quanta-bmc/read-margin-temp.git;branch\u003dmaster;protocol\u003dhttps\"\nmeta-quanta/meta-common/recipes-quanta/network/mac-address_git.bb:SRC_URI \u003d \"git://github.com/quanta-bmc/mac-address.git;protocol\u003dhttps;branch\u003dmaster\"\nmeta-yadro/meta-nicole/recipes-phosphor/logging/openpower-esel-parser_git.bb:SRC_URI \u003d \"gitsm://github.com/YADRO-KNS/openpower-esel-parser;branch\u003dmaster;protocol\u003dhttps\"\nmeta-yadro/recipes-yadro/cli/obmc-yadro-backup_git.bb:SRC_URI \u003d \"git://github.com/YADRO-KNS/obmc-yadro-backup.git;branch\u003dmaster;protocol\u003dhttps\"\nmeta-yadro/recipes-yadro/cli/obmc-yadro-cli_git.bb:SRC_URI \u003d \"git://github.com/YADRO-KNS/obmc-yadro-cli;branch\u003dmaster;protocol\u003dhttps\"\nmeta-yadro/recipes-yadro/cli/obmc-yadro-fwupdate_git.bb:SRC_URI \u003d \"git://github.com/YADRO-KNS/obmc-yadro-fwupdate;branch\u003dmaster;protocol\u003dhttps\"\nmeta-yadro/recipes-yadro/cli/obmc-yadro-lsinventory_git.bb:SRC_URI \u003d \"git://github.com/YADRO-KNS/obmc-yadro-lsinventory.git;branch\u003dmaster;protocol\u003dhttps\"\nmeta-yadro/recipes-yadro/cli/obmc-yadro-lssensors_git.bb:SRC_URI \u003d \"git://github.com/YADRO-KNS/obmc-yadro-lssensors.git;branch\u003dmaster;protocol\u003dhttps\"\nmeta-yadro/recipes-yadro/cli/obmc-yadro-netconfig_git.bb:SRC_URI \u003d \"git://github.com/YADRO-KNS/obmc-yadro-netconfig.git;branch\u003dmaster;protocol\u003dhttps\"",
      "parentUuid": "ee0402fb_753e1737",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 96,
        "endChar": 29
      },
      "revId": "a64e0770f25be4a527b0c30cce6dd72e6c1bc3f6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc24641d_de0c8513",
        "filename": "meta-layer-guidelines.md",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-02-11T22:12:37Z",
      "side": 1,
      "message": "The openpower repos are used to interact with the openpower hardware and other firmware entities in the system.  For example pdbg is shared across at least 3 different firmware entities in the system so they can understand each other.",
      "parentUuid": "dc023317_34f74235",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 96,
        "endChar": 29
      },
      "revId": "a64e0770f25be4a527b0c30cce6dd72e6c1bc3f6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e1cc265_27901110",
        "filename": "meta-layer-guidelines.md",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-11T22:29:36Z",
      "side": 1,
      "message": "\u003e The openpower repos are used to interact with the openpower hardware and other firmware entities in the system.  For example pdbg is shared across at least 3 different firmware entities in the system so they can understand each other.\n\nHow do we differentiate those cases?  Is the language being proposed here sufficient?\n\nI\u0027m wanting to make sure we have a crisp definition here because we recently rejected some commits from HPE because they had their own repositories.  Knowing what they were trying to do and having enough background on the open-power repositories, I don\u0027t see a big difference between pdbg+ecmd+libekb+ipl and at least one of the repositories that HPE tried to add a recipe for.\n\nThese two also stood out to me:\n\n  meta-openpower/recipes-bsp/fsidbg/fsidbg_git.bb:SRC_URI +\u003d \"git://github.com/eddiejames/fsidbg.git;branch\u003dmaster;protocol\u003dhttps\"\n  meta-openpower/recipes-phosphor/host/aspeed-lpc-ctrl_git.bb:SRC_URI +\u003d \"git://github.com/shenki/aspeed-lpc-control;branch\u003dmaster;protocol\u003dhttps\"",
      "parentUuid": "bc24641d_de0c8513",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 96,
        "endChar": 29
      },
      "revId": "a64e0770f25be4a527b0c30cce6dd72e6c1bc3f6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85cdc384_251b08a0",
        "filename": "meta-layer-guidelines.md",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-02-11T22:37:08Z",
      "side": 1,
      "message": "\u003e How do we differentiate those cases?  Is the language being proposed here sufficient?\nYea I guess since they aren\u0027t openbmc specific they don\u0027t violate this rule.\nI\u0027d have to check on those last two though.",
      "parentUuid": "0e1cc265_27901110",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 96,
        "endChar": 29
      },
      "revId": "a64e0770f25be4a527b0c30cce6dd72e6c1bc3f6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afd6f921_cb7b225f",
        "filename": "meta-layer-guidelines.md",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-11T22:49:11Z",
      "side": 1,
      "message": "\u003e \u003e The openpower repos are used to interact with the openpower hardware and other firmware entities in the system.  For example pdbg is shared across at least 3 different firmware entities in the system so they can understand each other.\n\u003e \n\u003e How do we differentiate those cases?  Is the language being proposed here sufficient?\n\nI think it is;  If the library is used in 3 different firmwares (presumably 2 are non-openbmc), then it probably doesn\u0027t rely on openbmc dbus interfaces, so it doesn\u0027t hit rule 1.  It\u0027s used outside of openbmc, so doesn\u0027t hit on rule 2.  Rule 3 might be questionable, but again, if it\u0027s used outside of openbmc, clearly it can perform its primary function without openbmc specifics.\n\n\u003e \n\u003e I\u0027m wanting to make sure we have a crisp definition here because we recently rejected some commits from HPE because they had their own repositories.  Knowing what they were trying to do and having enough background on the open-power repositories, I don\u0027t see a big difference between pdbg+ecmd+libekb+ipl and at least one of the repositories that HPE tried to add a recipe for.\n\nI\u0027ll take an AR to go look at that patchset again.  I thought all of HP recipes were either forks of openbmc repos, or in-house openbmc-specific tools, but it\u0027s quite possible I made a mistake there, and some of them would\u0027ve been fine.\n\n\u003e \n\u003e These two also stood out to me:\n\u003e \n\u003e   meta-openpower/recipes-bsp/fsidbg/fsidbg_git.bb:SRC_URI +\u003d \"git://github.com/eddiejames/fsidbg.git;branch\u003dmaster;protocol\u003dhttps\"\n\u003e   meta-openpower/recipes-phosphor/host/aspeed-lpc-ctrl_git.bb:SRC_URI +\u003d \"git://github.com/shenki/aspeed-lpc-control;branch\u003dmaster;protocol\u003dhttps\"\n\nfair point.",
      "parentUuid": "85cdc384_251b08a0",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 96,
        "endChar": 29
      },
      "revId": "a64e0770f25be4a527b0c30cce6dd72e6c1bc3f6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcef750a_24266414",
        "filename": "meta-layer-guidelines.md",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-02-11T23:13:00Z",
      "side": 1,
      "message": "\u003e If the library is used in 3 different firmwares (presumably 2 are non-openbmc), then it probably doesn\u0027t rely on openbmc dbus interfaces, so it doesn\u0027t hit rule 1.\n\nI suspect there are cases where the code is written with something like \u0027meson -Dopenbmc\u003dyes\u0027 and then it enables code that uses some OpenBMC APIs instead of \"other firmware APIs\".  This would cause it, to me, to violate rule 1.\n\nIt is pretty rare that any code would be completely free-standing unless it were only triggered via systemd-service files that it itself installed.  Even then you have a dependency with the phosphor-state-manager service/target order.\n\nI suppose \"this code provides a library API that some openbmc process uses\" would be a design where the code wouldn\u0027t violate rule 1.  In which case, I guess if we really run into trouble with the code failing to compile with the latest GCC, etc. we can patch it just like we would with any Yocto recipes.\n\n\u003e I\u0027ll take an AR to go look at that patchset again.  I thought all of HP recipes were either forks of openbmc repos, or in-house openbmc-specific tools, but it\u0027s quite possible I made a mistake there, and some of them would\u0027ve been fine.\n\nMany of them were forks, yes, which would be a no-go and I\u0027m fine with that.  There was CHIF which seemed like an HPE-specific PLDM-like thing and that\u0027s what I was thinking of in this case.",
      "parentUuid": "afd6f921_cb7b225f",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 96,
        "endChar": 29
      },
      "revId": "a64e0770f25be4a527b0c30cce6dd72e6c1bc3f6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3277f819_955b4021",
        "filename": "meta-layer-guidelines.md",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2022-02-12T09:55:15Z",
      "side": 1,
      "message": "Ed, codewise Yadro\u0027s repos are not copies of anything. They are rather replacement for openbmc components that we aren\u0027t satisfied with, but that we don\u0027t have resources to run through the community review process, or that we are quite sure the community would not accept.\n\nWe in general are, and I personally am strictly against limiting vendors from using links to their own repos as long as they are public. I believe that every vendor is actually willing to upstream as much as they can as soon as they are able to. If they are not doing so, they have their reasons, sometimes of commercial/business nature, that OpenBMC community has neither authority, nor power, nor moral right to influence. Forcing the vendors to use only the community hosted repos is just a way to spawn more forks like Intel-OpenBMC that may never then be merged back. The other probablity is that you will force vendors to make their private forks that the public will never even know of. I don\u0027t think openbmc is going to benefit from any of that.",
      "parentUuid": "dcef750a_24266414",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 96,
        "endChar": 29
      },
      "revId": "a64e0770f25be4a527b0c30cce6dd72e6c1bc3f6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2158dbb8_ae7b11b9",
        "filename": "meta-layer-guidelines.md",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-13T04:06:11Z",
      "side": 1,
      "message": "\u003e Ed, codewise Yadro\u0027s repos are not copies of anything.\n\nFair point, \"reimplementation\" would\u0027ve been a better word to use.\n\n\u003e They are rather replacement for openbmc components that we aren\u0027t satisfied with, but that we don\u0027t have resources to run through the community review process, or that we are quite sure the community would not accept.\n\nIMO, going through the community review process is part of what it means to upstream code;  It means it follows a quality, and is generally useful to others.\n\n\u003e \n\u003e We in general are, and I personally am strictly against limiting vendors from using links to their own repos as long as they are public. I believe that every vendor is actually willing to upstream as much as they can as soon as they are able to. If they are not doing so, they have their reasons, sometimes of commercial/business nature, that OpenBMC community has neither authority, nor power, nor moral right to influence.\n\u003e Forcing the vendors to use only the community hosted repos is just a way to spawn more forks like Intel-OpenBMC that may never then be merged back.\n\nI pretty adamantly disagree here\n\n2 very important points here that I think you could phrase more directly;  First, nobody is forcing vendors to use only the community hosted repos.  Vendors are free to use whatever repos they see fit, and redistribute them however they like under the license for the repos.  The only thing being discussed here is in concerns to what the upstream repos point to, and while I would like to make everyone happy as much as possible, those that are unhappy are free to fork, and make (more importantly support and rebase) whatever changes they like.  IMO, the fact that Intel-BMC and other forks exist means that we\u0027re developing a healthy community, with lots of possibility for community input and collaboration as we compare the various solutions.  For example, when we were selecting a Redfish implementation, there were 5 competing codebases from various vendors, and we had some excellent discussions about pros and cons of each.  Many things that at one point were in Intel-BMC have been pulled in as major openbmc features within openbmc after community input.  The most recent is the linux kernel accepting the peci subsystem.  That\u0027s great, and I think the way these things should go.\n\n\u003e The other probablity is that you will force vendors to make their private forks that the public will never even know of.\n\nThis already happens today, so I don\u0027t think this policy is going to be the seed of that.  I\u0027m aware of at least two dozen private forks of the openbmc codebase.  Given that most things are apache licensed, that is their right.\n\n\u003e I don\u0027t think openbmc is going to benefit from any of that.\n\nThis statement is where I struggle.  In terms of things openbmc won\u0027t benefit from, I think every platform inventing their own copies of subsystems, and not having any sort of model to make changes is a much larger detriment to the project than the potential of forks.  Companies have already forked.\n\n\nWith that said, lets dig a little deeper into what your idea is, maybe there\u0027s some common ground.  If repos are allowed to be pointed to unmaintained company repos how would OpenBMC:\n1. Ensure that quality standards are met (code reviews, static analysis, ect)?\n2. Ensure that there is a method to submit patches to the repos?  (with this rule, it would just use gerrit).\n3. Ensure that the code of conduct is enforced on activities happening in that repo?\n4. Provide an escalation path (like the TSC or TOF) for resolving interpersonal, and company politics in regards to the code?\n5. Ensure that the codebase remains buildable in the event a particular company had a \"change of heart\" and made their repos private?\n\n\n\nOne more thing I would like to understand is, if a company is going to create their own new features, not make an attempt to upstream them, and apply them to only a single vendors system, why is it so important they\u0027re upstream?  If those projects aren\u0027t engaging with the community it means they\u0027re self-supported and self-developed, so it\u0027s not clear why OpenBMC hosting a recipe file is that important.  Can you elaborate?",
      "parentUuid": "3277f819_955b4021",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 96,
        "endChar": 29
      },
      "revId": "a64e0770f25be4a527b0c30cce6dd72e6c1bc3f6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c3f0866_cef8788e",
        "filename": "meta-layer-guidelines.md",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-22T16:49:17Z",
      "side": 1,
      "message": "Any more input here?",
      "parentUuid": "2158dbb8_ae7b11b9",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 96,
        "endChar": 29
      },
      "revId": "a64e0770f25be4a527b0c30cce6dd72e6c1bc3f6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "814f611f_5eb7f76f",
        "filename": "meta-layer-guidelines.md",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-04-19T15:49:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c3f0866_cef8788e",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 96,
        "endChar": 29
      },
      "revId": "a64e0770f25be4a527b0c30cce6dd72e6c1bc3f6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}