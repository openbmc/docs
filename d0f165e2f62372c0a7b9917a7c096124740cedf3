{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ee4a8334_3d998318",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-10-31T17:00:21Z",
      "side": 1,
      "message": "Let me know if you want me to add extra reviewers. ",
      "revId": "d0f165e2f62372c0a7b9917a7c096124740cedf3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ebce5c1_22406136",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000523
      },
      "writtenOn": "2022-10-31T21:29:39Z",
      "side": 1,
      "message": "Overall I think this looks pretty good.\n\nThe main thing I\u0027m wondering is if there is any more plowing we want to do to try enabling a remote authorization server.",
      "revId": "d0f165e2f62372c0a7b9917a7c096124740cedf3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d6ed7d5_8915968d",
        "filename": "designs/redfish-oauth.md",
        "patchSetId": 1
      },
      "lineNbr": 249,
      "author": {
        "id": 1000523
      },
      "writtenOn": "2022-10-31T21:29:39Z",
      "side": 1,
      "message": "Section \"13.4.4.4 Redfish OAuth2.0 scope usage\" of the spec allows this to be a comma separated list of roles or privileges. \n\nIMO, having a list of roles is an undefined operations. As an example, I don\u0027t really know what a scope like \"Redfish.Role.ReadOnly, Redfish.Role.Operator\" would entail. My guess is that it would allow the union of both ACLS, but maybe that\u0027s a question for DMTF.\n\nDoes this design change much if we only allow roles in the scope, or is that not too serious of an issue?",
      "range": {
        "startLine": 249,
        "startChar": 18,
        "endLine": 249,
        "endChar": 25
      },
      "revId": "d0f165e2f62372c0a7b9917a7c096124740cedf3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4529e0d_3fee5452",
        "filename": "designs/redfish-oauth.md",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1000523
      },
      "writtenOn": "2022-10-31T21:29:39Z",
      "side": 1,
      "message": "I think this makes a lot of sense for mTLS users, as it allows the resource server to ensure that client is definitively the subject of the OAuth token.\n\nHowever, I don\u0027t think there will be a username/password pair registered with the server",
      "revId": "d0f165e2f62372c0a7b9917a7c096124740cedf3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8716c22a_13ad4239",
        "filename": "designs/redfish-oauth.md",
        "patchSetId": 1
      },
      "lineNbr": 287,
      "author": {
        "id": 1000523
      },
      "writtenOn": "2022-10-31T21:29:39Z",
      "side": 1,
      "message": "This feels like a gap, but I haven\u0027t really had a chance to wrap my head around this.\n\nThere really doesn\u0027t seem to be any standard way in either DMTF or OAuth to describe the key management for the token signature.\n\nThat makes me think that there are one of two ways that the PKI can be managed:\n\n1) Distributed signing keys along with X.509 root certificates.\n2) Have the authorization server pre-register the signing key by hitting an endpoint in the resource server.\n\nWould it be future proof to just say that the signing key is in phosphor-cert-manager, and leave it to the next person to figure out how they want to wire it up?",
      "revId": "d0f165e2f62372c0a7b9917a7c096124740cedf3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}