{
  "comments": [
    {
      "key": {
        "uuid": "aed33ec2_e4717b4c",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-23T18:00:17Z",
      "side": 1,
      "message": "Why did you choose to make the secondary flash the golden image?\n\nFor verified-boot reasons we make the primary flash the golden, so that we are always running the U-boot SPL from the fixed/golden image.  The SPL switches to the secondary flash chip as necessary/available.\n\nI think you need to propose how verified-boot can be supported if the secondary flash is the golden.",
      "range": {
        "startLine": 13,
        "startChar": 57,
        "endLine": 14,
        "endChar": 37
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3d7016b_54f3e466",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-24T07:34:38Z",
      "side": 1,
      "message": "This document does not resolve the problems related to secure/verified boot.\nOn ast2500, there is no \"real\" secure boot (e.g. in your case, a root user is able to modify the u-boot SPL on the primary flash, and compromise the verified boot).\nSo we accept the fact that there is no secure boot in this design.",
      "parentUuid": "aed33ec2_e4717b4c",
      "range": {
        "startLine": 13,
        "startChar": 57,
        "endLine": 14,
        "endChar": 37
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "205cfa21_8e7d4319",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-24T15:31:57Z",
      "side": 1,
      "message": "\u003e e.g. in your case, a root user is able to modify the u-boot SPL on the primary flash, and compromise the verified boot\n\nI mentioned this in response to another comment but this is not true.\n\nWe have implemented and publicly available code for a static-layout + golden-image + secure/verified boot.  I don\u0027t really think we should pursue a *different* design if it has obvious shortcomings.  There are learnings we\u0027ve already accomplished so why not leverage that?",
      "parentUuid": "a3d7016b_54f3e466",
      "range": {
        "startLine": 13,
        "startChar": 57,
        "endLine": 14,
        "endChar": 37
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a62c67b6_868f0f08",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-25T05:58:56Z",
      "side": 1,
      "message": "Thanks for the information, we did not know there is such a design because it\u0027s not mentioned in the upstream doc/code...\n\nDoes the implementation depend on specific hardware (e.g. some resistor to lock NOR)?\nIf there is no dependency, would you kindly upstream the implementation so that we could share the same design in the upstreamed code?",
      "parentUuid": "205cfa21_8e7d4319",
      "range": {
        "startLine": 13,
        "startChar": 57,
        "endLine": 14,
        "endChar": 37
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c19103f8_8b2c595b",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-23T18:00:17Z",
      "side": 1,
      "message": "We have this assumption for any image, don\u0027t we?\n\nWhat I can\u0027t tell (and I\u0027ve not read fully through) is if this implies the golden image will always use the default.  What we do in our golden image is still mount the RW-FS from the non-golden image to get these settings.",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 41,
        "endChar": 75
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e6f95fa_8cae2d49",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-24T07:34:38Z",
      "side": 1,
      "message": "In this design, we do want to use the default username/password, it\u0027s meant to be used only for disaster recovery.",
      "parentUuid": "c19103f8_8b2c595b",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 41,
        "endChar": 75
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5412ccb6_879cf9de",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-24T15:31:57Z",
      "side": 1,
      "message": "I would suggest we keep that as an option then.  You can check the integrity of any file system as you mount it, so I don\u0027t know why we wouldn\u0027t attempt to mount the rwfs.\n\nYou said it is meant for disaster recovery but we also have part of the design indicating that the WDT will be used to switch over to it, so certain crashes can also cause a failover.",
      "parentUuid": "0e6f95fa_8cae2d49",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 41,
        "endChar": 75
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1926eb6_57a69ed4",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-25T05:58:56Z",
      "side": 1,
      "message": "OK, will update this part to make it optional.",
      "parentUuid": "5412ccb6_879cf9de",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 41,
        "endChar": 75
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3df3c917_1e48ced5",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-25T06:10:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1926eb6_57a69ed4",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 41,
        "endChar": 75
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b55cfff3_2ed296bf",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-23T18:00:17Z",
      "side": 1,
      "message": "Why is this the case?  This seems not be required.",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 44,
        "endChar": 46
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af82209e_80becde0",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-24T07:34:38Z",
      "side": 1,
      "message": "With UBI, there is only u-boot on primary flash and alt-u-boot in the secondary flash. The UBI\u0027s ro/rw fs could reside in either primary or secondary flash.\nSo it does not really have the golden concept.",
      "parentUuid": "b55cfff3_2ed296bf",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 44,
        "endChar": 46
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0eece7dc_decc42af",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-24T15:31:57Z",
      "side": 1,
      "message": "But that is just an implementation of how we\u0027re using UBI now.  There isn\u0027t any reason why you couldn\u0027t use UBI and define a golden image (or make one of the devices hardware read-only), right?\n\nMaybe this is a subtlety of the way this sentence is structured.  There is UBI as an underlying technology and there is the current openbmc flash layout that utilizes UBI.  I think you\u0027re referring to the later but my question is why the technology can\u0027t still be used to accomplish what you desire.",
      "parentUuid": "af82209e_80becde0",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 44,
        "endChar": 46
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23a8a4e7_dd7a3d65",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-25T05:58:56Z",
      "side": 1,
      "message": "Yes, the wording does mention it as \"UBI flash layout\" which is how the current OpenBMC\u0027s implementation using UBI and dynamic flash layout.\n\nI want to add the note that this design does not work with the above UBI (and dynamic) flash layout.",
      "parentUuid": "0eece7dc_decc42af",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 44,
        "endChar": 46
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bffaf2c4_dca09871",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-23T18:00:17Z",
      "side": 1,
      "message": "Is this Linux dts or U-boot dts?  I think you need to clarify where the responsibility lies.",
      "range": {
        "startLine": 46,
        "startChar": 5,
        "endLine": 46,
        "endChar": 8
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cbd4219_bed15469",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-24T07:34:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bffaf2c4_dca09871",
      "range": {
        "startLine": 46,
        "startChar": 5,
        "endLine": 46,
        "endChar": 8
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec283d6b_f4004033",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-23T18:00:17Z",
      "side": 1,
      "message": "The unfortunate side-effect of this proposal seems to be that the version of the non-golden image cannot be displayed by the golden side because the dts doesn\u0027t seem to have the layout of the other chip.  That means we get none of the xyz/openbmc_project/Software objects created for the opposite side.\n\nIs this something that can be resolved?",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 51,
        "endChar": 22
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43543c67_29f0a1e8",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-24T07:34:38Z",
      "side": 1,
      "message": "It is intended.\nIn this design, the BMC only sees a single version on the running flash.\n* When it\u0027s the primary flash, the BMC does not manage the golden flash at all (except it could optionally sync networking settings);\n* When it\u0027s the golden flash, the BMC only shows the running version, and the code update will program the primary flash.\n\nIn any case, the bmc software object is created only for the running version.",
      "parentUuid": "ec283d6b_f4004033",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 51,
        "endChar": 22
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33f84a7d_0a7de0b9",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-24T15:31:57Z",
      "side": 1,
      "message": "\u003e It is intended. In this design, the BMC only sees a single version on the running flash.\n\nWhy is that a good thing?  We have a utility in fb-openbmc\u0027s golden image implementation to be able to read the version of the golden and we use it quite frequently.  It is good to know what vintage of firmware you have on your systems for the cases where they do fail back to the golden side, so that you know what versions you need to support and test.",
      "parentUuid": "43543c67_29f0a1e8",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 51,
        "endChar": 22
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fbeda41_5ac9b356",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-25T05:58:56Z",
      "side": 1,
      "message": "\u003e Why is that a good thing?\n\nIt is easier to implement, really just that :)\nAnd I think Yadro uses a similar design as described in this doc.\n\nIf you could upstream fb-openbmc\u0027s golden image implemention, I would love to try it and possibly use it that way.",
      "parentUuid": "33f84a7d_0a7de0b9",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 51,
        "endChar": 22
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03b0ebe9_06ed16bc",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-23T18:00:17Z",
      "side": 1,
      "message": "I think that there were some properties added for PFR support by Intel recently (or maybe me) that should cover what you need here without defining a new property.  Let me know if it doesn\u0027t and we can discuss.",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 54,
        "endChar": 16
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7343db5c_0492e25a",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-24T07:34:38Z",
      "side": 1,
      "message": "The PFR is a different story, it adds the StandbySpare part.\n\nA candidate dbus change is https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/36587, and we are discussing there.",
      "parentUuid": "03b0ebe9_06ed16bc",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 54,
        "endChar": 16
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eee73a15_195a2981",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-24T15:31:57Z",
      "side": 1,
      "message": "My relation to PFR was that they had an \u0027Active\u0027, \u0027Backup\u0027 and \u0027Staged\u0027 image locations.  The golden image is, effectively, a form of \u0027Backup\u0027, right?\n\nAlternatively, I think that the RedundancyPriority could equally be used to represent an image which is in the golden flash bank, couldn\u0027t it?",
      "parentUuid": "7343db5c_0492e25a",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 54,
        "endChar": 16
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13291eb5_057f7473",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-25T05:58:56Z",
      "side": 1,
      "message": "\u003e My relation to PFR was that they had an \u0027Active\u0027, \u0027Backup\u0027 and \u0027Staged\u0027 image locations.  The golden image is, effectively, a form of \u0027Backup\u0027, right?\n\nYes, the PFR requires 3 parts, and the \"Backup\" is something like golden image. But I do not really want to mention that, because it requires special CPLD/FPGA to program the \u0027Active\u0027, it\u0027s too specific.\n\n\u003e I think that the RedundancyPriority could equally be used to represent an image which is in the golden flash bank, couldn\u0027t it?\n\nYes, it\u0027s a good idea. I will update the doc to suggest to use a read-only RedundancyPriority to represent the status.",
      "parentUuid": "eee73a15_195a2981",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 54,
        "endChar": 16
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41c9605d_188869ce",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-25T06:10:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "13291eb5_057f7473",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 54,
        "endChar": 16
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16443538_c51047b2",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-23T18:00:17Z",
      "side": 1,
      "message": "You could take care of this by copying the rwfs into a ramfs before mounting it.",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 68,
        "endChar": 34
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5060b165_dd53e3ed",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-24T07:34:38Z",
      "side": 1,
      "message": "It\u0027s a good point.\nBut when the BMC is running on the golden image, it could mean the primary flash is broken, and the rwfs could be broken too.\nThe idea is really to not touch the primary flash, and just do a full erase and program.\nUpdated this part to describe why the golden image should not mount the primary\u0027s rwfs.",
      "parentUuid": "16443538_c51047b2",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 68,
        "endChar": 34
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89ceeb92_e0e443c7",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-23T18:00:17Z",
      "side": 1,
      "message": "You keep mentioning networking settings, but why are networking settings the only ones which are special enough to do this with?\n\nGenerally we would not want the machine to automatically go to the default username and password unless there is serious file system corruption.  Otherwise, rooting a machine is as simple as triggering the WDT.",
      "range": {
        "startLine": 75,
        "startChar": 15,
        "endLine": 75,
        "endChar": 34
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acea74a8_fe9d6b96",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-24T07:34:38Z",
      "side": 1,
      "message": "\u003e You keep mentioning networking settings, but why are networking settings the only ones which are special enough to do this with?\n\nThis is a requirement of our BMC that fits our usage.\n\n\u003e Generally we would not want the machine to automatically go to the default username and password unless there is serious file system corruption.  Otherwise, rooting a machine is as simple as triggering the WDT.\n\nAs previously noted, the golden image is meant to be used for disaster recovery, so (in production) it does mean there is a serious corruption of the primary flash.",
      "parentUuid": "89ceeb92_e0e443c7",
      "range": {
        "startLine": 75,
        "startChar": 15,
        "endLine": 75,
        "endChar": 34
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28eec3fb_fbf1cb8b",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-24T15:31:57Z",
      "side": 1,
      "message": "The data we have suggests that it isn\u0027t always due to a flash corruption that we\u0027re ending up running on the golden image.\n\nBut, wouldn\u0027t the \u0027mount\u0027 operation and/or fsck tell you if the flash+filesystem are good?\n\n\u003e This is a requirement of our BMC that fits our usage.\n\nWe need to be careful about this kind of direction.  If this is a Bytedance-only design, we should be clear about that.  Ideally if you have specific requirements that are not generally applicable we should be able to PACKAGECONFIG that in/out.",
      "parentUuid": "acea74a8_fe9d6b96",
      "range": {
        "startLine": 75,
        "startChar": 15,
        "endLine": 75,
        "endChar": 34
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37716b1b_03c5bb29",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-25T05:58:56Z",
      "side": 1,
      "message": "Yes, that\u0027s why it\u0027s mentioned as \"Optional\", and it could be enabled by PACKAGECONFIG.\nBy default it does not sync anything like how Yadro uses the golden image.\nWe want to sync the networking settings because it\u0027s required for our BMC to have the static IP when it\u0027s running on golden image.",
      "parentUuid": "28eec3fb_fbf1cb8b",
      "range": {
        "startLine": 75,
        "startChar": 15,
        "endLine": 75,
        "endChar": 34
      },
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "077ec62c_94c5b36c",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-23T18:00:17Z",
      "side": 1,
      "message": "I suspect you\u0027re going to need u-boot changes as well.",
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2571506_55c486be",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-24T07:34:38Z",
      "side": 1,
      "message": "I think no need for u-boot changes, but not 100% sure...\n@Joel @Ivan Mikhaylov could you kindly help to check if this would involve u-boot changes?",
      "parentUuid": "077ec62c_94c5b36c",
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "325aafe3_ce2e493d",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-24T15:31:57Z",
      "side": 1,
      "message": "The u-boot changes I am suggesting would be necessary to accomplish verified boot correctly.  We have the code available for that but I don\u0027t think it is upstreamed.\n\nWould you like me to set up some time with our verified boot developer to discuss what we have implemented already?",
      "parentUuid": "c2571506_55c486be",
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae71fc99_d3b6ecce",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-25T05:58:56Z",
      "side": 1,
      "message": "\u003e Would you like me to set up some time with our verified boot developer to discuss what we have implemented already?\n\nPlease do!\nAnd if possible, please upstream the implementation if it does not require specific hardware.\nThanks!",
      "parentUuid": "325aafe3_ce2e493d",
      "revId": "2b60ff65a0f1b96c24bc7cd5baa040af774ca5ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}