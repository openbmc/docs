{
  "comments": [
    {
      "key": {
        "uuid": "5637a71a_dbdb637c",
        "filename": "designs/firmware-update-over-redfish.md",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2019-12-04T20:08:54Z",
      "side": 1,
      "message": "nit: Ideally since these are two different features it would be nice to track as two separate git commits. No big deal but please be sure to structure the code to implement as separate commits.",
      "revId": "fa272285582970611652ab9d77006c6b8008d9b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e79f21fd_4e349a0e",
        "filename": "designs/firmware-update-over-redfish.md",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2019-12-05T09:16:46Z",
      "side": 1,
      "message": "can be updated in 2 different commits\nNote, HttpPushUriTargetsBusy is the one, which offers protection mechanism against 2 clients updating the httppushUriTarget etc.",
      "parentUuid": "5637a71a_dbdb637c",
      "revId": "fa272285582970611652ab9d77006c6b8008d9b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a09a70f_22b1ab13",
        "filename": "designs/firmware-update-over-redfish.md",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1000312
      },
      "writtenOn": "2019-12-05T13:41:11Z",
      "side": 1,
      "message": "Adding \u0027HttpPushUriTarget\u0027 alone can\u0027t complete this feature, we need \u0027HttpPushUriTargetBusy\u0027 as well, so single commit for both of this should be fine.",
      "parentUuid": "e79f21fd_4e349a0e",
      "revId": "fa272285582970611652ab9d77006c6b8008d9b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acca6982_6a637c92",
        "filename": "designs/firmware-update-over-redfish.md",
        "patchSetId": 3
      },
      "lineNbr": 377,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2019-12-12T20:09:57Z",
      "side": 1,
      "message": "This and bmc_recovery confuse me a bit. Is this an implementation thing? On our systems, these are just 8 byte hash value that correlate to the level of firmware. Does your implementation name them bmc_active and bmc_recovery? Are there any requirements that other do this or can these be anything?\n\n$ curl -k -H \"X-Auth-Token: $TOKEN\" -X GET https://${BMC_IP}/redfish/v1/UpdateService/FirmwareInventory\n{\n  \"@odata.context\": \"/redfish/v1/$metadata#SoftwareInventoryCollection.SoftwareInventoryCollection\",\n  \"@odata.id\": \"/redfish/v1/UpdateService/FirmwareInventory\",\n  \"@odata.type\": \"#SoftwareInventoryCollection.SoftwareInventoryCollection\",\n  \"Members\": [\n    {\n      \"@odata.id\": \"/redfish/v1/UpdateService/FirmwareInventory/0d2c90c3\"\n    },\n    {\n      \"@odata.id\": \"/redfish/v1/UpdateService/FirmwareInventory/224cd310\"\n    },\n    {\n      \"@odata.id\": \"/redfish/v1/UpdateService/FirmwareInventory/74544408\"\n    }\n  ],\n  \"Members@odata.count\": 3,\n  \"Name\": \"Software Inventory Collection\"\n}",
      "range": {
        "startLine": 377,
        "startChar": 64,
        "endLine": 377,
        "endChar": 74
      },
      "revId": "fa272285582970611652ab9d77006c6b8008d9b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cd0ea26_eca4d562",
        "filename": "designs/firmware-update-over-redfish.md",
        "patchSetId": 3
      },
      "lineNbr": 377,
      "author": {
        "id": 1000312
      },
      "writtenOn": "2019-12-13T01:29:53Z",
      "side": 1,
      "message": "Its our implementation of representing the active and recovery firmware. I don\u0027t think it needs to be standardized, its just that we represent and map it to a explanatory string. I believe in your design its identified by priority.",
      "parentUuid": "acca6982_6a637c92",
      "range": {
        "startLine": 377,
        "startChar": 64,
        "endLine": 377,
        "endChar": 74
      },
      "revId": "fa272285582970611652ab9d77006c6b8008d9b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e038cd6_abc7d3d0",
        "filename": "designs/firmware-update-over-redfish.md",
        "patchSetId": 3
      },
      "lineNbr": 416,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2019-12-04T20:08:54Z",
      "side": 1,
      "message": "Just to be clear. If someone does not set HttpPushUriTargets then all applicable targets will be updated right?",
      "range": {
        "startLine": 413,
        "startChar": 0,
        "endLine": 416,
        "endChar": 17
      },
      "revId": "fa272285582970611652ab9d77006c6b8008d9b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6f2393d_ad9d1b7c",
        "filename": "designs/firmware-update-over-redfish.md",
        "patchSetId": 3
      },
      "lineNbr": 416,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2019-12-05T09:16:46Z",
      "side": 1,
      "message": "Yes, to the applicable targets.\nBut we can have more than one applicable target, in which the default will take place. \ni.e. Say, if BMC image is updated, BMC target will be updated, and not BIOS.",
      "parentUuid": "6e038cd6_abc7d3d0",
      "range": {
        "startLine": 413,
        "startChar": 0,
        "endLine": 416,
        "endChar": 17
      },
      "revId": "fa272285582970611652ab9d77006c6b8008d9b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ef07c33_7c8d4177",
        "filename": "designs/firmware-update-over-redfish.md",
        "patchSetId": 3
      },
      "lineNbr": 416,
      "author": {
        "id": 1000312
      },
      "writtenOn": "2019-12-05T13:41:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d6f2393d_ad9d1b7c",
      "range": {
        "startLine": 413,
        "startChar": 0,
        "endLine": 416,
        "endChar": 17
      },
      "revId": "fa272285582970611652ab9d77006c6b8008d9b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99707b5f_d0b44908",
        "filename": "designs/firmware-update-over-redfish.md",
        "patchSetId": 3
      },
      "lineNbr": 429,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-12-04T22:18:55Z",
      "side": 1,
      "message": "Can you give an example? I\u0027m not clear in which scenarios the version would be marked as StandbySpare.",
      "revId": "fa272285582970611652ab9d77006c6b8008d9b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca08a1b7_cb20c1dd",
        "filename": "designs/firmware-update-over-redfish.md",
        "patchSetId": 3
      },
      "lineNbr": 429,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2019-12-05T09:16:46Z",
      "side": 1,
      "message": "Assume dual BIOS / BMC image is supported, then one is active and another is recovery or secondary. Secondary or recovery image will be marked as StandbySpare, with it\u0027s corresponding version.",
      "parentUuid": "99707b5f_d0b44908",
      "revId": "fa272285582970611652ab9d77006c6b8008d9b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ef62e78_b87c8aa0",
        "filename": "designs/firmware-update-over-redfish.md",
        "patchSetId": 3
      },
      "lineNbr": 429,
      "author": {
        "id": 1000312
      },
      "writtenOn": "2019-12-05T13:41:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ca08a1b7_cb20c1dd",
      "revId": "fa272285582970611652ab9d77006c6b8008d9b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "227ee3d7_17d7105b",
        "filename": "designs/firmware-update-over-redfish.md",
        "patchSetId": 3
      },
      "lineNbr": 429,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2019-12-12T20:09:57Z",
      "side": 1,
      "message": "Our implementation has a single BMC with 2 flash chips. Each flash chip can have a separate BMC image. Would you consider the flash chip the BMC is not booted from, the StandbySpare? Or is a StandbySpare really a separate BMC?",
      "parentUuid": "9ef62e78_b87c8aa0",
      "revId": "fa272285582970611652ab9d77006c6b8008d9b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b3f99de_7b094da7",
        "filename": "designs/firmware-update-over-redfish.md",
        "patchSetId": 3
      },
      "lineNbr": 429,
      "author": {
        "id": 1000312
      },
      "writtenOn": "2019-12-13T01:29:53Z",
      "side": 1,
      "message": "No, its not a separate BMC. Its that back-up firmware for single BMC as StandbySpare.",
      "parentUuid": "227ee3d7_17d7105b",
      "revId": "fa272285582970611652ab9d77006c6b8008d9b5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}