{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ffc2937b_094d43f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-13T18:29:33Z",
      "side": 1,
      "message": "necrobumping for bmcweb drives \u003c-\u003e chassis work.\n\nPlease see:\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/53676\n",
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "497e8180_39459864",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000682
      },
      "writtenOn": "2022-06-29T16:14:08Z",
      "side": 1,
      "message": "I\u0027ve seen some of the comments are addressed already. Consider closing them?",
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23848c74_66ce9df6",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-04-07T19:07:36Z",
      "side": 1,
      "message": "I think we should also define how all these other associations are defined.  At a minimum I\u0027d like to see a README created in phosphor-dbus-interfaces under Inventory (because that is how we document associations in other areas already).",
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cc355f8_3bf568ff",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-06-09T18:35:14Z",
      "side": 1,
      "message": "Isn\u0027t Associations interface just a list?\n\nHow will we be able to tell between the different types of relations?",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 106,
        "endChar": 45
      },
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58c1bbd5_880ede4d",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-06-09T18:56:28Z",
      "side": 1,
      "message": "oh wait, I guess you were not referring to https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Association.interface.yaml.\n\nI guess you meant https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Association/Definitions.interface.yaml.\n\nLooks like this should work fine. It will create a new path that is related to the type of connection to help determine the associations.\n\nIs the diff between I and II, just that ContainBy and Contains are not using Associations?",
      "parentUuid": "8cc355f8_3bf568ff",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 106,
        "endChar": 45
      },
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4fada99_e2b91783",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-06-10T20:59:20Z",
      "side": 1,
      "message": "Thinking about it more. Is it better to use all Associations instead... since that scales better from my understand. If we have 5 board that is contained by each other like \n0 -\u003e 1 -\u003e ... -\u003e4 \n\nThere will be like 5 level of paths and each of them might have a bunch of sensors.. sounds like a mess to me.\n\nWill full associations, I feel like the existing structure will not be mess around as much. But who know what other issue might come up with that.",
      "parentUuid": "58c1bbd5_880ede4d",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 106,
        "endChar": 45
      },
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c753f13_067b92f7",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-07-07T13:37:58Z",
      "side": 1,
      "message": "\u003e There will be like 5 level of paths and each of them might have a bunch of sensors.. sounds like a mess to me.\n\nWhy is it a mess?  It seems more intuitive to me.\n\nThe big advantage to hierarchy, to me, is it is more obvious from a human perspective.  A flat bunch of parts requires me to do a bunch of extra queries to figure out what is what.  A hierarchy (show by `busctl tree`) makes it quite obvious what is connected where.\n\nThe other big advantage of a hierarchy is naming when there are duplicate parts.  A small example: \"/.../proc3/core16\" is better than \"/.../proc3-core16\" and \"/.../core88\" [where 88 \u003d 24 * 3 + 16].",
      "parentUuid": "b4fada99_e2b91783",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 106,
        "endChar": 45
      },
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0d97881_3e038d32",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-07-07T15:12:57Z",
      "side": 1,
      "message": "The use case that I think breaks the hierarchy path model is runtime replaceable chassis.  To support a hierarchy, you need one \"root\" object, that everything can be contained by.  Unfortunately, there are systems that runtime detect their chassis, or support user-uploaded chassis configs, which would mean that to model this properly, you\u0027d have to start with something like\n\n/xyz/openbmc_project/inventory/my_motherboard/my_card\n\nThen, when the chassis is changed, this changes to.\n\n/xyz/openbmc_project/inventory/my_chassis/my_motherboard/my_card\n\nWhich requires a removal and re-add of the object on dbus, which would erroneously trigger a \"removal\" and subsequent re-init of my_card and the motherboard, even though they were not removed, the root object was just replaced.  Associations solve this because they\u0027re orthogonal to the path and can be created/destroyed/modified at will without modifying the base object.\n\nI agree, from a human perspective it\u0027s more obvious to use path, but from a software perspective, it\u0027s much worse as I don\u0027t know of a way to solve the above.",
      "parentUuid": "3c753f13_067b92f7",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 106,
        "endChar": 45
      },
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4557e093_2573b222",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-07-08T11:19:57Z",
      "side": 1,
      "message": "\u003e The use case that I think breaks the hierarchy path model is runtime replaceable chassis.\n\nHow do you have a \"runtime replaceable chassis\" where the stuff inside it isn\u0027t replaced?  I must be missing something.\n\n\u003e Unfortunately, there are systems that runtime detect their chassis...\n\nI understand this case.  It is mostly an ordering problem of detection?\n\n\u003e or support user-uploaded chassis configs\n\nI don\u0027t understand what this means.  How would the user upload a chassis config?  Wouldn\u0027t they just change certain properties in it?\n\n\u003e To support a hierarchy, you need one \"root\" object ... Then, when the chassis is changed, this changes to:\n\nI don\u0027t think you need a root object, but you need an element of the path.  Meaning, you don\u0027t need Interfaces and Properties to actually be there.  For the short-lived time where the chassis eeprom hasn\u0027t been read yet, wouldn\u0027t the motherboard still know that it is in a chassis?  Can\u0027t a name be determined for this not-yet-discovered chassis object so that the paths align?\n\n---\n\nIn any case, on line 113 I suggested that we allow both but prefer this proposal.  I agree there is probably some thought still needed to solve corner cases, such as what you\u0027re thinking on here, but my preference is that in general we follow a hierarchy model and use associations when the hierarchy doesn\u0027t fit (or due to implementation is difficult).  We need associations for connections between separate-but-equal chassis anyhow, right?",
      "parentUuid": "b0d97881_3e038d32",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 106,
        "endChar": 45
      },
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56215cfb_b87263f2",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-05-13T18:29:33Z",
      "side": 1,
      "message": "\u003e /xyz/openbmc_project/inventory/my_motherboard/my_card\n\u003e \n\u003e Then, when the chassis is changed, this changes to.\n\u003e \n\u003e /xyz/openbmc_project/inventory/my_chassis/my_motherboard/my_card\n\nI don\u0027t fully understand the case where a chassis is removed, and the motherboards and cards stay connected. If that is the case, I would think the system to be improperly modeled, (if the container can be removed, and the contained items remain.)\n\nCould you give me a concrete example\n\n\nRedfish does not lend itself to the hierarchical data model. Looking forward PDI will be heavily influenced by the redfish lens, or other interfaces will become appealing (in the very long term)",
      "parentUuid": "4557e093_2573b222",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 106,
        "endChar": 45
      },
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc4208a0_58b53c3f",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-04-07T19:07:36Z",
      "side": 1,
      "message": "Rather than being so open, I would prefer we explicitly favor one approach (\u0027Proposal I\u0027 in my opinion) but allow Proposal II in specific cases:\n\n1. As a temporary mitigation until EM can support PropI.\n2. In a few cases where there are different relationships between how inventory is collected and the physical structure (I think Ed had a few examples, but I can\u0027t think of any myself).",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 113,
        "endChar": 27
      },
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54f0eda9_e040e5c1",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-04-07T19:07:36Z",
      "side": 1,
      "message": "I certainly favor this than a compile-time switch.  We could end up with multiple inventory-providing services running in some cases and they may have a different implementation choice.",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 117,
        "endChar": 12
      },
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}