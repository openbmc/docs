{
  "comments": [
    {
      "key": {
        "uuid": "23848c74_66ce9df6",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-04-07T19:07:36Z",
      "side": 1,
      "message": "I think we should also define how all these other associations are defined.  At a minimum I\u0027d like to see a README created in phosphor-dbus-interfaces under Inventory (because that is how we document associations in other areas already).",
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cc355f8_3bf568ff",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-06-09T18:35:14Z",
      "side": 1,
      "message": "Isn\u0027t Associations interface just a list?\n\nHow will we be able to tell between the different types of relations?",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 106,
        "endChar": 45
      },
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58c1bbd5_880ede4d",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-06-09T18:56:28Z",
      "side": 1,
      "message": "oh wait, I guess you were not referring to https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Association.interface.yaml.\n\nI guess you meant https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Association/Definitions.interface.yaml.\n\nLooks like this should work fine. It will create a new path that is related to the type of connection to help determine the associations.\n\nIs the diff between I and II, just that ContainBy and Contains are not using Associations?",
      "parentUuid": "8cc355f8_3bf568ff",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 106,
        "endChar": 45
      },
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4fada99_e2b91783",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-06-10T20:59:20Z",
      "side": 1,
      "message": "Thinking about it more. Is it better to use all Associations instead... since that scales better from my understand. If we have 5 board that is contained by each other like \n0 -\u003e 1 -\u003e ... -\u003e4 \n\nThere will be like 5 level of paths and each of them might have a bunch of sensors.. sounds like a mess to me.\n\nWill full associations, I feel like the existing structure will not be mess around as much. But who know what other issue might come up with that.",
      "parentUuid": "58c1bbd5_880ede4d",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 106,
        "endChar": 45
      },
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c753f13_067b92f7",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-07-07T13:37:58Z",
      "side": 1,
      "message": "\u003e There will be like 5 level of paths and each of them might have a bunch of sensors.. sounds like a mess to me.\n\nWhy is it a mess?  It seems more intuitive to me.\n\nThe big advantage to hierarchy, to me, is it is more obvious from a human perspective.  A flat bunch of parts requires me to do a bunch of extra queries to figure out what is what.  A hierarchy (show by `busctl tree`) makes it quite obvious what is connected where.\n\nThe other big advantage of a hierarchy is naming when there are duplicate parts.  A small example: \"/.../proc3/core16\" is better than \"/.../proc3-core16\" and \"/.../core88\" [where 88 \u003d 24 * 3 + 16].",
      "parentUuid": "b4fada99_e2b91783",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 106,
        "endChar": 45
      },
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc4208a0_58b53c3f",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-04-07T19:07:36Z",
      "side": 1,
      "message": "Rather than being so open, I would prefer we explicitly favor one approach (\u0027Proposal I\u0027 in my opinion) but allow Proposal II in specific cases:\n\n1. As a temporary mitigation until EM can support PropI.\n2. In a few cases where there are different relationships between how inventory is collected and the physical structure (I think Ed had a few examples, but I can\u0027t think of any myself).",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 113,
        "endChar": 27
      },
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54f0eda9_e040e5c1",
        "filename": "architecture/dbus-inventory.md",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-04-07T19:07:36Z",
      "side": 1,
      "message": "I certainly favor this than a compile-time switch.  We could end up with multiple inventory-providing services running in some cases and they may have a different implementation choice.",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 117,
        "endChar": 12
      },
      "revId": "e70d835246248043442a5e764f810b0596a6c75e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}