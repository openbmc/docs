{
  "comments": [
    {
      "key": {
        "uuid": "56efae6c_d394f3b6",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-10-16T21:29:53Z",
      "side": 1,
      "message": "Generally speaking we use the words as follows on this project:\n\n\"unit test\" - tests ran at a repository level when a piece of code is checked into a repository.\n\n\"integration test\" - tests ran on a whole image level on a real piece of hardware to indicate that the whole image \"integrates well\".\n\nMy casual reading here suggests to me you\u0027re talking about \"unit test\" and not \"integration test\".  Amirite?",
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b25475f_be0f51c5",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 1000913
      },
      "writtenOn": "2020-10-19T16:50:43Z",
      "side": 1,
      "message": "My understanding is that, currently, in openbmc, there are mainly two categories of tests:\n- Unit testing:  a single function/module of a program is separated and its interface to rest of the program will be tested. For example, this one on the pid-control repository (https://github.com/openbmc/phosphor-pid-control/blob/ca791156e2594ce7d25b42793a0a1b60d922fefd/test/pid_fancontroller_unittest.cpp#L89) verifies if the correct value is selected from multiple fan inputs. And, these tests in openbmc, are not necessarily run on a real BMC or simulator. There are docker scripts that can setup the environment and build images to run those tests. These tests are handled by this repository: https://github.com/openbmc/openbmc-build-scripts\n- End to end testing: where the entire system is run to make sure it functions correctly as a whole. I believe this repository is mainly responsible for these kinds of tests: https://github.com/openbmc/openbmc-test-automation\n\n\nBy \"integration testing\", we mean something in between of these two levels. Particularly, we want to run a single OpenBMC daemon (e.g., swampd) and make sure it operates as expected. These tests are intended to be run similar to unit tests, i.e., use a docker script to prepare the environment and build a container that can run the integration tests against a single daemon. We don\u0027t expect it to be run on a real/simulated BMC.\n\nMaybe an example would help clear things up. Let\u0027s say we want to run swampd and see if it operates as expected in response to its environment. We can have arbitrary initial values for sensors (i.e., temperature, fan RPM, fan PWM, etc.) and see how swampd operates in this environment. This will probably involve multiple functions inside this daemon. e.g., configuring zones, sensors, etc., interactions with dbus, tuning algorithms, deciding about how to change PWM, etc. And, in the test, we would probably check multiple things. For example, was the fan PWM set as intended according to the algorithm?",
      "parentUuid": "56efae6c_d394f3b6",
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3edbd86_2d054e45",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2020-10-20T10:00:30Z",
      "side": 1,
      "message": "I agree with the above and somewhat like this use of terminology. It separates most current unit tests from these tests where we stand up the entire unit and make sure it behaves correctly. We can think of mosts tests being unit of unit tests given how OpenBMC might define a unit. These tests are end2end for a single unit of the OpenBMC system. I guess the unit / integration / end2end terminology doesn\u0027t really fit all that well in describing this.",
      "parentUuid": "4b25475f_be0f51c5",
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a6b306e_765f28ad",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-10-16T21:29:53Z",
      "side": 1,
      "message": "I would contest that this is not a true statement.\n\nIt is trivial to take a phosphor-dbus-interface defined-YAML file and mock up a service to implement it using the sdbus++ generated bindings.  We have examples here: https://github.com/openbmc/sdbusplus/blob/master/example/calculator-server.cpp",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 17,
        "endChar": 49
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "982f489e_d2ead15b",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1000913
      },
      "writtenOn": "2020-10-19T16:50:43Z",
      "side": 1,
      "message": "Thanks for pointing this out. Yes, this seems to be helpful in building mock services, especially with unit tests. I\u0027m hoping that the proposed solution would make it more convenient to test a daemon that just needs a few services around it and you want to set it up in different states for each test.",
      "parentUuid": "9a6b306e_765f28ad",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 17,
        "endChar": 49
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b2dc784_1a36be1c",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2020-10-20T10:00:30Z",
      "side": 1,
      "message": "+1. You could do the above work one off for every single project, but we want to provide convenient tooling to make it easier for any given project to do that.",
      "parentUuid": "982f489e_d2ead15b",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 17,
        "endChar": 49
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7fca598_ce1ab21c",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-10-16T21:29:53Z",
      "side": 1,
      "message": "Martin definitely uses \"integration tests\" in a different way than we do in this project.  I think we should be careful about that.",
      "range": {
        "startLine": 23,
        "startChar": 26,
        "endLine": 23,
        "endChar": 43
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23d83e1c_743727ec",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1000913
      },
      "writtenOn": "2020-10-19T16:50:43Z",
      "side": 1,
      "message": "I put this reference to clarify what we meant by \"integration testing\": \"They test the integration of your application with all the parts that live outside of your application.\" Probably, I should emphasize that, here, by \"application\" we mean \"a single daemon\" within OpenBMC and not the \"whole  OpenBMC OS image\".",
      "parentUuid": "a7fca598_ce1ab21c",
      "range": {
        "startLine": 23,
        "startChar": 26,
        "endLine": 23,
        "endChar": 43
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa9ce027_014fc1b3",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2020-11-17T22:34:28Z",
      "side": 1,
      "message": "nit: still got a few extra spaces at ends of lines. In gerrit there\u0027s an option to turn this on so you can easily see them.",
      "range": {
        "startLine": 26,
        "startChar": 74,
        "endLine": 26,
        "endChar": 75
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c89cf91b_a3911e94",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-10-16T21:29:53Z",
      "side": 1,
      "message": "I\u0027m having trouble understanding what the value of this becomes.  If most of the time we cannot run the real daemon(s) we are interacting with, why are we bothering to mock at a dbus level?  The fact that you went across dbus to talk to a fake daemon doesn\u0027t really seem to hold any more testing value than simply mocking the call before it enters the dbus libraries.",
      "range": {
        "startLine": 26,
        "startChar": 58,
        "endLine": 39,
        "endChar": 42
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "397704d8_9a1635dd",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000913
      },
      "writtenOn": "2020-10-19T16:50:43Z",
      "side": 1,
      "message": "I think \"mocking the call before it enters the dbus libraries\" would work very well mainly in unit tests that we want to test a single function/unit/module. For example this one verifies a single functionality without calling dbus (https://github.com/openbmc/phosphor-pid-control/blob/ca791156e2594ce7d25b42793a0a1b60d922fefd/test/pid_fancontroller_unittest.cpp#L149). Probably, some of the functionalities that can be tested by integration testing, are already verified by various unit tests. But the goal of integration testing is to verify that the daemon as a whole functions as expected. I would expect that it will add more values to the testing infrastructure and improves the software quality.\n\nFor example, in my prototype, it helped reveal an issue that happened because of an inconsistency between the versions of different repositories that I used. I created a mock sensor using an older spec (https://github.com/openbmc/phosphor-dbus-interfaces/blob/05375b14e5a68ac249da6a8cd68e3d522a7ed022/xyz/openbmc_project/Sensor/Value.interface.yaml) and used int64 type for values, but when I tested it with swampd, it expected a double value and that resulted in unexpected behaviors.\n\nI\u0027m optimistic that having integration testing similar to this, would help find more issues in OpenBMC daemons and improves their quality.",
      "parentUuid": "c89cf91b_a3911e94",
      "range": {
        "startLine": 26,
        "startChar": 58,
        "endLine": 39,
        "endChar": 42
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc434ebd_2d35ddde",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2020-10-20T10:00:30Z",
      "side": 1,
      "message": "Another part of the value is a sanity check that the daemon actually works at presubmit time, which we don\u0027t typically do today even with pretty good unit test coverage. We can also avoid non-trivial mocks of the sd_bus API that end up being convoluted for the reader and pretty rigid.",
      "parentUuid": "397704d8_9a1635dd",
      "range": {
        "startLine": 26,
        "startChar": 58,
        "endLine": 39,
        "endChar": 42
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e0ca3d3_97e5bcfb",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-14T21:20:54Z",
      "side": 1,
      "message": "Could we also add that the example be a non-trivial (or maybe even trivial) daemon that already runs on OpenBMC?",
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bc46e2a_34abd3d8",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1000913
      },
      "writtenOn": "2020-10-19T16:45:59Z",
      "side": 1,
      "message": "Do you mean run the tests on a real/simulated OpenBMC? What kinds of examples do you have in mind specifically?",
      "parentUuid": "9e0ca3d3_97e5bcfb",
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e757dcd_cc49bbef",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-19T17:01:47Z",
      "side": 1,
      "message": "\u003e Do you mean run the tests on a real/simulated OpenBMC? What kinds of examples do you have in mind specifically?\n\nNo, I mean rather than creating an \"example\" service from scratch, it would be great if you could take a service that already follows the openbmc best practices (I\u0027m thinking phosphor-networkd, certificate service, or something else \"simple\") and mock that out, so we can show the changes needed to accomplish the mocking.",
      "parentUuid": "5bc46e2a_34abd3d8",
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e649dbd_22b8c7ab",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-14T21:20:54Z",
      "side": 1,
      "message": "Don\u0027t we already have that?  I thought CI runs unit tests already?",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 70,
        "endChar": 65
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4830940_e24fc702",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1000913
      },
      "writtenOn": "2020-10-19T16:45:59Z",
      "side": 1,
      "message": "Yes we do have that for the current unit tests. I just wanted to emphasize that we resolve the new dependencies related to the mock library.",
      "parentUuid": "5e649dbd_22b8c7ab",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 70,
        "endChar": 65
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cf08318_5890458f",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-19T17:01:47Z",
      "side": 1,
      "message": "can you rephrase \"configure, build, and run integration tests\" then?  That makes it sound like you\u0027re adding new features.",
      "parentUuid": "e4830940_e24fc702",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 70,
        "endChar": 65
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dee60eae_e2845c69",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-14T21:20:54Z",
      "side": 1,
      "message": "Is there an opportunity here to include this by default with something like sdbusplus or phosphor-dbus-interfaces?",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 75,
        "endChar": 58
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7862ebde_66593043",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-10-16T21:29:53Z",
      "side": 1,
      "message": "This is the first time you\u0027ve said *where* this code will run and to me you\u0027re not really describing anything above unit testing except that you\u0027re providing a method to launch mock-daemons?\n\nThere are a few serious issues with launching anything dbus-related in the unit-test environment:\n\n- Most of our dbus applications use the system bus but that requires root permissions.  You said it wouldn\u0027t require root permissions in the requirements above.  So, that means you now have to switch the application-under-test to use the user bus in these special test cases.\n\n- Service names need to be unique per-bus.  We have had problems with applications spawning dbus services in testing because we run the builds in parallel.  You can get a machine with multiple jobs running at the same time, some of which expect to use (or mock) the same service name.  We\u0027ve fixed that in test-cases by often adding some random number to the reserved service name, but now you\u0027re again not testing the real connection between the applications-under-test.\n\n- The most widely used dbus service is mapper.  You will want a \"real\" mapper for your test environment because that is how many applications get to the service they really want and we don\u0027t want duplicate copies of mapper mocks in every repository.",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 75,
        "endChar": 58
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c446552e_ac67faa1",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000913
      },
      "writtenOn": "2020-10-19T16:45:59Z",
      "side": 1,
      "message": "I couldn\u0027t understand this question. Do you mean that we include the common functionalities in an existing repository such as \"sdbusplus\" or \"phosphor-dbus-interfaces\" and not add a new repository?",
      "parentUuid": "dee60eae_e2845c69",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 75,
        "endChar": 58
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b7ee5e3_b4b3523a",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000913
      },
      "writtenOn": "2020-10-19T16:50:43Z",
      "side": 1,
      "message": "- The dbusmock library allows us to start a \"local system bus\". (see https://github.com/martinpitt/python-dbusmock/blob/a2cbc43ade19d265ad9fd2301599f44162ce8d07/dbusmock/testcase.py#L51) and daemons can interact with it similar to a real system bus. Also, it does not interfere with system services, because it is a separate local bus.\n- I didn\u0027t see this issue in my quick prototypes, because each process that \"starts a fake system bus\", will start on a unique address. So, this means that, for example, we can run two tests at same time. swampd interacts with its own bus that has sensors and other services and impid interacts with another bus that separate sensors and services customized for its specific tests. We can have services with the same name on these two tests, because they are running on separate buses.\n- You are right, it doesn\u0027t make sense to fake the mapper service. We will use the \"real mapper\" and it is available in the docker environment. It will operate on the fake bus that we create, so it can find objects on each bus that it connects to.",
      "parentUuid": "7862ebde_66593043",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 75,
        "endChar": 58
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2b9e749_471c14c4",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-19T17:01:47Z",
      "side": 1,
      "message": "I mean, rather than creating a new repository, is there an existing repository that could be used instead?",
      "parentUuid": "c446552e_ac67faa1",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 75,
        "endChar": 58
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8705daee_10b59388",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2020-10-20T10:00:30Z",
      "side": 1,
      "message": "Between the build-scripts repository and phosphor-dbus-interfaces we can probably find a good home for most of the changes.",
      "parentUuid": "f2b9e749_471c14c4",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 75,
        "endChar": 58
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07dae39d_266f7ff0",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-10-16T21:29:53Z",
      "side": 1,
      "message": "We do not run python on the BMC.  If you choose to do this with python you\u0027re significantly limiting the value of this framework.\n\nI again would suggest looking at what sdbusplus already provides for quickly creating objects and interfaces from our existing definitions.  I glanced at the python-dbusmock homepage and I\u0027m not seeing much it provides that sdbus++-generated server bindings don\u0027t already.  (If there are features you need, I might even be convinced to develop them for you.)",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 80,
        "endChar": 35
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c5b9393_51242cec",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1000913
      },
      "writtenOn": "2020-10-19T16:50:43Z",
      "side": 1,
      "message": "I think the main goal is to run these tests similar to unit tests, i.e., provide the environment, e.g., using a docker container. We are not planning to run this on a real/simulated BMC. The python-dbusmock allows for running an arbitrary bus for the duration of the test that does not interfere with other services. It also provides some convenience functions to deal with dbus and mock services on it. I think it is convenient for writing quick mock services with just the minimal required functionalities with desired properties/behaviors.",
      "parentUuid": "07dae39d_266f7ff0",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 80,
        "endChar": 35
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93975eeb_196d2a71",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-14T21:20:54Z",
      "side": 1,
      "message": "This assumes that the build infrastructure has a dbus-broker running, and the CI infrastructure has the ability to spin up new dbus session buses, or connect to the system bus, which might not always be the case.  If that\u0027s an expected constraint, you might want to call it out explicitly.",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 84,
        "endChar": 72
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11da338f_b358ce2c",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000913
      },
      "writtenOn": "2020-10-19T16:45:59Z",
      "side": 1,
      "message": "I\u0027m not sure if I understood your questions correctly. When I use the build-script repo to create the environment, I can run dbus in the docker container and I can use the mock library to start session/system buses. see (https://github.com/martinpitt/python-dbusmock/blob/a2cbc43ade19d265ad9fd2301599f44162ce8d07/dbusmock/testcase.py#L51).\nAre you saying that I should tell the user that if they are not using the docker script from the build-script repo, how they should prepare the environment?",
      "parentUuid": "93975eeb_196d2a71",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 84,
        "endChar": 72
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a0d7ca5_7c082b91",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-19T17:01:47Z",
      "side": 1,
      "message": "Patrick did a better job of summarizing the issues on line 75.  Lets continue that discussion.",
      "parentUuid": "11da338f_b358ce2c",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 84,
        "endChar": 72
      },
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14336611_15405266",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-10-16T21:29:53Z",
      "side": 1,
      "message": "Need to add sdbus++/sdbusplus here if you rule it out. ;)",
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8fcdff3_866fb19c",
        "filename": "designs/dbus-mocking-integration-testing.md",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1000913
      },
      "writtenOn": "2020-10-19T16:50:43Z",
      "side": 1,
      "message": "Thanks for mentioning this. I will add it.",
      "parentUuid": "14336611_15405266",
      "revId": "79fe9a7a9e58c68385e4f63d1ec1c9b59bfe91ab",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}