{
  "comments": [
    {
      "key": {
        "uuid": "149ef735_9335152b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-11-10T22:08:28Z",
      "side": 1,
      "message": "Suggest adjusting your \u0027git config\u0027 with a legal-ish name here.  This looks like a user-id which isn\u0027t what signed-off-bys should be.",
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73880d8b_6bf36029",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1000948
      },
      "writtenOn": "2020-11-12T22:32:52Z",
      "side": 1,
      "message": "Will be reflected in the next iteration of the design document!",
      "parentUuid": "149ef735_9335152b",
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c59335d7_a7e339bf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-11-16T22:38:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73880d8b_6bf36029",
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7de8538_497323a1",
        "filename": "designs/mock-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-20T22:28:53Z",
      "side": 1,
      "message": "nit.  It does, your way just enables a larger range of errors, which is good.",
      "range": {
        "startLine": 19,
        "startChar": 45,
        "endLine": 21,
        "endChar": 51
      },
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cd8943e_f9c2b841",
        "filename": "designs/mock-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-11-10T22:08:28Z",
      "side": 1,
      "message": "One piece I\u0027m missing in reading this is who is the intended user.  Is this to debug an application like `phosphor-hwmon` or are you intending on creating integration tests of some sort?  How does the proposal end up being used in a real system?",
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e35d304_71732af2",
        "filename": "designs/mock-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000948
      },
      "writtenOn": "2020-11-12T22:32:52Z",
      "side": 1,
      "message": "We uploaded this design document to gauge interest/receive feedback and see if anyone would find use-cases for it. Users could choose to install the binary for the tool into their build (doesn\u0027t require any special build anymore) and use it to overload the values returned by sensors or inject error cases in both the static stack (currently working on phosphor-hwmon) and the dynamic stack. It\u0027s current use is for debugging/development purposes but there was a stretch goal to integrate it into some form of integration testing for phosphor-hwmon.",
      "parentUuid": "2cd8943e_f9c2b841",
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e37a309_427e5ad7",
        "filename": "designs/mock-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-11-16T22:38:43Z",
      "side": 1,
      "message": "TBH, this seems somewhat backwards to me.  Why would we approve a design for and write code for something for which there are no uses cases?\n\n\u003e It\u0027s current use is for debugging/development purposes but there was a stretch goal to integrate it into some form of integration testing for phosphor-hwmon.\n\nPlease record this.",
      "parentUuid": "6e35d304_71732af2",
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5492789a_a5d84175",
        "filename": "designs/mock-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-20T22:28:53Z",
      "side": 1,
      "message": "\u003e TBH, this seems somewhat backwards to me.  Why would we approve a design for and write code for something for which there are no uses cases?\n\nI think you misread what he said.  One of the primary use cases in user story format would be:\n\nAs an OpenBMC developer, I would like a tool that allows me to test all  userspace code north of the hwmon driver, by simulating hardware interactions that require a lot of hardware (ovens/cooling chambers) or require physically destroying the machine to replicate.\n\nA possible later use case would be:\n\nAs an OpenBMC developer/QA tester, I would like to be able to simulate all driver/userspace interactions in a unit test, without relying on the behavior of the underlying hardware to verify the software behavior.\n\n\u003e \n\u003e \u003e It\u0027s current use is for debugging/development purposes but there was a stretch goal to integrate it into some form of integration testing for phosphor-hwmon.\n\u003e \n\u003e Please record this.\n\nRecord the things he\u0027s not going to do?  We could put down \"this could be used for\" type stuff, but in general, we just amend the design docs later to add things like that.",
      "parentUuid": "8e37a309_427e5ad7",
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15eba4e8_ea746b78",
        "filename": "designs/mock-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-20T22:28:53Z",
      "side": 1,
      "message": "I\u0027m curious what form this would take.",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 80,
        "endChar": 41
      },
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e411bd69_7ebbe5ed",
        "filename": "designs/mock-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-20T22:28:53Z",
      "side": 1,
      "message": "nice diagram.",
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cddd899_e377c82a",
        "filename": "designs/mock-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-11-10T22:08:28Z",
      "side": 1,
      "message": "Is there any concern with `ptrace` w.r.t. security settings?  Could we end up with an SELinux config where your tool doesn\u0027t work (or similar to SELinux).",
      "range": {
        "startLine": 138,
        "startChar": 16,
        "endLine": 138,
        "endChar": 22
      },
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44cdfe6a_79d51c36",
        "filename": "designs/mock-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 1000948
      },
      "writtenOn": "2020-11-12T22:32:52Z",
      "side": 1,
      "message": "the ptrace tool may bring security threats if brought into a build, but users can choose whether to include it into their build or not - it probably shouldn\u0027t be built into any production BMC unless it\u0027s for debugging/development purposes. That being said, if built in it can be disabled by disabling permissions for PTRACE-ATTACH in /proc/sys/kernel/yama/ptrace_scope.",
      "parentUuid": "2cddd899_e377c82a",
      "range": {
        "startLine": 138,
        "startChar": 16,
        "endLine": 138,
        "endChar": 22
      },
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b7af15e_e6247054",
        "filename": "designs/mock-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-20T22:28:53Z",
      "side": 1,
      "message": "Today, OpenBMC doesn\u0027t implement SELinux, so any answer Junho would give is conjecture based on \"if Openbmc did SELinux\" we could certainly go into that level of detail in this kind of design review, but that seems like overkill, and we would have to cover a whole lot more \"what if\" type scenarios.\n\nThe tool itself existing just makes the permissions issue more obvious, it doesn\u0027t open any new vulnerabilities that didn\u0027t exist before by running processes as root.\n\nIf Junho put \"In the future, this tool might require special user privileges to function\" would that mitigate your concerns?",
      "parentUuid": "44cdfe6a_79d51c36",
      "range": {
        "startLine": 138,
        "startChar": 16,
        "endLine": 138,
        "endChar": 22
      },
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab6edc18_e4486f9e",
        "filename": "designs/mock-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 190,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-11-10T22:08:28Z",
      "side": 1,
      "message": "I don\u0027t think I agree with this.\n\nLots of kernel subsystems create debug drivers exactly like this.  Often the driver exposes debugfs entries to set the values from userspace.  I think you could easily formulate a generic driver that takes a deliminated string of hwmon sensors (ex. \"in0;in1;out0;temp0\") in the bind call and populates both the standard hwmon entries and custom debugfs to modify the values.",
      "range": {
        "startLine": 188,
        "startChar": 48,
        "endLine": 190,
        "endChar": 56
      },
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f557c531_12249576",
        "filename": "designs/mock-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 190,
      "author": {
        "id": 1000948
      },
      "writtenOn": "2020-11-12T22:32:52Z",
      "side": 1,
      "message": "You\u0027re right - I previously wasn\u0027t aware of all the approaches around this. We\u0027ve decided that a big priority for this tool is to make sure it doesn\u0027t require any build changes and we want to avoid adding kernel code - that\u0027s the biggest case against this approach now.",
      "parentUuid": "ab6edc18_e4486f9e",
      "range": {
        "startLine": 188,
        "startChar": 48,
        "endLine": 190,
        "endChar": 56
      },
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08865288_bd4bec6a",
        "filename": "designs/mock-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 190,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-11-16T22:38:43Z",
      "side": 1,
      "message": "\u003e We\u0027ve decided that a big priority for this tool is to make sure it doesn\u0027t require any build changes and we want to avoid adding kernel code - that\u0027s the biggest case against this approach now.\n\nWhy do you want to avoid adding kernel code?  If this is the typical path the kernel teams have already plowed for making dummy drivers why would we do something different?",
      "parentUuid": "f557c531_12249576",
      "range": {
        "startLine": 188,
        "startChar": 48,
        "endLine": 190,
        "endChar": 56
      },
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0e3769f_d135b39a",
        "filename": "designs/mock-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 190,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-20T22:28:53Z",
      "side": 1,
      "message": "\u003e \u003e We\u0027ve decided that a big priority for this tool is to make sure it doesn\u0027t require any build changes and we want to avoid adding kernel code - that\u0027s the biggest case against this approach now.\n\u003e \n\u003e Why do you want to avoid adding kernel code?  If this is the typical path the kernel teams have already plowed for making dummy drivers why would we do something different?\n\nJust a guess (I haven\u0027t asked Junho directly): Because adding kernel code would significantly increase the scope of what\u0027s required to execute this design, and reduces the usefulness as a generic debugging/unit testing tool.  To my understanding, Junho is planning on using existing kernel mechanisms for doing this work, so it\u0027s not like we\u0027re reinventing the wheel, we\u0027re just attaching the wheel to a bicycle instead of a jeep.\n\nWith all that said, I think the statement above could probably be removed, and the previous sentence would stand up as a defense why this is less desirable.",
      "parentUuid": "08865288_bd4bec6a",
      "range": {
        "startLine": 188,
        "startChar": 48,
        "endLine": 190,
        "endChar": 56
      },
      "revId": "e7ebb399ed24851b8bfb19f8a09abfaeb24ebf58",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}