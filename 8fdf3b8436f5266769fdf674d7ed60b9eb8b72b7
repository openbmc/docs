{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7875f6fd_a372dd2e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-07-27T22:40:11Z",
      "side": 1,
      "message": "Do we have proof-of-concept patches implementing this design somewhere? I\u0027d like to understand the mechanics of (conceptually) plugging things into a port.",
      "revId": "8fdf3b8436f5266769fdf674d7ed60b9eb8b72b7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9080976f_47b28274",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-01T17:53:39Z",
      "side": 1,
      "message": "I don\u0027t believe so.  The goal here was to get consensus before going off and implementing something that only met a subset of the community needs.",
      "parentUuid": "7875f6fd_a372dd2e",
      "revId": "8fdf3b8436f5266769fdf674d7ed60b9eb8b72b7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ca2b590_d74e4e75",
        "filename": "designs/physical-topology.md",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-23T18:58:08Z",
      "side": 1,
      "message": "While I understand what you were trying to do here, This probably needs to go in the exposes section.\n\nThe physical device \"exposes\" a port interface.  The dbus interfaces themselves should be generated internally.  This keeps our principal of \"EM config files are writable by someone without experience with dbus\" intact.  Even with what you\u0027ve written there, I\u0027d have to go look up PDI to know what needs to go in those.\n\nAlso, FWIW, I suspect that we\u0027re going to need to append information to this at some point, with things like presence GPIO pins that we\u0027ll need implementations to fill in\n\nwhat about\n\nExposes: [\n   {\n       PortType: BackplaneConnector,\n       I2cLaneIndex (optional): $BUS,\n       PresencePinName (optional): PortAGPIO,\n       Type: PhysicalPort,\n       Name: BackplanePortA.\n   }\n]\n\nThen that gets us:\n1. An extension point where we can handle arbitrary ports on a device, just by adding new \"PortType\" options.\n2. As we find new exciting use cases, we can add properties\n3. A way for a user to provide a sane name for their entry that makes sense for their system, and can differentiate this topology from another.  For example, a baseboard is going to have PCIeSLots, sata connectors, U.2 connectors, and a bunch of other stuff.  This solves most of the use cases.",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 85,
        "endChar": 5
      },
      "revId": "8fdf3b8436f5266769fdf674d7ed60b9eb8b72b7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0c94030_07ec0a33",
        "filename": "designs/physical-topology.md",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000233
      },
      "writtenOn": "2022-07-27T21:26:04Z",
      "side": 1,
      "message": "Seems reasonable. So the port would show up on D-Bus just like any other Exposes record, but e-m would still internally parse it and generate the proper Associations?\n\nPresumably other daemons might care about the other properties that could be added too, like those handling cable presence.\n\nWe\u0027d still only match on the PortType and never the name, right?",
      "parentUuid": "7ca2b590_d74e4e75",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 85,
        "endChar": 5
      },
      "revId": "8fdf3b8436f5266769fdf674d7ed60b9eb8b72b7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9463917a_87bad21b",
        "filename": "designs/physical-topology.md",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-08-01T17:53:39Z",
      "side": 1,
      "message": "\u003e Seems reasonable. So the port would show up on D-Bus just like any other Exposes record, but e-m would still internally parse it and generate the proper Associations?\n\nYep.  Pretty similar to how it does it for doing the device instantiation.\n\n\u003e \n\u003e Presumably other daemons might care about the other properties that could be added too, like those handling cable presence.\n\nI think I had cable presence covered with the PresencePinName above, so the daemon polling for that presence pin would go create a \"Presence\" object and associate it back.\n\n\u003e \n\u003e We\u0027d still only match on the PortType and never the name, right?\n\nCorrect.  Name is freeform and under the control of the user.\n\nAs i\u0027m looking at the above, we probably want to just stick stuff in Type, so the above example would be:\n\nType: \u003cSystemName\u003eBackplaneConnector\n\nRather than having a PortType.  This means that as we evolve, in theory we could have U.2 ports serviced by a different daemon than backplane ports, or sata ports, which as we evolve seems like a good idea.",
      "parentUuid": "b0c94030_07ec0a33",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 85,
        "endChar": 5
      },
      "revId": "8fdf3b8436f5266769fdf674d7ed60b9eb8b72b7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4913fbf_3ee5e532",
        "filename": "designs/physical-topology.md",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-23T18:58:08Z",
      "side": 1,
      "message": "I think this linking is good.\n\nPer the previous comment, I think this becomes\n\nExposes: [\n   Type: DownstreamPort\n   PortType: BackplaneConnector\n}\n\n\nWhich, in theory if we have the i2c bus information from the previous exposes, IN THEORY, we could just implicitly generate one if we find an Entity on a declared bus number, because we know that the parent is a \"port\", so if this thing is plugged into that i2c device, we don\u0027t need any additional information about the port type on the device, we know from the parent resource.\n\nWith that said, in terms of initial implementation, this is fine.",
      "range": {
        "startLine": 99,
        "startChar": 79,
        "endLine": 99,
        "endChar": 90
      },
      "revId": "8fdf3b8436f5266769fdf674d7ed60b9eb8b72b7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e8b189b_c62fe5a4",
        "filename": "designs/physical-topology.md",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-23T18:58:08Z",
      "side": 1,
      "message": "Note, it\u0027s been brought up in recent days that we need to make a more efficient mapper call for this.  Just FYI, what we have today works, but it\u0027s not the fastest;  Implementation detail (please don\u0027t add it to your doc) but just something to consider",
      "revId": "8fdf3b8436f5266769fdf674d7ed60b9eb8b72b7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}