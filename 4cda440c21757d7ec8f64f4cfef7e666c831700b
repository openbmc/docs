{
  "comments": [
    {
      "key": {
        "uuid": "d4e1df62_f6e10a50",
        "filename": "redfish-event-generation-proposal.md",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-08T07:57:27Z",
      "side": 1,
      "message": "Please see DEVELOPING.md for rules on why you\u0027re not allowed to do that.  Startup times matter in these contexts.",
      "range": {
        "startLine": 49,
        "startChar": 27,
        "endLine": 49,
        "endChar": 66
      },
      "revId": "4cda440c21757d7ec8f64f4cfef7e666c831700b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ea60387_8ce75d90",
        "filename": "redfish-event-generation-proposal.md",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-08T07:57:27Z",
      "side": 1,
      "message": "In the above design you\u0027re making the critical flaw that Redfish resources map 1:1 with dbus resources.  This is in no way the case.  If it were, the Node-specific handler code would not exist, and could be replaced with a simple map.\n\nI think you\u0027re oversimplifying the problem.\n\n\nAlso, the above is going to generate a lot of DBus matches for what is used rarely, which will reduce system performance overall.",
      "revId": "4cda440c21757d7ec8f64f4cfef7e666c831700b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce935ca2_5810b855",
        "filename": "redfish-event-generation-proposal.md",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-08T07:57:27Z",
      "side": 1,
      "message": "Can you start with some more complex examples, like a sensor threshold?  I think you\u0027ll find what I\"m talking about above about over simplifying this.",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 61,
        "endChar": 65
      },
      "revId": "4cda440c21757d7ec8f64f4cfef7e666c831700b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40c7c7eb_98aa83c1",
        "filename": "redfish-event-generation-proposal.md",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-08T07:57:27Z",
      "side": 1,
      "message": "There was a design for this once a long time ago.  Nothing was fundamentally wrong with the idea side from the added memory usage, and that\u0027s probably doable to optimize.\n\n\nThere was another design that intended to create a new dbus-interface class such that every Resource GET could track the dbus calls and properties that were required to create that response, then you could add watch expressions for them.  That way, we could continue to use our existing dbus-\u003eresource code for generating event properties.\n\nThis is still a hard problem, but at least we\u0027re not hardcoding a static list of matches.  If it were up to me, this would be the one I would try to tackle this, as it scales with the resource code in bmcweb, and doesn\u0027t require every author to go edit this config file.",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 78
      },
      "revId": "4cda440c21757d7ec8f64f4cfef7e666c831700b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "725d46a3_08148df9",
        "filename": "redfish-event-generation-proposal.md",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-09-10T13:22:09Z",
      "side": 1,
      "message": "Thanks Ed for the quick comment/other thought on the same.Let me get back to you on the same",
      "parentUuid": "40c7c7eb_98aa83c1",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 78
      },
      "revId": "4cda440c21757d7ec8f64f4cfef7e666c831700b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8b7da67_5c0632ca",
        "filename": "redfish-event-generation-proposal.md",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-09-11T02:16:07Z",
      "side": 1,
      "message": "\u003e There was a design for this once a long time ago.  Nothing was fundamentally wrong with the idea side from the added memory usage, and that\u0027s probably doable to optimize.\n\nI agree on the same.\n\n\u003e There was another design that intended to create a new dbus-interface class such that every Resource GET could track the dbus calls and properties that were required to create that response,\n\nYou mean to say that in bmcweb, we can write this dbus-interface class and whenever any resource get operation happens, it has to go through with this class and then we can add the watch expression for them.\n\nIn that case we need to have to do GET request on all the redfish endpoints before bmcweb- comes up, so that bmcweb can start watching all the required D-bus endpoints.\n\nor \n\ndo you want to merge both the approach.\n\n1) Cache the properties\n2) When the bmcweb comes up it has to fill those properties so it needs to make the D-bus calls to fill these properties.\n\nOne more thing we have to do reverse mapping to get the Redfish Resource/ property from the Dbus events, To handle this- whenever resource get happens- Each Resource can provide its Redfish specific deatils(Redfish Resource Path, Redfish Property etc).",
      "parentUuid": "725d46a3_08148df9",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 78
      },
      "revId": "4cda440c21757d7ec8f64f4cfef7e666c831700b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f3775d1_16bc89a8",
        "filename": "redfish-event-generation-proposal.md",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-11T02:37:10Z",
      "side": 1,
      "message": "\u003e \u003e There was a design for this once a long time ago.  Nothing was fundamentally wrong with the idea side from the added memory usage, and that\u0027s probably doable to optimize.\n\u003e \n\u003e I agree on the same.\n\u003e \n\u003e \u003e There was another design that intended to create a new dbus-interface class such that every Resource GET could track the dbus calls and properties that were required to create that response,\n\u003e \n\u003e You mean to say that in bmcweb, we can write this dbus-interface class and whenever any resource get operation happens, it has to go through with this class and then we can add the watch expression for them.\n\u003e \n\u003e In that case we need to have to do GET request on all the redfish endpoints before bmcweb- comes up, so that bmcweb can start watching all the required D-bus endpoints.\n\nThis is what I meant, although you don\u0027t need to do this on startup, only when the EventService is connected or subscribed to, and only for the resources that have been subscribed.  It\u0027s not perfect, I\u0027ll admit, but it means we\u0027re writing the dbus-\u003ejson code once, not twice, and we don\u0027t have to rewrite everything we have (which took a long time to do).\n\n\u003e \n\u003e or \n\u003e \n\u003e do you want to merge both the approach.\n\u003e \n\u003e 1) Cache the properties\n\u003e 2) When the bmcweb comes up it has to fill those properties so it needs to make the D-bus calls to fill these properties.\n\nThat\u0027s one possible solution that would work.\n\n\u003e \n\u003e One more thing we have to do reverse mapping to get the Redfish Resource/ property from the Dbus events, To handle this- whenever resource get happens- Each Resource can provide its Redfish specific deatils(Redfish Resource Path, Redfish Property etc).\n\nYour property cache would become your mapping to a Resource.  There are multiple DBus properties that make up any given Redfish property, and a few DBUS properties couple apply to multiple redfish properties simultaneously.   The biggest hurdle becomes the mapper, so you might have to watch for those events as well and invalidate the cache on changes?\n\nThis is once of the harder problems in computer science in general.  I\u0027d recommend looking into go-redfish to see how it solved it, so we can either copy it, or use it as learning.",
      "parentUuid": "a8b7da67_5c0632ca",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 78
      },
      "revId": "4cda440c21757d7ec8f64f4cfef7e666c831700b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08993f57_031a9def",
        "filename": "redfish-event-generation-proposal.md",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-09-11T08:50:14Z",
      "side": 1,
      "message": "is this https://github.com/stmcginnis/gofish correct one?",
      "parentUuid": "6f3775d1_16bc89a8",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 78
      },
      "revId": "4cda440c21757d7ec8f64f4cfef7e666c831700b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7d0a39d_c334f0c4",
        "filename": "redfish-event-generation-proposal.md",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-08T07:57:27Z",
      "side": 1,
      "message": "Please avoid focusing on the Redfish Node class.  This will need to exist outside the conventional Request-Response callbacks, which is what the Node class encapsulates.\n\nAlso, I\u0027d like to see the Node class deprecated at some point.  It does very little today.",
      "range": {
        "startLine": 76,
        "startChar": 56,
        "endLine": 76,
        "endChar": 68
      },
      "revId": "4cda440c21757d7ec8f64f4cfef7e666c831700b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01f734fc_27b952cc",
        "filename": "redfish-event-generation-proposal.md",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-09-11T02:22:47Z",
      "side": 1,
      "message": "I thought we can leverage the Node class here to move the common code in the Node class, anyways we are discussing on the alternate way at line no 75.",
      "parentUuid": "a7d0a39d_c334f0c4",
      "range": {
        "startLine": 76,
        "startChar": 56,
        "endLine": 76,
        "endChar": 68
      },
      "revId": "4cda440c21757d7ec8f64f4cfef7e666c831700b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3a82c34_dda7aa4a",
        "filename": "redfish-event-generation-proposal.md",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-11T02:37:10Z",
      "side": 1,
      "message": "Even if you were sticking with this plan, the Node class is the wrong place to do it.  It has a concept of routes (which include wildcards), not resources.",
      "parentUuid": "01f734fc_27b952cc",
      "range": {
        "startLine": 76,
        "startChar": 56,
        "endLine": 76,
        "endChar": 68
      },
      "revId": "4cda440c21757d7ec8f64f4cfef7e666c831700b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e7f27dc_adb16a68",
        "filename": "redfish-event-generation-proposal.md",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-08T07:57:27Z",
      "side": 1,
      "message": "What about for the resources not based on redfish properties?",
      "range": {
        "startLine": 77,
        "startChar": 34,
        "endLine": 77,
        "endChar": 65
      },
      "revId": "4cda440c21757d7ec8f64f4cfef7e666c831700b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90691c2e_a12f98b0",
        "filename": "redfish-event-generation-proposal.md",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2020-09-11T02:22:47Z",
      "side": 1,
      "message": "I didn\u0027t get this.\n\nDo you mean to say that D-bus Resources not based on the redfish properties?\n  for us those D-bus objects are not interested objects.\n\nDo you mean to say that Redfish Resources not based on the D-bus ?\n   Those cases can be handled in the bmcweb code itself and we don\u0027t need any watch expressions on them.\n\nIf these are not the cases, please get me an example.",
      "parentUuid": "1e7f27dc_adb16a68",
      "range": {
        "startLine": 77,
        "startChar": 34,
        "endLine": 77,
        "endChar": 65
      },
      "revId": "4cda440c21757d7ec8f64f4cfef7e666c831700b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c272ef4_430678e3",
        "filename": "redfish-event-generation-proposal.md",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-11T02:37:10Z",
      "side": 1,
      "message": "No, I mean to say there are Redfish resources that are not based on DBus.\n\nLog services for example, reads from a file:\nhttps://github.com/openbmc/bmcweb/blob/d206b437e3fb79a89205a9fbe748b017d312ddfa/redfish-core/lib/log_services.hpp",
      "parentUuid": "90691c2e_a12f98b0",
      "range": {
        "startLine": 77,
        "startChar": 34,
        "endLine": 77,
        "endChar": 65
      },
      "revId": "4cda440c21757d7ec8f64f4cfef7e666c831700b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}