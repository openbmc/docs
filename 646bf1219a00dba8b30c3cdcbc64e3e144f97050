{
  "comments": [
    {
      "key": {
        "uuid": "81070720_818e1021",
        "filename": "architecture/LED-architecture.md",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-12-14T15:02:39Z",
      "side": 1,
      "message": "Prefer non-yoda phrasing:\n\nStarting with Redfish v2020.3,",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 35,
        "endChar": 25
      },
      "revId": "646bf1219a00dba8b30c3cdcbc64e3e144f97050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb923d5e_a4dd9a08",
        "filename": "architecture/LED-architecture.md",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-12-14T15:27:13Z",
      "side": 1,
      "message": "I searched but not sure I understand what a \"Yoda\" phrasing means. Wikipedia sent me to Yoda Conditions. \n\nBut I know you asked me to put \"with\" there",
      "parentUuid": "81070720_818e1021",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 35,
        "endChar": 25
      },
      "revId": "646bf1219a00dba8b30c3cdcbc64e3e144f97050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e9cc521_2a4a8bd0",
        "filename": "architecture/LED-architecture.md",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-12-14T16:00:47Z",
      "side": 1,
      "message": "\u003e But I know you asked me to put \"with\" there\n\nI also suggested a word reordering so that Redfish was part of the first phrase.  This is the Yoda aspect.",
      "parentUuid": "cb923d5e_a4dd9a08",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 35,
        "endChar": 25
      },
      "revId": "646bf1219a00dba8b30c3cdcbc64e3e144f97050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b92de956_d9e55172",
        "filename": "architecture/LED-architecture.md",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-12-15T15:16:06Z",
      "side": 1,
      "message": "Sure.",
      "parentUuid": "8e9cc521_2a4a8bd0",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 35,
        "endChar": 25
      },
      "revId": "646bf1219a00dba8b30c3cdcbc64e3e144f97050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e702476_5f968616",
        "filename": "architecture/LED-architecture.md",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-12-14T15:02:39Z",
      "side": 1,
      "message": "Who owns the OperationalStatus object?  Is it another process?  Are we settled with LED manager automatically updating this Functional property?  Can we get a domain expert from that code to sign off on this approach?",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 81,
        "endChar": 22
      },
      "revId": "646bf1219a00dba8b30c3cdcbc64e3e144f97050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f05174d1_a56c95b5",
        "filename": "architecture/LED-architecture.md",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-12-14T15:27:13Z",
      "side": 1,
      "message": "OperationalStatus interface is implemented by many. For example: Fan/Power Monitor , Inventory Manager. bmcweb already has the hooks in place today to key off of OperationalStatus and set the Health property.\n\nYes.. we have discussed this in great detail with Brad \u0027et al and also suggestions from Ed to use Operational Status and we agree this is the path forward.",
      "parentUuid": "1e702476_5f968616",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 81,
        "endChar": 22
      },
      "revId": "646bf1219a00dba8b30c3cdcbc64e3e144f97050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9be34dc8_a548fdeb",
        "filename": "architecture/LED-architecture.md",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-12-14T15:30:46Z",
      "side": 1,
      "message": "1- Get who implements the OperationalStatus interface on the Inventory D-Bus path\n2- Set the property with the service gotten by #1",
      "parentUuid": "f05174d1_a56c95b5",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 81,
        "endChar": 22
      },
      "revId": "646bf1219a00dba8b30c3cdcbc64e3e144f97050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "567abd2b_4cade3c5",
        "filename": "architecture/LED-architecture.md",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-12-14T16:00:47Z",
      "side": 1,
      "message": "\u003e Yes.. we have discussed this in great detail with Brad \u0027et al and also suggestions from Ed to use Operational Status and we agree this is the path forward.\n\nOther than here, is that discussion documented anywhere?\n\nI don\u0027t have any concern with Redfish using OperationalStatus as the way to display some Redfish information.  What I am concerned with is a design where one process sets OperationalStatus to \"not operational\" and a different process sets it to \"operational\". \n\nIf, for example, Fan owns an object with an OperationalStatus and sets it to \"not operational\" when there is a failure, why would we allow LED to know when to turn it back off?  That doesn\u0027t make any sense to me.  Shouldn\u0027t Fan know when the fan becomes operational again and both disable OperationalStatus and maybe de-assert the LED?\n\nWe could even go down a path where certain \"functional\" LED groups are triggered automatically from the original OperationalStatus rather than forcing the Fan code to know to signal the LED group, right?",
      "parentUuid": "9be34dc8_a548fdeb",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 81,
        "endChar": 22
      },
      "revId": "646bf1219a00dba8b30c3cdcbc64e3e144f97050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3d150c5_71fe4684",
        "filename": "architecture/LED-architecture.md",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-12-15T15:16:06Z",
      "side": 1,
      "message": "\u003e\u003e If, for example, Fan owns an object with an OperationalStatus and sets it to \"not operational\" when there is a failure, why would we allow LED to know when to turn it back off?  That doesn\u0027t make any sense to me.  Shouldn\u0027t Fan know when the fan becomes operational again and both disable OperationalStatus and maybe de-assert the LED?\n\n--------------\n\nHere is how the flow is :\n\n- Fan Code detects the fan is bad and logs an error calling out the FAN\n- Errorlog code parses the callout section and gets the Inventory D-Bus object for what has been called out ( In this case: Fan )\n- Errorlog daemon then gets the \"fault_led\" association from Inventory D-Bus object\n- Errorlog makes a call to LED manager to turn [ON] Led for that group.\n- LED manager then sets OperationalStatus to [false] and also turns [ON] LED.\n\n-------------\n\nIf Fan determines the Fan is good, then they have a need to turn off the LED also and thus make a call to LED manager anyway. It would not make sense to have the fan marked \"Operational\" yet having the Amber LED [ON]. \n\n--------------\n\nWe have another usecase, where we need to turn off all the Indicator LEDs as part of Power_On. When we do that, we will turn off all indicator LEDs and also mark part as functional. If the part is then deemed NonFunctional, then we get into the path that I mentioned before\n\n---------------------\n\nWe have another usecase, where PHYP will detect some issue with PCIE slot for example. When they do it, they will just say turn on the LED for PCIeSlot. As part of that, we need to turn ON LED and also set OperationalStatus.  Similarly, if they are fine, then they ask to turn the LED off and by that, we also set OperationalStatus to true.\n\n-------\n\nNet: We won\u0027t have OperationalStatus as Good _plus_ also have Amber LED on.",
      "parentUuid": "567abd2b_4cade3c5",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 81,
        "endChar": 22
      },
      "revId": "646bf1219a00dba8b30c3cdcbc64e3e144f97050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c91aa1fe_bb70f751",
        "filename": "architecture/LED-architecture.md",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-12-15T16:01:43Z",
      "side": 1,
      "message": "Nobody else sees how complicated this design is?\n\n----\n\nOn error:\n* Fan Code creates log.\n* Log code triggers LED code.\n* LED code triggers Fan code to set OperationalStatus\n\nWhen error is resolved:\n* Fan code deasserts LED\n* LED code triggers Fan code to clear OperationalStatus\n\n----\n\nWhy would we do this to ourselves?  If the Fan code knows about the OperationalStatus, why isn\u0027t it setting it itself?\n\nWhat happens to systems without these fault LEDs?  Now I can\u0027t get Redfish status on my hardware unless I create definitions for fake LEDs so the plumbing between Fan and LED works?  This makes no sense.\n\n----\n\n\u003e We have another usecase, where we need to turn off all the Indicator LEDs as part of Power_On. When we do that, we will turn off all indicator LEDs and also mark part as functional.\n\nThis is fairly unique to your system design, I suspect.  But, again, why doesn\u0027t the Fan(*) code know that we\u0027ve started a new power on and to retry all hardware?  I don\u0027t see anything in this proposed use-case that requires LEDs to be involved directly.\n\n* Fan, or CPU, or whatever entity you have OperationalStatus on in this context.\n\n----\n\n\u003e We have another usecase, where PHYP will detect some issue with PCIE slot for example. When they do it, they will just say turn on the LED for PCIeSlot. As part of that, we need to turn ON LED and also set OperationalStatus. \n\nThis really sounds like a legacy API which was previously poorly designed and now you\u0027re trying to shoehorn in.  If your hypervisor detects an error on a PCIe slot, why wouldn\u0027t they tell you they detected an error on the PCIe slot rather than a round-about way of telling you that by asking you to turn on an LED?  Can\u0027t you just assume certain requests \"turn on LED x\" really mean \"PCIe slot Y is now in a bad state\"?\n\nWho holds the OperationalStatus for these PCIe slots?  Again, my opinion is that should be the primary receiver of the request and control the OperationalStatus directly.  LED assertions are a secondary response to OperationalStatus changes.",
      "parentUuid": "c3d150c5_71fe4684",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 81,
        "endChar": 22
      },
      "revId": "646bf1219a00dba8b30c3cdcbc64e3e144f97050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "703471eb_b3054e41",
        "filename": "architecture/LED-architecture.md",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-12-15T17:08:15Z",
      "side": 1,
      "message": "\u003e\u003e What happens to systems without these fault LEDs?  Now I can\u0027t get Redfish status on my hardware unless I create definitions for fake LEDs so the plumbing between Fan and LED works?  This makes no sense.\n\nThat is not correct. Redfish is merely going by OperationalStatus as opposed to \"how that gets set\". If an implementation choses to set the \"OperationalStatus\" explicitly without LED,  that is still fine.. Redfish will just go by OperationalStatus and not by LED state.\n\n-----------\n\n\u003e\u003e This is fairly unique to your system design, I suspect.  But, again, why doesn\u0027t the Fan(*) code know that we\u0027ve started a new power on and to retry all hardware?  I don\u0027t see anything in this proposed use-case that requires LEDs to be involved directly.\n\nSure.. May be it\u0027s an IBM need. But a usecase that IBM need to support. However, it does not break any other implementations that don\u0027t want to tie LED to OperationalStatus.\n\n------------------------------\n\n\u003e\u003e This really sounds like a legacy API which was previously poorly designed and now you\u0027re trying to shoehorn in.  If your hypervisor detects an error on a PCIe slot, why wouldn\u0027t they tell you they detected an error on the PCIe slot rather than a round-about way of telling you that by asking you to turn on an LED?  \n\nWell, we have debated this really well within IBM. However, what we have is what we all agreed to pursue. One of the reasoning is that , all the change about using Redfish etc are all internal to BMC. That should not cause an upper layer to do differently __because__ the underlying BMC implementation changed to using OpenBMC. Upper layers like Power Hypervisor , AIX, I5OS don\u0027t really care.",
      "parentUuid": "c91aa1fe_bb70f751",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 81,
        "endChar": 22
      },
      "revId": "646bf1219a00dba8b30c3cdcbc64e3e144f97050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "451d9151_7f279739",
        "filename": "architecture/LED-architecture.md",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-12-15T17:23:17Z",
      "side": 1,
      "message": "\u003e\u003e What happens to systems without these fault LEDs?  Now I can\u0027t get Redfish status on my hardware unless I create definitions for fake LEDs so the plumbing between Fan and LED works?  This makes no sense.\n\n\u003e That is not correct. Redfish is merely going by OperationalStatus as opposed to \"how that gets set\". If an implementation choses to set the \"OperationalStatus\" explicitly without LED,  that is still fine.. Redfish will just go by OperationalStatus and not by LED state.\n\nYou\u0027ve said the way the OperationalStatus gets updated is via the LED design.  What am I missing?  If we continue down this path, there will be no implementation where OperationalStatus is set correctly without your LED application, right?\n\n----\n\n\u003e\u003e This is fairly unique to your system design, I suspect.  But, again, why doesn\u0027t the Fan(*) code know that we\u0027ve started a new power on and to retry all hardware?  I don\u0027t see anything in this proposed use-case that requires LEDs to be involved directly.\n\n\u003e Sure.. May be it\u0027s an IBM need. But a usecase that IBM need to support. However, it does not break any other implementations that don\u0027t want to tie LED to OperationalStatus.\n\nI\u0027m not sure what you\u0027re getting at here.  You can also implement this use case via the method I proposed without this cumbersome cyclic dependency between LED and \"the owner of the OperationalStatus\".\n\n----\n\n\u003e\u003e This really sounds like a legacy API which was previously poorly designed and now you\u0027re trying to shoehorn in.  If your hypervisor detects an error on a PCIe slot, why wouldn\u0027t they tell you they detected an error on the PCIe slot rather than a round-about way of telling you that by asking you to turn on an LED?  \n\n\u003e Well, we have debated this really well within IBM. However, what we have is what we all agreed to pursue. One of the reasoning is that , all the change about using Redfish etc are all internal to BMC. That should not cause an upper layer to do differently __because__ the underlying BMC implementation changed to using OpenBMC. Upper layers like Power Hypervisor , AIX, I5OS don\u0027t really care.\n\nI think you missed what I was trying to say.  Changing your interface to your hypervisor is your business and not what I was suggesting.\n\nIf \"Hypervisor requests to light LED\" really means \"Hypervisor detected issue with PCIe slot\", which is what your original use case suggested, then there is no reason *on the BMC* to have this have anything to do with LEDs.  Set the OperationalStatus directly and the LEDs become a side-effect.",
      "parentUuid": "703471eb_b3054e41",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 81,
        "endChar": 22
      },
      "revId": "646bf1219a00dba8b30c3cdcbc64e3e144f97050",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}