{
  "comments": [
    {
      "key": {
        "uuid": "9f45cd8b_8e30c574",
        "filename": "designs/u-boot-env-mgr.md",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2019-08-01T05:35:13Z",
      "side": 1,
      "message": "Given you\u0027re proposing a D-Bus interface here, maybe it\u0027s best to use a D-Bus type string to describe the structure?",
      "range": {
        "startLine": 35,
        "startChar": 40,
        "endLine": 35,
        "endChar": 61
      },
      "revId": "1756074463484d3b18206aee91b5e80e14bb7021",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07d11e3b_2b47515f",
        "filename": "designs/u-boot-env-mgr.md",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2019-08-18T05:00:26Z",
      "side": 1,
      "message": "Hi Andrew, can you explain here, what do you meant by D-Bus type string here?\nbasically it will be return dictionary of [string,string].",
      "parentUuid": "9f45cd8b_8e30c574",
      "range": {
        "startLine": 35,
        "startChar": 40,
        "endLine": 35,
        "endChar": 61
      },
      "revId": "1756074463484d3b18206aee91b5e80e14bb7021",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "950e5022_186c5a68",
        "filename": "designs/u-boot-env-mgr.md",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2019-08-26T02:39:54Z",
      "side": 1,
      "message": "I was suggesting you use the type strings from the specification:\n\nhttps://dbus.freedesktop.org/doc/dbus-specification.html#basic-types\n\nIn this case you want a DICT_ENTRY of strings, so it would be \"{ss}\".",
      "parentUuid": "07d11e3b_2b47515f",
      "range": {
        "startLine": 35,
        "startChar": 40,
        "endLine": 35,
        "endChar": 61
      },
      "revId": "1756074463484d3b18206aee91b5e80e14bb7021",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0a65dda_3f81e1c4",
        "filename": "designs/u-boot-env-mgr.md",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2019-08-26T15:20:11Z",
      "side": 1,
      "message": "yes, was representing the same using DICT[string, string], the way it is represented in our D-Bus interface yaml file",
      "parentUuid": "950e5022_186c5a68",
      "range": {
        "startLine": 35,
        "startChar": 40,
        "endLine": 35,
        "endChar": 61
      },
      "revId": "1756074463484d3b18206aee91b5e80e14bb7021",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3b09b8b_ba79234d",
        "filename": "designs/u-boot-env-mgr.md",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2019-10-13T23:55:21Z",
      "side": 1,
      "message": "Okay, maybe I haven\u0027t paid enough attention to the yaml files.",
      "parentUuid": "c0a65dda_3f81e1c4",
      "range": {
        "startLine": 35,
        "startChar": 40,
        "endLine": 35,
        "endChar": 61
      },
      "revId": "1756074463484d3b18206aee91b5e80e14bb7021",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c63531e_3deb87aa",
        "filename": "designs/u-boot-env-mgr.md",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-07-13T21:31:06Z",
      "side": 1,
      "message": "I have a concern that vital variables like \"root\" would be exposed to be written with unsupported values (maybe by a code bug in the app) leaving the bmc unable to boot. Could we add some kind of whitelist or read-only feature to the design to prevent certain variables from being written?",
      "revId": "1756074463484d3b18206aee91b5e80e14bb7021",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4671f645_f7af9ac6",
        "filename": "designs/u-boot-env-mgr.md",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2019-07-15T17:00:59Z",
      "side": 1,
      "message": "yes we can, based on the need say a blacklist, where anything in the blacklist will not be updated. \nNote: This daemon is not user interfacing application, and whitelist / blacklist must be implemented in the user interfacing application (which i assume will be none). \nLet me know",
      "parentUuid": "9c63531e_3deb87aa",
      "revId": "1756074463484d3b18206aee91b5e80e14bb7021",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58c44f55_d19d0090",
        "filename": "designs/u-boot-env-mgr.md",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-07-16T19:08:23Z",
      "side": 1,
      "message": "Ok that clarification that the daemon is not user interfacing helps. Thanks.",
      "parentUuid": "4671f645_f7af9ac6",
      "revId": "1756074463484d3b18206aee91b5e80e14bb7021",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e464a75_3861b1b0",
        "filename": "designs/u-boot-env-mgr.md",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2019-10-13T23:55:21Z",
      "side": 1,
      "message": "I disagree with the idea that we should protect the BMC from itself. If something wants to write the root property it should be able to, but whatever it is needs to understand the risk of doing so.",
      "parentUuid": "58c44f55_d19d0090",
      "revId": "1756074463484d3b18206aee91b5e80e14bb7021",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0917fc00_e3cb6d15",
        "filename": "designs/u-boot-env-mgr.md",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2019-08-01T05:35:13Z",
      "side": 1,
      "message": "Why not just use the generic properties interface?\n\nhttps://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-properties",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "1756074463484d3b18206aee91b5e80e14bb7021",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3427a598_5e219941",
        "filename": "designs/u-boot-env-mgr.md",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2019-08-18T05:00:26Z",
      "side": 1,
      "message": "Didn\u0027t used the properties interfaces for the following reason.\n1. U-Boot param will not be constant\n2. Number of parameters differ from vendor to vendor\n3. GetAll will be ultimately used, hence the same is done through method specific interface.\nLet me know if you think any other advantage over properties interface, if needed can introduce the same.",
      "parentUuid": "0917fc00_e3cb6d15",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "1756074463484d3b18206aee91b5e80e14bb7021",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a734cb34_8a3ac1f4",
        "filename": "designs/u-boot-env-mgr.md",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2019-08-26T02:39:54Z",
      "side": 1,
      "message": "\u003e Didn\u0027t used the properties interfaces for the following reason.\n\nOkay, if you have reasons for not doing it some way you should outline them either here in the document or in the Alternatives Considered section. That way we have your complete reasoning for taking a particular direction captured, which is a primary goal of the design documents.\n\n\u003e 1. U-Boot param will not be constant\n\u003e 2. Number of parameters differ from vendor to vendor\n\nCan you explain why you think these two points are problematic?\n\n\u003e 3. GetAll will be ultimately used, hence the same is done through method specific interface.\n\nI don\u0027t follow this last point. The standard interface defines a GetAll() method, why can\u0027t that be used?\n\nEssentially I don\u0027t see why we can\u0027t have \"dynamic\" properties (i.e. properties added to the object on the fly based on the content of the u-boot environment). It\u0027s all just code, you just need to accept writes to variables that might not yet exist, and issue a PropertiesChanged event when any variables are written. GetAll() will give the user the complete set of properties, and if they know a particular one exists they can just use the Get() interface.\n\nThis makes it all very standard to interact with from the client side, especially from the perspective of receiving signals when specific properties are updated.",
      "parentUuid": "3427a598_5e219941",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "1756074463484d3b18206aee91b5e80e14bb7021",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b7dba77_2aafbb4d",
        "filename": "designs/u-boot-env-mgr.md",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2019-08-26T15:20:11Z",
      "side": 1,
      "message": "1. Our regular sdbusplus code doesn\u0027t support adding dynamic property directly (if needed, the underlying code needs to be written). Note: sdbusplus asio (async) model supports the same, and it is easier to implement dynamic properties. \nBut the problem will be writing generic code / handler for the same. \nHaving said that one, yes, we can go ahead and extend the same as part of extension, such that this will be exposed (Actually, i want to expose all param\u0027s as property and based on file io monitor on the mtd partition, the update can be captured and accordingly, signals can be sent out). But didn\u0027t do it in the first round, concerning the community feedback on the same. \nAs i see some interest, can submit a separate update review on this document, to include the same. But want to keep both, as implementars will be allowed to choose either one or both.",
      "parentUuid": "a734cb34_8a3ac1f4",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "1756074463484d3b18206aee91b5e80e14bb7021",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03b86602_814baa91",
        "filename": "designs/u-boot-env-mgr.md",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2019-10-13T23:55:21Z",
      "side": 1,
      "message": "Code needs to be written either way. One approach provides a standard interface to dbus properties while the other requires we maintain the interface and implementation ourselves. I think it\u0027s beneficial to do the work necessary to support dynamic properties that can be fetched with GetAll().",
      "parentUuid": "1b7dba77_2aafbb4d",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "1756074463484d3b18206aee91b5e80e14bb7021",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}