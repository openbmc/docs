{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "54e6e498_cd327c68",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2024-05-21T18:02:37Z",
      "side": 1,
      "message": "I like the overall proposal. A more defined error structure and tying that into bmcweb/redfish will be very nice.",
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98f67912_09a6dc94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-21T20:47:47Z",
      "side": 1,
      "message": "Overall, I\u0027m in full support of getting one implementation that meets all requirements.  With that as the goal, I think this design misses some key requirements that need added.\n\n1. Logging should be performant.  Jason enumerated some basic starting points for performance characteristics and number of logs that at the time the logging systems deviated couldn\u0027t be met by phosphor-logging on an ast2500.  We should probably enumerate those same targets as part of the testing here.  I know Patrick has said he has data that shows that those performance problems no longer occur, and I haven\u0027t done my own analysis in a long time.  I suspect this can be as easy as loading 10000 unique log entries and measure the redfish LogEntryCollection response time, as well as the IPMI SEL write time when writing those entries, and the measuring the mapper memory usage, introspect response time for phosphor-logging, as well as startup time.\n\nGiven that we already have both implementations in bmcweb and ipmid, this should be an easy question to answer, and if we need performance improvements, I\u0027d really like to see them made ahead of trying to do this combinatorial effort, so we don\u0027t have regressions.\n\n2. We need to solve the \"Everyone wants their own registry\" problem, as well as the \"Organizations outside of OpenBMC publish registries we want to be compatible with\" problem in this design.  This is eluded to a little in the fact that this design clearly doesn\u0027t want to implement the Intel-specific registry entries that were added in the past, to which I would wholeheartedly agree, but this isn\u0027t a unique problem to Intel/OpenBMC registries.  OCP, DMTF, and other sub-organizations publish OCP registries for which OpenBMC will want to implement a few messages from, identically to what\u0027s happening on the existing registry.\n\nSaying we\u0027re just going to break all client implementations in a year seems really heavy handed, and would lead to individual platforms not being upgraded to new versions because compatibility guarantees of redfish were broken.  Regardless of whether Intel agrees to that or not, we should solve the problem of Registry ownership and namespacing.  I suspect that there\u0027s a better migration path there, that likely involves some level of Intel putting the Intel-specific events into an intel-specific registry, and the this design being modified to support two important requirements: creation of multiple registry namespaces (possibly via a bmcweb meson option, or bmcweb checking for installed registries), and message ID sharing (ie, the same ID can exist in multiple registries).  If we don\u0027t add these things to the design, we\u0027re just swapping one registry that a subset of implementers don\u0027t like for another registry that a subset of implementers don\u0027t like.\n\n3. Eventing.  The phosphor-logging implementation in bmcweb doesn\u0027t support EventService, the rsyslog based ones do.  https://github.com/openbmc/bmcweb/blob/5ec22842d0d61380809d8e9cdfbc692c14c32cab/redfish-core/include/event_service_manager.hpp#L1197\n\nI see no mention of adding that support in this unification effort, nor do I know of any attempt to add them in the past.  I suspect there are implementations that live in forks, but those need someone to start pushing the patches to make that reality before this design can be approved.\n\n4. Support for log paging (by avoiding pulling in all entries to find only the latest entry)\nhttps://github.com/openbmc/bmcweb/blob/5ec22842d0d61380809d8e9cdfbc692c14c32cab/redfish-core/lib/log_services.hpp#L1553\nThe rsyslog based solution supports this, the phosphor-logging solution does not.  This is somewhat adjacent to #1, given it\u0027s a client-side optimization, but I call it out specifically because it would have a user-facing impact if we remove support for paging;  As is, one API supports paging, one doesn\u0027t.\n\n\nCertainly different implementations will have disagreements over what registries to publish, and this design glosses over that fact, but we\u0027ve made it clear in the past that directly copying Redfish definitions into phosphor-dbus-interfaces is not a good thing to do.  In addition, as documented in https://github.com/openbmc/bmcweb/blob/master/OEM_SCHEMAS.md#oem-compatibility-and-authority, the point of Redfish is to provide compatibility between implementations, including outside of openbmc.  If a system wants an openbmc-specific implementation, there\u0027s always dbus-rest, which faithfully publishes the existing phosphor-logging system with eventing that folks can use to meet these requirements trivially, and in a way that doesn\u0027t require any conversion.\n\nRedfish exists in an odd middle ground where:\n- The protocol and schema spec is not owned by OpenBMC.\n- Multiple DMTF corporate members are working on adding new feature support in OpenBMC, based on the existing working groups structure.  \n- Development time for new systems is critical, and possibly can\u0027t wait for a DMTF rollout, and needs an intermediate ground for development that can be maintained.\n\nIf there are Redfish events that are TRULY common amongst all systems, they should go in a DMTF standard registry;  If the messages are OpenBMC specific, they need to be selectable at build time given the wide variety of places that OpenBMC is deployed.\n\nIn terms of final user facing output, what I\u0027d like to see is:\n\n1. Individual end-platforms, SOC components, and organizations can enumerate their own versioned, namespaced message registries.\n2. Message logging in code isn\u0027t duplicated per-company/organization/registry/logging implementation.\n3. Components within OpenBMC can implement upstream, and in a way that doesn\u0027t burden bmcweb or other component maintainers, an OCP or DMTF created message registry implementation that\u0027s selectable, versionable, and able to be implemented\n4. The common implementation should be able to hit everyones performance targets and features.\n\n\n\nAs written, I don\u0027t see this design getting there.  In terms of next steps, I\u0027d suggest that we:\n1. Write down the performance numbers, and get on the same page on what the current numbers are for each implementation.  (some scripts that folks can run across the various SOCs in openbmc-tools would be ideal)\n2. Enumerate the existing user-facing features on each implementation, and how we intend to not break them using this new design.  If we intend to explicitly break user-facing APIs, I don\u0027t see how that benefits the project overall.\n3. Regroup, and get this doc written with user/behavior facing impacts more filled out, some solutions for the above additional features, and see where we can get commonality in implementations.\n4. Determine how we plan to handle registries that we don\u0027t own.  As is, these are self contained within the bmcweb codebase, but if we\u0027re moving their definitions out, we need a design that can enumerate multiple registries.",
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa732715_fe18d1cf",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-28T22:06:01Z",
      "side": 1,
      "message": "where",
      "range": {
        "startLine": 28,
        "startChar": 29,
        "endLine": 28,
        "endChar": 33
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e96ed3f_c8e9c16f",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-28T22:06:01Z",
      "side": 1,
      "message": "This shows a symbolic link when clicked on in readable view. Probably you need to link the actual schema path, may be, https://github.com/openbmc/bmcweb/blob/master/redfish-core/schema/dmtf/json-schema/LogEntry.v1_16_0.json?",
      "range": {
        "startLine": 93,
        "startChar": 2,
        "endLine": 93,
        "endChar": 100
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77dea7cb_fc64df65",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 164,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-28T22:06:01Z",
      "side": 1,
      "message": "Would it be possible to link some example code here as this seems to be the actual problem statement?",
      "range": {
        "startLine": 162,
        "startChar": 10,
        "endLine": 164,
        "endChar": 23
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebf3e85e_f802613f",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 380,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-05-20T21:31:23Z",
      "side": 1,
      "message": "Is the Message property still going to have the same generated format?  e.g. xyz.openbmc_project.Sensor.Error.ReadFailure?",
      "range": {
        "startLine": 378,
        "startChar": 0,
        "endLine": 380,
        "endChar": 53
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c2e2dea_61a6ecf6",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 619,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-05-20T21:31:23Z",
      "side": 1,
      "message": "What do you mean by this?",
      "range": {
        "startLine": 618,
        "startChar": 20,
        "endLine": 619,
        "endChar": 31
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e70af41_ddf642d3",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 621,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-05-20T21:31:23Z",
      "side": 1,
      "message": "by defining new yaml files in a forked phosphor-dbus-interfaces?",
      "range": {
        "startLine": 620,
        "startChar": 50,
        "endLine": 621,
        "endChar": 60
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edcb889d_815d0676",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 629,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-05-20T21:31:23Z",
      "side": 1,
      "message": "so if someone has a downstream version of a repo and adds a downstream only error, what do they do?  Make a new yaml file in their forked PDI?",
      "range": {
        "startLine": 626,
        "startChar": 43,
        "endLine": 629,
        "endChar": 46
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38406821_14c96bd8",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 641,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-05-20T21:31:23Z",
      "side": 1,
      "message": "good, it was always confusing.",
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6874d9a_50822b91",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 641,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2024-05-21T18:02:37Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "38406821_14c96bd8",
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3443dad3_c38bf4f1",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 666,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2024-05-21T18:02:37Z",
      "side": 1,
      "message": "The Report() interface would look the same? (when someone wants to just log an error, not throw it). Also, the event interface would use the same Report API?",
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}