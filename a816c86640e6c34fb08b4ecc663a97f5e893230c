{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "54e6e498_cd327c68",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2024-05-21T18:02:37Z",
      "side": 1,
      "message": "I like the overall proposal. A more defined error structure and tying that into bmcweb/redfish will be very nice.",
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98f67912_09a6dc94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-05-21T20:47:47Z",
      "side": 1,
      "message": "Overall, I\u0027m in full support of getting one implementation that meets all requirements.  With that as the goal, I think this design misses some key requirements that need added.\n\n1. Logging should be performant.  Jason enumerated some basic starting points for performance characteristics and number of logs that at the time the logging systems deviated couldn\u0027t be met by phosphor-logging on an ast2500.  We should probably enumerate those same targets as part of the testing here.  I know Patrick has said he has data that shows that those performance problems no longer occur, and I haven\u0027t done my own analysis in a long time.  I suspect this can be as easy as loading 10000 unique log entries and measure the redfish LogEntryCollection response time, as well as the IPMI SEL write time when writing those entries, and the measuring the mapper memory usage, introspect response time for phosphor-logging, as well as startup time.\n\nGiven that we already have both implementations in bmcweb and ipmid, this should be an easy question to answer, and if we need performance improvements, I\u0027d really like to see them made ahead of trying to do this combinatorial effort, so we don\u0027t have regressions.\n\n2. We need to solve the \"Everyone wants their own registry\" problem, as well as the \"Organizations outside of OpenBMC publish registries we want to be compatible with\" problem in this design.  This is eluded to a little in the fact that this design clearly doesn\u0027t want to implement the Intel-specific registry entries that were added in the past, to which I would wholeheartedly agree, but this isn\u0027t a unique problem to Intel/OpenBMC registries.  OCP, DMTF, and other sub-organizations publish OCP registries for which OpenBMC will want to implement a few messages from, identically to what\u0027s happening on the existing registry.\n\nSaying we\u0027re just going to break all client implementations in a year seems really heavy handed, and would lead to individual platforms not being upgraded to new versions because compatibility guarantees of redfish were broken.  Regardless of whether Intel agrees to that or not, we should solve the problem of Registry ownership and namespacing.  I suspect that there\u0027s a better migration path there, that likely involves some level of Intel putting the Intel-specific events into an intel-specific registry, and the this design being modified to support two important requirements: creation of multiple registry namespaces (possibly via a bmcweb meson option, or bmcweb checking for installed registries), and message ID sharing (ie, the same ID can exist in multiple registries).  If we don\u0027t add these things to the design, we\u0027re just swapping one registry that a subset of implementers don\u0027t like for another registry that a subset of implementers don\u0027t like.\n\n3. Eventing.  The phosphor-logging implementation in bmcweb doesn\u0027t support EventService, the rsyslog based ones do.  https://github.com/openbmc/bmcweb/blob/5ec22842d0d61380809d8e9cdfbc692c14c32cab/redfish-core/include/event_service_manager.hpp#L1197\n\nI see no mention of adding that support in this unification effort, nor do I know of any attempt to add them in the past.  I suspect there are implementations that live in forks, but those need someone to start pushing the patches to make that reality before this design can be approved.\n\n4. Support for log paging (by avoiding pulling in all entries to find only the latest entry)\nhttps://github.com/openbmc/bmcweb/blob/5ec22842d0d61380809d8e9cdfbc692c14c32cab/redfish-core/lib/log_services.hpp#L1553\nThe rsyslog based solution supports this, the phosphor-logging solution does not.  This is somewhat adjacent to #1, given it\u0027s a client-side optimization, but I call it out specifically because it would have a user-facing impact if we remove support for paging;  As is, one API supports paging, one doesn\u0027t.\n\n\nCertainly different implementations will have disagreements over what registries to publish, and this design glosses over that fact, but we\u0027ve made it clear in the past that directly copying Redfish definitions into phosphor-dbus-interfaces is not a good thing to do.  In addition, as documented in https://github.com/openbmc/bmcweb/blob/master/OEM_SCHEMAS.md#oem-compatibility-and-authority, the point of Redfish is to provide compatibility between implementations, including outside of openbmc.  If a system wants an openbmc-specific implementation, there\u0027s always dbus-rest, which faithfully publishes the existing phosphor-logging system with eventing that folks can use to meet these requirements trivially, and in a way that doesn\u0027t require any conversion.\n\nRedfish exists in an odd middle ground where:\n- The protocol and schema spec is not owned by OpenBMC.\n- Multiple DMTF corporate members are working on adding new feature support in OpenBMC, based on the existing working groups structure.  \n- Development time for new systems is critical, and possibly can\u0027t wait for a DMTF rollout, and needs an intermediate ground for development that can be maintained.\n\nIf there are Redfish events that are TRULY common amongst all systems, they should go in a DMTF standard registry;  If the messages are OpenBMC specific, they need to be selectable at build time given the wide variety of places that OpenBMC is deployed.\n\nIn terms of final user facing output, what I\u0027d like to see is:\n\n1. Individual end-platforms, SOC components, and organizations can enumerate their own versioned, namespaced message registries.\n2. Message logging in code isn\u0027t duplicated per-company/organization/registry/logging implementation.\n3. Components within OpenBMC can implement upstream, and in a way that doesn\u0027t burden bmcweb or other component maintainers, an OCP or DMTF created message registry implementation that\u0027s selectable, versionable, and able to be implemented\n4. The common implementation should be able to hit everyones performance targets and features.\n\n\n\nAs written, I don\u0027t see this design getting there.  In terms of next steps, I\u0027d suggest that we:\n1. Write down the performance numbers, and get on the same page on what the current numbers are for each implementation.  (some scripts that folks can run across the various SOCs in openbmc-tools would be ideal)\n2. Enumerate the existing user-facing features on each implementation, and how we intend to not break them using this new design.  If we intend to explicitly break user-facing APIs, I don\u0027t see how that benefits the project overall.\n3. Regroup, and get this doc written with user/behavior facing impacts more filled out, some solutions for the above additional features, and see where we can get commonality in implementations.\n4. Determine how we plan to handle registries that we don\u0027t own.  As is, these are self contained within the bmcweb codebase, but if we\u0027re moving their definitions out, we need a design that can enumerate multiple registries.",
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "619a0e65_90b6638f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-30T17:58:39Z",
      "side": 1,
      "message": "(There is a lot here so I might have missed some.  I think I\u0027ve responded to most of the highlights in the document also but I\u0027ll try to respond to parts here also.)\n\n\u003e Logging should be performant.\n\nI will address this by adding a compile option that turns `lg2::commit` into an `OPENBMC_MESSAGE_ID` record in the journal and bypass `phosphor-logging` (and add support in rsyslog config / bmcweb).  This allows effectively seamless transition for systems leveraging the rsyslog path today.\n\nI\u0027m trying to decouple the \"phosphor-logging might have performance problems\" from \"get a consistent API people can code to for logging and reporting a wider class of issues\".\n\n\u003e We need to solve the \"Everyone wants their own registry\" problem\n\nI tried to solve this in the design already, so I must be either missing your concern or poorly communicating.  There are some options in the design:\n\n1. Participants in OpenBMC can add `com.company` events in `phosphor-dbus-interfaces`.  These are most useful for script-generated events, IPMI/PLDM OEM events, etc.  Maybe these are useful for the OEM sections of `phosphor-debug-collector` also.  I think we wouldn\u0027t have `dbus-sensors`, as an example, create these.\n\n2. Downstream systems can create their own `phosphor-dbus-interfaces` style repository to hold their own downstream events; part of this will be having their own identifier.\n\n3. There is a `redfish-mapping` keyword in the YAML definition that allows translation of an internal BMC event to an existing external Redfish Message Registry record.\n\n\u003e Eventing\n\nI wasn\u0027t aware of this implementation.  Thanks for pointing it out.  I\u0027ll add it to the `bmcweb` section (and general design requirements).\n\n\u003e Support for log paging\n\nWill also add this.\n\n\u003e If the messages are OpenBMC specific, they need to be selectable at build time given the wide variety of places that OpenBMC is deployed.\n\nI tried to cover this with the following requirement:\n\n```\n - The implementation must have a mechanism for vendors to be able to disable\n    specific tracing events to conform to their own system design requirements.\n```\n\nIs this what you had in mind or something else?\n\n\u003e If a system wants an openbmc-specific implementation, there\u0027s always dbus-rest, which faithfully publishes the existing phosphor-logging system with eventing that folks can use to meet these requirements trivially, and in a way that doesn\u0027t require any conversion.\n\nI don\u0027t understand how this is an acceptable solution on a number of counts.\n\n* We already have an OpenBMC message registry and someone worked with DMTF to get it so OpenBMC is a valid prefix (even though we don\u0027t own openbmc.com).  We\u0027ve therefore already concluded that an \"openbmc-specfic registry\" is perfectly acceptable?\n\n* dbus-rest has known security issues and is not standardized.  At least Redfish LogEntry (and everything else we gain from using the bmcweb implementation of Redfish) is standardized.\n\n* We already have a phosphor-logging to Redfish translation; all I\u0027m proposing is making it better, right?\n\n\u003e In terms of final user facing output, what I\u0027d like to see is:\n\u003e Individual end-platforms, SOC components, and organizations can enumerate their own versioned, namespaced message registries.\n\u003e Message logging in code isn\u0027t duplicated per-company/organization/registry/logging implementation.\n\u003e Components within OpenBMC can implement upstream, and in a way that doesn\u0027t burden bmcweb or other component maintainers, an OCP or DMTF created message registry implementation that\u0027s selectable, versionable, and able to be implemented\n\u003e The common implementation should be able to hit everyones performance targets and features.\n\nMy belief is, with updates, I\u0027ve covered all of this.  I\u0027m willing to incorporate adds and follow-ons where there are gaps though.\n\n\u003e As written, I don\u0027t see this design getting there. In terms of next steps, I\u0027d suggest that we:\n\nWhat are the timelines for making that happen and are others willing to invest time to participate in this?  As written, it feels like a lot of \"committee work\" that will take a long time to execute on.\n\nI\u0027m currently looking at this design as my primary development focus here for the next few months.  My feeling is that my proposal here is a huge step in the right direction, but I\u0027m not deluded enough to believe it is going to be perfect in the first iteration.\n\nRight now we are effectively at an impasse.  Some maintainers have rejected `REDFISH_MESSAGE_ID`; some maintainers have rejected `phosphor-logging`.  I don\u0027t see any way someone can design a computer system that is able to be serviced with the status quo.  As we\u0027ve worked through the Yosemite4 design there are a lot of serviceability gaps where in the \"Facebook OpenBMC\" we would have just inserted some random print statement (ala REDFISH_MESSAGE_ID) and my impression is that that won\u0027t be accepted across the board.  I\u0027m attempted to move us past the impasse.\n\nAre there any one-way doors in this design that we can identify?  If there are, I\u0027d like to have us assess those and understand what the risk is and how we can mitigate it.  If there aren\u0027t any one-way doors, unless there is a better proposal and manpower backing it, is there anything that should preclude us from starting in this direction?",
      "parentUuid": "98f67912_09a6dc94",
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa732715_fe18d1cf",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-28T22:06:01Z",
      "side": 1,
      "message": "where",
      "range": {
        "startLine": 28,
        "startChar": 29,
        "endLine": 28,
        "endChar": 33
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2658769_ccdaddb3",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-30T17:58:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa732715_fe18d1cf",
      "range": {
        "startLine": 28,
        "startChar": 29,
        "endLine": 28,
        "endChar": 33
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e96ed3f_c8e9c16f",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-28T22:06:01Z",
      "side": 1,
      "message": "This shows a symbolic link when clicked on in readable view. Probably you need to link the actual schema path, may be, https://github.com/openbmc/bmcweb/blob/master/redfish-core/schema/dmtf/json-schema/LogEntry.v1_16_0.json?",
      "range": {
        "startLine": 93,
        "startChar": 2,
        "endLine": 93,
        "endChar": 100
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d13e11db_6e50cd81",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-30T17:58:39Z",
      "side": 1,
      "message": "Interesting...\n\nI converted it to a permalink then to the file you mentioned (as master changes over time this version is likely to change).",
      "parentUuid": "4e96ed3f_c8e9c16f",
      "range": {
        "startLine": 93,
        "startChar": 2,
        "endLine": 93,
        "endChar": 100
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77dea7cb_fc64df65",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 164,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-05-28T22:06:01Z",
      "side": 1,
      "message": "Would it be possible to link some example code here as this seems to be the actual problem statement?",
      "range": {
        "startLine": 162,
        "startChar": 10,
        "endLine": 164,
        "endChar": 23
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fe9b3ed_5242a470",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 164,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-30T17:58:39Z",
      "side": 1,
      "message": "I assume these \"code examples\" are contained in private repositories that various companies have.  All of the ones I\u0027m aware of at Meta are...\n\nKeep in mind that these are all assumed to be software running outside of the BMC.  The BMC wouldn\u0027t use the Redfish events itself for internal interactions.",
      "parentUuid": "77dea7cb_fc64df65",
      "range": {
        "startLine": 162,
        "startChar": 10,
        "endLine": 164,
        "endChar": 23
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebf3e85e_f802613f",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 380,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-05-20T21:31:23Z",
      "side": 1,
      "message": "Is the Message property still going to have the same generated format?  e.g. xyz.openbmc_project.Sensor.Error.ReadFailure?",
      "range": {
        "startLine": 378,
        "startChar": 0,
        "endLine": 380,
        "endChar": 53
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a0c44f4_1194e065",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 380,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-30T17:58:39Z",
      "side": 1,
      "message": "I was expecting similar format, but hadn\u0027t decided if exact or similar was required.  Do you have an opinion one way or the other?\n\nIf the \"new events\" are obviously different than the \"old events\", it makes it easier for bmcweb to be able to know if the transformation to the Redfish event can be done successfully.  But, I can see how if you already have external code that relies on the \"old event\" names you might prefer they are left alone.\n\nI think this is similar to Ed\u0027s question about what do we do with the existing \"OpenBMC\" registry.",
      "parentUuid": "ebf3e85e_f802613f",
      "range": {
        "startLine": 378,
        "startChar": 0,
        "endLine": 380,
        "endChar": 53
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82e481af_c1452211",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 380,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-07-01T12:30:21Z",
      "side": 1,
      "message": "Matt: do you require it to have the same name or not?\n\nI know there are already error references in the method / property definitions.  I could make these work either way.",
      "parentUuid": "5a0c44f4_1194e065",
      "range": {
        "startLine": 378,
        "startChar": 0,
        "endLine": 380,
        "endChar": 53
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0bda92a6_fe7eb7cb",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 380,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-07-01T21:21:41Z",
      "side": 1,
      "message": "No, I don\u0027t think they need to stay the same.  The other code that cares is just other openbmc code that could change as well, as long as it knows what to change to.",
      "parentUuid": "82e481af_c1452211",
      "range": {
        "startLine": 378,
        "startChar": 0,
        "endLine": 380,
        "endChar": 53
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91cac877_1834772f",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 521,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2024-05-29T12:19:01Z",
      "side": 1,
      "message": "I have a question:\n\nHow will redfish-mapping help point to a Redfish resource using the object path?\n\nI\u0027m trying to understand how the following Redfish message registries will work with this design:\n\n- PropertyValueResourceConflict\n- ResourceCreationConflict\n\nDo we need to define the interface of an object to transform it into an external interface resource like Redfish?",
      "range": {
        "startLine": 521,
        "startChar": 29,
        "endLine": 521,
        "endChar": 40
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb764906_6f1f67f9",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 521,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-30T17:58:39Z",
      "side": 1,
      "message": "Later in the doc I wrote this:\n\n\u003e 4. A mechanism should be implemented to translate DBus `object_path` references\n   to Redfish Resource URIs. When an `object_path` cannot be translated,\n   `bmcweb` will use a prefix such as `object_path:` in the `MessageArgs` value.\n   \nIf we want an internal BMC error to map to these particular Redfish messages, we would need a corresponding internal event defined (in the YAML format) with the same properties as those required by the Redfish event.  Then we would use the `redfish-mapping: Base.PropertyValueResourceConflict` on that internal event definition as the hint that bmcweb should turn the internal event into that pre-defined Redfish event.",
      "parentUuid": "91cac877_1834772f",
      "range": {
        "startLine": 521,
        "startChar": 29,
        "endLine": 521,
        "endChar": 40
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c2e2dea_61a6ecf6",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 619,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-05-20T21:31:23Z",
      "side": 1,
      "message": "What do you mean by this?",
      "range": {
        "startLine": 618,
        "startChar": 20,
        "endLine": 619,
        "endChar": 31
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9bb1edab_e7fb832b",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 619,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-30T17:58:39Z",
      "side": 1,
      "message": "If you want to make your own errors downstream you cannot use \"OpenBMC\" as the Redfish Message Registry prefix.  You should use \"IBM...\".",
      "parentUuid": "5c2e2dea_61a6ecf6",
      "range": {
        "startLine": 618,
        "startChar": 20,
        "endLine": 619,
        "endChar": 31
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e70af41_ddf642d3",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 621,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-05-20T21:31:23Z",
      "side": 1,
      "message": "by defining new yaml files in a forked phosphor-dbus-interfaces?",
      "range": {
        "startLine": 620,
        "startChar": 50,
        "endLine": 621,
        "endChar": 60
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d4891fd_fc0c50f4",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 621,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-30T17:58:39Z",
      "side": 1,
      "message": "No, by adding new yaml files in their own downstream repository.\n\nAdded a few statements throughout.",
      "parentUuid": "6e70af41_ddf642d3",
      "range": {
        "startLine": 620,
        "startChar": 50,
        "endLine": 621,
        "endChar": 60
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48d31000_fd44d0b4",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 621,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-07-01T12:30:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2d4891fd_fc0c50f4",
      "range": {
        "startLine": 620,
        "startChar": 50,
        "endLine": 621,
        "endChar": 60
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edcb889d_815d0676",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 629,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-05-20T21:31:23Z",
      "side": 1,
      "message": "so if someone has a downstream version of a repo and adds a downstream only error, what do they do?  Make a new yaml file in their forked PDI?",
      "range": {
        "startLine": 626,
        "startChar": 43,
        "endLine": 629,
        "endChar": 46
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8753395_107dc057",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 629,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-30T17:58:39Z",
      "side": 1,
      "message": "Clarified.",
      "parentUuid": "edcb889d_815d0676",
      "range": {
        "startLine": 626,
        "startChar": 43,
        "endLine": 629,
        "endChar": 46
      },
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38406821_14c96bd8",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 641,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-05-20T21:31:23Z",
      "side": 1,
      "message": "good, it was always confusing.",
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6874d9a_50822b91",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 641,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2024-05-21T18:02:37Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "38406821_14c96bd8",
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3443dad3_c38bf4f1",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 666,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2024-05-21T18:02:37Z",
      "side": 1,
      "message": "The Report() interface would look the same? (when someone wants to just log an error, not throw it). Also, the event interface would use the same Report API?",
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efd4fbab_e710ce08",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 666,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-30T17:58:39Z",
      "side": 1,
      "message": "Added a clarifying sentence here and in other places about no-throw contexts.  You could alternatively called `Example(...).commit()`.",
      "parentUuid": "3443dad3_c38bf4f1",
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1e755ed_f666c333",
        "filename": "designs/event-logging.md",
        "patchSetId": 3
      },
      "lineNbr": 732,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-30T17:58:39Z",
      "side": 1,
      "message": "I\u0027m leaving comments in this section unaddressed currently.  There are likely aspects I don\u0027t fully grasp yet.",
      "revId": "a816c86640e6c34fb08b4ecc663a97f5e893230c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}