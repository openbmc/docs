{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "279225d0_8cf241f5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 48,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-06T15:33:42Z",
      "side": 1,
      "message": "Great!  Can\u0027t wait to see what you do with those repos.",
      "revId": "f12ca4f8d26bed50710d0edbfb68a0cfa740e313",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b122dbbf_f3835339",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 48,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-10-18T15:44:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "279225d0_8cf241f5",
      "revId": "f12ca4f8d26bed50710d0edbfb68a0cfa740e313",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "365b1bae_60a22a34",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-06T15:33:42Z",
      "side": 1,
      "message": "I get that you don\u0027t want to do a major refactor without knowing the exact values, but without merged examples of this making a portion of the codebase better, it\u0027s really hard to approve a blanket value.\n\nAs written, if all of these checks were enabled on the repos, they\u0027d cause hundreds of errors in CI logs, which would cover up real failures and make reviews much more difficult.\n\nConsidering that the ipmbbridge refactor says in the commit message that it isn\u0027t recommended to be merged because it probably causes bugs, I\u0027m not sure how we would apply this to larger repos.\n\nAll in all, I\u0027m all for simplification, lets start working on the refactoring, and figure out what the tradeoff is in actual code that we can merge.  If we can confidently say \"setting the max line length to X results in better OpenBMC code\" and we have some merged reviews to back that up, that\u0027s fine.",
      "revId": "f12ca4f8d26bed50710d0edbfb68a0cfa740e313",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87e43e97_a1afe7bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-10-18T15:44:49Z",
      "side": 1,
      "message": "- to me it is obvious that these checks would help to improve the codebase.\n  Arriving at blanket values is easy, as some of them are suggested by \n  C++ Core Guidelines.\n\n- not advocating for enabling these as warnings across all openbmc repos.\n  Warnings that no one reads do not help. This patch is for \u0027docs\u0027 only\n  and should reflect an agreement in the community about how the code should look.\n  If and when to enable the warnings / hard errors would be something on a\n  per-repository basis.\n\n- putting mergeable refactorings as a requirement for arriving at some values\n  creates an incentive to refactor a \u0027little less trivial\u0027 project.\n  Large refactorings are very much bugprone without tests.\n  \n  Agreeing on some values and then starting with the smaller projects\n  would probably go much more smoothly.\n\n- there is almost no tradeoff. It simply results in better code.\n  The tradeoff is having to do a NOLINT once in a while.\n\n- if there is no consensus, then new and existing subprojects can\n  sprout functions of unbounded size, nesting and parameter count,\n  worsening the situation.",
      "parentUuid": "365b1bae_60a22a34",
      "revId": "f12ca4f8d26bed50710d0edbfb68a0cfa740e313",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8557fc5a_69550e7d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-18T17:00:59Z",
      "side": 1,
      "message": "The comments below make it clear that you don\u0027t intend to make this a global, all repos rule, so I don\u0027t think checking this in the docs repo is appropriate.  With that said, I think we have a set of starting values.  Lets start the refactoring work on the repos you listed and see how it goes with these settings.",
      "revId": "f12ca4f8d26bed50710d0edbfb68a0cfa740e313",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9928347b_d49a715d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-18T17:54:52Z",
      "side": 1,
      "message": "\u003e The comments below make it clear that you don\u0027t intend to make this a global, all repos rule, so I don\u0027t think checking this in the docs repo is appropriate.\n\nI\u0027m undecided on this statement.\n\nWith the .clang-format, we\u0027ve fully rolled that out across all the repos and the .clang-format is intended to be an unchanged \"apply to all repos\" reference.  We\u0027re not really there with .clang-tidy yet.  I do think it is valuable to have a \"if you\u0027re going to enable clang-tidy, this is a minimum of what you should strive to enable\" reference.  That\u0027s probably a lot better than the current approach which is that each repository has a different subset of clang-tidy tests enabled and configured differently.\n\nI think this is mostly an issue about being clear as to where we\u0027re currently at with clang-tidy and what the intended purpose of this reference copy is.",
      "parentUuid": "8557fc5a_69550e7d",
      "revId": "f12ca4f8d26bed50710d0edbfb68a0cfa740e313",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78b597ff_dff9d9b2",
        "filename": "style/cpp/.clang-tidy",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-06T15:33:42Z",
      "side": 1,
      "message": "What does this mean?  The default value isn\u0027t implemented?",
      "range": {
        "startLine": 14,
        "startChar": 58,
        "endLine": 15,
        "endChar": 69
      },
      "revId": "f12ca4f8d26bed50710d0edbfb68a0cfa740e313",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4cd9458_1ef6e7ad",
        "filename": "style/cpp/.clang-tidy",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-10-18T15:44:49Z",
      "side": 1,
      "message": "It means that clang-tidy apparently does not implement cyclomatic complexity.",
      "parentUuid": "78b597ff_dff9d9b2",
      "range": {
        "startLine": 14,
        "startChar": 58,
        "endLine": 15,
        "endChar": 69
      },
      "revId": "f12ca4f8d26bed50710d0edbfb68a0cfa740e313",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb8144c3_184bb296",
        "filename": "style/cpp/.clang-tidy",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-18T17:00:59Z",
      "side": 1,
      "message": "Gotcha.  so we just use the default here.",
      "parentUuid": "d4cd9458_1ef6e7ad",
      "range": {
        "startLine": 14,
        "startChar": 58,
        "endLine": 15,
        "endChar": 69
      },
      "revId": "f12ca4f8d26bed50710d0edbfb68a0cfa740e313",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}