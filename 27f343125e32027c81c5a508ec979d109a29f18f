{
  "comments": [
    {
      "key": {
        "uuid": "5446ab4c_ed00c694",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-09-11T21:01:17Z",
      "side": 1,
      "message": "Are you interested in a secondary golden flash to address hw failures on the primary chip, or are you looking to having a golden image even if it\u0027s in the same flash chip if size permits like in an eMMC? Sounds like we want to have a backup in case the primary image fails to boot? If that\u0027s the case we can mention that this is a design in general for having a secondary golden image that is not updated but as a backup to failover if primary fails to boot, but the implementation will begin with a dual flash configuration running the static layout.",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c10d5d0f_cecde768",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-16T10:10:13Z",
      "side": 1,
      "message": "Yup, the golden image is a full-functional BMC as well, it\u0027s just that we do not update it in the field.\nIn case the primary chip is broken and can not be fixed, it could provide the BMC functions as well, as described in below step 7 in \"The code update when BMC is running in the golden image\"",
      "parentUuid": "5446ab4c_ed00c694",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "809f415c_8cd89548",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-09-13T20:33:20Z",
      "side": 1,
      "message": "In fact in some systems (e.g. YADRO VESNIN) it may even be made read-only in hardware or it\u0027s write-ability may be controlled via a dedicated GPIO.",
      "range": {
        "startLine": 30,
        "startChar": 51,
        "endLine": 30,
        "endChar": 67
      },
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9de22f9c_fc17d42e",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-16T10:10:13Z",
      "side": 1,
      "message": "So the wording is OK here, is it?",
      "parentUuid": "809f415c_8cd89548",
      "range": {
        "startLine": 30,
        "startChar": 51,
        "endLine": 30,
        "endChar": 67
      },
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "036f89e8_ad1812f4",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-09-13T20:33:20Z",
      "side": 1,
      "message": "I wouldn\u0027t put this as a requirement. It kind of defeats the purpose of Golden flash. See comments below.",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 19
      },
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06f45dfb_acceff58",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-16T10:10:13Z",
      "side": 1,
      "message": "OK, got it.\nHow about making it an optional requirement?\n\nIn our case, the BMC gets IP from DHCP when it\u0027s first-time deployed, and after that it\u0027s using the static IP in the life time. That\u0027s why we want to sync the networking settings.\n\nI agree that the \"default\" behavior should not sync anything to the golden image.",
      "parentUuid": "036f89e8_ad1812f4",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 19
      },
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "796f9ba3_914f1c3a",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-09-13T20:33:20Z",
      "side": 1,
      "message": "This is for ASPEED chips only. That must be noted somewhere in this document. There are still BMC chips from other vendors that may use a different mechanism.",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae13e0b6_88f554f7",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-16T10:10:13Z",
      "side": 1,
      "message": "Right.\nNot sure how other vendors do. Will update the wording and take wdt2 in aspeed as an example.",
      "parentUuid": "796f9ba3_914f1c3a",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "722d03ff_02a5344b",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-09-11T21:01:17Z",
      "side": 1,
      "message": "This may not be needed, would other applications besides code update use this value? It\u0027s already exposed, so it can be queried when the bmc starts up, ex on ast2500:\nroot@romulus:~# cat /sys/class/watchdog/watchdog1/bootstatus\n0\n\nIf booted on the secondary chip the value would be 32.\n\nRegardless if we add it or not, it may be useful to log an error if we boot from the golden flash unexpectedly. This commit is proposing an error if the bmc didn\u0027t boot from the version specified by the user but could be adapted to be logged if the bmc booted from the gold flash as well: https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-bmc-code-mgmt/+/36309",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "913e7565_bb1b9119",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-16T10:10:13Z",
      "side": 1,
      "message": "\u003e If booted on the secondary chip the value would be 32.\n\nGood to know.\n\n\u003e Regardless if we add it or not, it may be useful to log an error if we boot from the golden flash unexpectedly. This commit is proposing an error if the bmc didn\u0027t boot from the version specified by the user but could be adapted to be logged if the bmc booted from the gold flash as well: https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-bmc-code-mgmt/+/36309\n\nSomehow, the commit is slightly different. With UBI design, there are *always* two *different* versions, and there is a config to tell which image to boot, so the interface is applicable.\nWith golden image concept, it *is* possible that the two versions in primary and golden are the same, but we still want to know which flash the BMC is booted from.\n\nMaybe we could come up with an interface to fit for both cases.",
      "parentUuid": "722d03ff_02a5344b",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "453241e5_dcd3c969",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-23T18:04:42Z",
      "side": 1,
      "message": "\u003e With UBI design, there are *always* two *different* versions, and there is a config to tell which image to boot, so the interface is applicable.\n\nIt doesn\u0027t seem like this is necessary though and would be a reasonable enhancement.  We could have the same image pushed to both the chips.  That is a different problem from the desire to have a golden image though.\n\nSome people seem to like a golden image so that they can easily restore back to entirely factory conditions.  We use a golden image because it is the way we implement verified boot pre-AST2600\u0027s hardware root of trust.",
      "parentUuid": "913e7565_bb1b9119",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "900b2327_78ce2586",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-24T07:34:38Z",
      "side": 1,
      "message": "Yup, we do want to use golden image because it makes sure the BMC could be restored when something bad happens on the primary flash (assuming the golden flash is not broken).\n\n\u003e We use a golden image because it is the way we implement verified boot pre-AST2600\u0027s hardware root of trust.\n\nGood to know. However, I doubt it is not really a trusted root-of-trust, e.g. the u-boot in primary chip could be compromised by a root user, is it?",
      "parentUuid": "453241e5_dcd3c969",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72d6d000_9d3861d8",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-09-13T20:33:20Z",
      "side": 1,
      "message": "For us this is an undesired behavior. The golden flash must stay intact by definition. Booting from golden flash is an emergency situation and the customer is warned in the user manual that if they can\u0027t reach the BMC after update, then they must look for it at the default settings (which is by the way DHCP for us, so in most cases the network settings will remain the same).",
      "range": {
        "startLine": 56,
        "startChar": 6,
        "endLine": 58,
        "endChar": 36
      },
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "648d863f_f28861eb",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-16T10:10:13Z",
      "side": 1,
      "message": "OK.\nMake this an optional step.",
      "parentUuid": "72d6d000_9d3861d8",
      "range": {
        "startLine": 56,
        "startChar": 6,
        "endLine": 58,
        "endChar": 36
      },
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e93cd2a_5a09f5b3",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-09-11T21:01:17Z",
      "side": 1,
      "message": "Sounds we end up in this scenario if there was an error. Maybe we need to specify that if BMC is running on the golden image because it failed to boot from the primary image. Also we could add the trigger to switch on kernel panics for example.",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67e95b14_a4199fa7",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-16T10:10:13Z",
      "side": 1,
      "message": "Will update this info",
      "parentUuid": "2e93cd2a_5a09f5b3",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50f46009_58d5424e",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-09-11T21:01:17Z",
      "side": 1,
      "message": "By \"full image\" you mean that we use the golden image and we copy it to the primary flash, or does a user still need to upload an image to update?\nAlso do you see this update being done automatically if BMC detects it booted from the golden flash or would this be user initiated?",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0cf2588_3c3b9524",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-09-13T20:33:20Z",
      "side": 1,
      "message": "In our implementation, it just boots into Golden image and lets the user to update the primary flash.",
      "parentUuid": "50f46009_58d5424e",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2705d1f_3b2c0eab",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-16T10:10:13Z",
      "side": 1,
      "message": "For now I think let the user (e.g. system admin) to update the primary flash manually, by uploading the full image that will erase and program the whole primary flash.",
      "parentUuid": "a0cf2588_3c3b9524",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e6b49ad_9e47ac36",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-09-13T20:33:20Z",
      "side": 1,
      "message": "This is achieved for us by modification of the u-boot environment on the golden flash chip.",
      "range": {
        "startLine": 62,
        "startChar": 8,
        "endLine": 64,
        "endChar": 34
      },
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "091d259a_1457ddd9",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-16T10:10:13Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "9e6b49ad_9e47ac36",
      "range": {
        "startLine": 62,
        "startChar": 8,
        "endLine": 64,
        "endChar": 34
      },
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd13da82_2e0688e8",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-09-13T20:33:20Z",
      "side": 1,
      "message": "This is not needed if the golden flash chip is r/o.",
      "range": {
        "startLine": 70,
        "startChar": 6,
        "endLine": 71,
        "endChar": 67
      },
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "720f98eb_28c98d9e",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1000182
      },
      "writtenOn": "2020-09-14T13:01:33Z",
      "side": 1,
      "message": "I\u0027m not sure, why do we need to update/sync settings? Are we talking about static network settings or which one?",
      "range": {
        "startLine": 71,
        "startChar": 5,
        "endLine": 71,
        "endChar": 29
      },
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41de573f_60d7cf71",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-16T10:10:13Z",
      "side": 1,
      "message": "Let\u0027s make it an optional step.",
      "parentUuid": "720f98eb_28c98d9e",
      "range": {
        "startLine": 71,
        "startChar": 5,
        "endLine": 71,
        "endChar": 29
      },
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12ac670b_5c8fa162",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1000182
      },
      "writtenOn": "2020-09-14T13:01:33Z",
      "side": 1,
      "message": "It can be done just by reboot, it will be switched automatically into primary without setting anything.",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cdf9ddd_722ed25f",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-16T10:10:13Z",
      "side": 1,
      "message": "From aspeed doc:\nIn the 2nd flash booting mode, the address mapping to CE0 and CE1 would be swapped. To restore\nthe address mapping, firmware should clear the 2nd boot mode register in the WDT2 status register WDT30.bit[1].\n\nThat\u0027s why I think it is necessary to clear that by writing bit0 of WDT34.\n\nBut I will re-word this anyway since it\u0027s too aspeed specific.",
      "parentUuid": "12ac670b_5c8fa162",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7bba33b_9bc601aa",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1000182
      },
      "writtenOn": "2020-09-16T11:37:51Z",
      "side": 1,
      "message": "It\u0027s already done by aspeed driver with restart handler -\u003e \nhttps://elixir.bootlin.com/linux/v5.9-rc5/source/drivers/watchdog/aspeed_wdt.c#L158",
      "parentUuid": "7cdf9ddd_722ed25f",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b19c3f33_83f050e8",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-16T11:58:45Z",
      "side": 1,
      "message": "hmm... That part of code is not to clear the WDT30 bit0/1, but make SoC to boot from primary after the watchdog times out.\nSo I think we still need to clear the WDT30 bit0/1 by writing 1 to WDT34 bit0, according to the datasheet.",
      "parentUuid": "b7bba33b_9bc601aa",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7aaf3126_74a62efa",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1000182
      },
      "writtenOn": "2020-09-22T15:42:01Z",
      "side": 1,
      "message": "Watchdog driver makes it possible with restart_handler to switch to the primary side without any additional writes to anything.\n\nIt is ast2400/2500 specific that you\u0027re talking about, we made this one for our needs - https://lkml.org/lkml/2019/8/28/387 and we using this for switch back into to the normal address mapping on ast2400 before reflashing primary side.",
      "parentUuid": "b19c3f33_83f050e8",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db65f4b4_e657bf28",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-23T06:31:35Z",
      "side": 1,
      "message": "Yup. The updated patch describe this as \"it shall clear the setting that is related to booting to the golden image\", and I think that should be OK and it is not aspeed specific anymore.\n\nThanks for the above info though.",
      "parentUuid": "7aaf3126_74a62efa",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72087cca_da60e082",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-23T18:01:50Z",
      "side": 1,
      "message": "There is some subtlety between the AST2400 and AST2500 that I recall Milton explaining to me once.  Might need his feedback on how to do this in a portable way.",
      "parentUuid": "db65f4b4_e657bf28",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a93377b0_ea4dac28",
        "filename": "architecture/code-update/dual-flash-with-golden-image-design.md",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-24T07:34:38Z",
      "side": 1,
      "message": "The wording here is updated, so there is not need for SoC specific details in the design doc here.",
      "parentUuid": "72087cca_da60e082",
      "revId": "27f343125e32027c81c5a508ec979d109a29f18f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}