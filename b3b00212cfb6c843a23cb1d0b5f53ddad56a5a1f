{
  "comments": [
    {
      "key": {
        "uuid": "2f18f7bd_fb45e955",
        "filename": "designs/multi-host-postcode.md",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-04T18:20:28Z",
      "side": 1,
      "message": "The changes proposed here are for Boot.Raw.  What about Boot.Postcode?  Can we incorporate that into this design also?",
      "revId": "b3b00212cfb6c843a23cb1d0b5f53ddad56a5a1f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db594a3c_9765189c",
        "filename": "designs/multi-host-postcode.md",
        "patchSetId": 5
      },
      "lineNbr": 164,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-04T18:20:28Z",
      "side": 1,
      "message": "minor: I think you want to say \u0027service names\u0027 specifically so that readers know which you\u0027re talking about.  \u0027names\u0027 is ambiguous.",
      "range": {
        "startLine": 164,
        "startChar": 10,
        "endLine": 164,
        "endChar": 21
      },
      "revId": "b3b00212cfb6c843a23cb1d0b5f53ddad56a5a1f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "165c72be_9aac686d",
        "filename": "designs/multi-host-postcode.md",
        "patchSetId": 5
      },
      "lineNbr": 203,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-04T18:20:28Z",
      "side": 1,
      "message": "I would like to see the X here also to differentiate between them.  We don\u0027t like to have the same object path used in different services, unless they are adding aspects to the common object.",
      "revId": "b3b00212cfb6c843a23cb1d0b5f53ddad56a5a1f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96507e06_1fe29d4b",
        "filename": "designs/multi-host-postcode.md",
        "patchSetId": 5
      },
      "lineNbr": 223,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-04T18:28:11Z",
      "side": 1,
      "message": "Until I saw the changes (at https://gerrit.openbmc-project.xyz/c/openbmc/fb-ipmi-oem/+/36112/2/src/biccommands.cpp), I completely misunderstood what you\u0027re proposing here.  A big part of the reason why is that you\u0027ve used the opposite verb.\n\nA method called \u0027readPostcode\u0027 means to me that you are asking the \u0027Raw\u0027 object to do a read.  In this case, you\u0027re actually trying to \u0027POST\u0027 a postcode (I\u0027ve used HTTP terminology).\n\nThe current \u0027Raw\u0027 interface holds a single postcode.  Existing implementations of it receive their value from hardware and they should not get this new method (because we would not want someone to \u0027post\u0027 an additional postcode).  If we really need this method, I think we need a new interface.\n\nHaving said that, I have two alternative proposals:\n\n1. Is there any reason the IPMI daemon cannot host this object and update the \u0027Raw.Value\u0027 on its own?  Why do we need a separate daemon to hold a single integer?\n\n2. Can we make \u0027Raw.Value\u0027 writable in the current implementation?  A compile or config value could be the switch between \"get Raw.Value from hardware\" or \"get Raw.Value from property write operations\".",
      "range": {
        "startLine": 208,
        "startChar": 0,
        "endLine": 223,
        "endChar": 17
      },
      "revId": "b3b00212cfb6c843a23cb1d0b5f53ddad56a5a1f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deb4a491_ee03b187",
        "filename": "designs/multi-host-postcode.md",
        "patchSetId": 5
      },
      "lineNbr": 227,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-04T18:20:28Z",
      "side": 1,
      "message": "What is this referring to?  The current Raw interface only has a single value and \u0027history\u0027 is provided by another interface.",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 227,
        "endChar": 53
      },
      "revId": "b3b00212cfb6c843a23cb1d0b5f53ddad56a5a1f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa6b4919_9a529899",
        "filename": "designs/multi-host-postcode.md",
        "patchSetId": 5
      },
      "lineNbr": 231,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-04T18:20:28Z",
      "side": 1,
      "message": "I don\u0027t understand why this is needed.  We have different service names (and I\u0027ve suggested above object paths) for different hosts.  Why do we also need as a parameter?",
      "range": {
        "startLine": 228,
        "startChar": 0,
        "endLine": 231,
        "endChar": 40
      },
      "revId": "b3b00212cfb6c843a23cb1d0b5f53ddad56a5a1f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}