{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "758cb73b_6ee83664",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-07-28T13:45:44Z",
      "side": 1,
      "message": "s",
      "revId": "2f7ea62162b935c7cd296780ff60c014a1131772",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd5b48e3_73e8e39c",
        "filename": "designs/platform-init.md",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-07-28T13:45:44Z",
      "side": 1,
      "message": "For requirement `4` i would like to propose doing this in `entity-manager` repository.\n\nInitializing hardware and detecting hardware cannot really be separated well currently and there are proposals to initialize i2c gpio muxes and such from entity-manager as well (https://gerrit.openbmc.org/c/openbmc/entity-manager/+/75484).\n\nEven if it is a separate daemon from entity-manager i believe it will be easier to coordinate this development in an existing repo close to the detection and configuration logic.\n\nFrom my viewpoint there is a multi-stage initialization requirement.\n\n- static detection \n- gpio initialization(your proposal?)\n- dynamic detection (FruDevice, gpio presence, ...) \n- dynamic mux initialization\n- dynamic gpio initialization\n- possibly again dynamic detection\n- possibly again dynamic initialization\n- configuration\n- sensor daemons\n\nand EM may need to call into these custom initialization routines \nin case of dynamic initialization. Which is easier if that code is in the same repo.\n\nAlso there may be a preferred or required routine upon removal of a component which may require a custom de-initialization routine. That would also benefit from the code being available there.",
      "revId": "2f7ea62162b935c7cd296780ff60c014a1131772",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa1520c3_60b65ccd",
        "filename": "designs/platform-init.md",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-28T16:04:33Z",
      "side": 1,
      "message": "\u003e For requirement `4` i would like to propose doing this in `entity-manager` repository.\n\nAgreed, this is likely where it would go, but this design doesn\u0027t cover those details, just use them as a future requirement for why this repo should exist.\n\n\u003e \n\u003e Initializing hardware and detecting hardware cannot really be separated well currently and there are proposals to initialize i2c gpio muxes and such from entity-manager as well (https://gerrit.openbmc.org/c/openbmc/entity-manager/+/75484).\n\nThese are initting GPIO muxes based on detected components, this repo is for initting based on image defined rules.\n\n\u003e \n\u003e Even if it is a separate daemon from entity-manager i believe it will be easier to coordinate this development in an existing repo close to the detection and configuration logic.\n\u003e \n\u003e From my viewpoint there is a multi-stage initialization requirement.\n\u003e \n\u003e - static detection \n\nThis is intentionally not in EM today.  EM is for per-device configuration.  If you can \"know\" at an image layer that a software resource exists, ideally we shouldn\u0027t try to detect it in EM.\n\n\u003e - gpio initialization(your proposal?)\n\nGPIO isn\u0027t unique here.  There\u0027s a lot more init that happens in platform init than just GPIO, and a lot of it requires a sequence or map of resources that can\u0027t be represented in an EM config.  For example\n\nStandby power needs asserted\nWait for power good\nInitialize sgpio\nwait for sgpio good\nInitialize GPIO expander\nRead/write GPIO to init hardware.\n\n\u003e - dynamic detection (FruDevice, gpio presence, ...) \n\u003e - dynamic mux initialization\n\u003e - dynamic gpio initialization\n\u003e - possibly again dynamic detection\n\u003e - possibly again dynamic initialization\n\u003e - configuration\n\u003e - sensor daemons\n\nYes, the rest is then handled by EM.\n\n\u003e \n\u003e and EM may need to call into these custom initialization routines \n\u003e in case of dynamic initialization. Which is easier if that code is in the same repo.\n\nFrom the \"explicitly out of scope\" section in entity-manager:\n\n\"Entity manager shall not directly participate in management of any specific device\"\n\nhttps://github.com/openbmc/entity-manager/blob/master/README.md\n\n\u003e \n\u003e Also there may be a preferred or required routine upon removal of a component which may require a custom de-initialization routine. That would also benefit from the code being available there.\n\nOverall, this application exists because I don\u0027t see a way technically to make these things entity-manager enabled, and imposing a fru scanning requirement would reduce the reliability, as well as cause a deadlock (some FRUs are behind the Voltage regulator on this platform)",
      "parentUuid": "fd5b48e3_73e8e39c",
      "revId": "2f7ea62162b935c7cd296780ff60c014a1131772",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55692022_f142a1c3",
        "filename": "designs/platform-init.md",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-07-28T17:23:37Z",
      "side": 1,
      "message": "\u003e Overall, this application exists because I don\u0027t see a way technically to make these things entity-manager enabled, and imposing a fru scanning requirement would reduce the reliability, as well as cause a deadlock (some FRUs are behind the Voltage regulator on this platform)\n\nI mean it makes sense for simple initialization cases (single host, fixed board).\nBut if you consider blade servers too then these may need or want custom init routines aswell.\n\nSo the first initialization would need to be done before FruDevice as you said but blade initialization may need to be done based on dynamic detection.\n\nMy point is that there may need to be something in-between detection and EM exposing configuration. Which is the initialization step.\n\nSo having your code be in the EM repo would make it easier to call those handlers.\n\n\nI believe your use-case is similar to the i2c mux feature which is also concerned\nwith initialization\nhttps://gerrit.openbmc.org/c/openbmc/entity-manager/+/75484\n\nThe major difference being the stage at which the initialization happens (before / after FruDevice) and how it is configured static/dynamic.\n\nI see no reason why it cannot be supported to have a custom init routine for some hardware component after dynamic detection has started.\n\n\n\u003e Standby power needs asserted\nWait for power good\nInitialize sgpio\nwait for sgpio good\nInitialize GPIO expander\nRead/write GPIO to init hardware.\n\nMany of your mentioned use-cases also apply after i2c muxes have been configured and dynamic detection has happened.\n\nSo these init handlers will also need to be available at that point and cannot just be something to run once then forget about it.\n\n\u003e \"Entity manager shall not directly participate in management of any specific device\"\n\nMaybe it wont\u0027 be so bad if we have a simple handler architecture.\nWith ability to register fixed init functions based on the board\nand then register init / de-init handlers based on `Type` of configuration and also based on individual boards (once detected, not-fixed init)\n\nThis may be useful in your case aswell. So you can do custom init based on\nfields detected by `FruDevice` and handle some board variants/revisions differently.\n\nLike this:\n\n- fixed init hardcoded based on fw image\n- FruDevice starts\n- custom init based on fields from FRU Devices (handle board variants)\n- EM exposes board inventory\n- run custom handlers based on \u0027Type\u0027 of configuration\n- (e.g. init i2c muxes, gpio expanders, ...)\n- expose configuration record\n...\n\nFor example in the ipmi stack they have a way to register custom handler functions and it does not make the core code any more complicated.\n\nSince these handlers are all treated all the same with same function signature and so on.",
      "parentUuid": "aa1520c3_60b65ccd",
      "revId": "2f7ea62162b935c7cd296780ff60c014a1131772",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "014974ee_f887de82",
        "filename": "designs/platform-init.md",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-28T17:52:03Z",
      "side": 1,
      "message": "\u003e But if you consider blade servers too\n\nFor me that is outside the scope of this design.  I do not support blade servers, and presumably each blade would be a detected entity, so that would be a completely different design.\n\nIf the blade center needed their standby power brought up , that would be a good use case for this.\n\n\u003e Many of your mentioned use-cases also apply after i2c muxes have been configured and dynamic detection has happened.... cannot just be something to run once then forget about it.\n\nAll of the use cases mentioned for my platform are in fact run once and don\u0027t re-run until a reboot.\n\n\n\u003e Maybe it wont\u0027 be so bad if we have a simple handler architecture.\n\nIt\u0027s not about \"being bad\" it\u0027s about entity-manager being a common component that all systems can use, and application support being selectable based on component.\n\nThe point of this repo is for compile-time selection of init.  Entity-manager is for runtime selection of devices, and instantiation of inventory, both of which are not part of platform-init.\n\n\n\u003e So you can do custom init based on fields detected by FruDevice\n\nThis is very explicitly outside of the requirements.  Keep in mind, on some platforms the FRUs are actually behind initted hardware, so no FRUs are available until power rails are initted.",
      "parentUuid": "55692022_f142a1c3",
      "revId": "2f7ea62162b935c7cd296780ff60c014a1131772",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55383bb5_ace6f6d2",
        "filename": "designs/platform-init.md",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-07-28T13:45:44Z",
      "side": 1,
      "message": "Let\u0027s not from the get-go make it optional.\nIf it ends up being a big binary then maybe?\n\nThere is currently so much optionality in OpenBMC that it is leading to incompatibility between components.",
      "revId": "2f7ea62162b935c7cd296780ff60c014a1131772",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2fb0c55_69d42c7b",
        "filename": "designs/platform-init.md",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-28T16:04:33Z",
      "side": 1,
      "message": "\u003e Let\u0027s not from the get-go make it optional.\n\nIn the initial, SOME platform will need to be opt in.  I agree, ideally we\u0027d enable this everywhere, and for platforms that don\u0027t have definitions would just a be no-op.\n\n\u003e If it ends up being a big binary then maybe?\n\u003e \n\u003e There is currently so much optionality in OpenBMC that it is leading to incompatibility between components.\n\nThere\u0027s pros and cons to optionality.  From my perspective, I\u0027d like to see common solutions where there are common problems that can be solved once.  There\u0027s a lot more routines that can be made common by creating this platform init common application.",
      "parentUuid": "55383bb5_ace6f6d2",
      "revId": "2f7ea62162b935c7cd296780ff60c014a1131772",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31967f51_9fa1bfcd",
        "filename": "designs/platform-init.md",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-07-28T17:23:37Z",
      "side": 1,
      "message": "\u003e In the initial, SOME platform will need to be opt in.\n\nWhat about making it opt-out.",
      "parentUuid": "f2fb0c55_69d42c7b",
      "revId": "2f7ea62162b935c7cd296780ff60c014a1131772",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa037601_351d232d",
        "filename": "designs/platform-init.md",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-28T17:52:03Z",
      "side": 1,
      "message": "\u003e What about making it opt-out.\n\nCan\u0027t do that until we have something that works, then yes, I would advocate for it being opt-out.",
      "parentUuid": "31967f51_9fa1bfcd",
      "revId": "2f7ea62162b935c7cd296780ff60c014a1131772",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59f7f29c_c66b7870",
        "filename": "designs/platform-init.md",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-07-28T13:45:44Z",
      "side": 1,
      "message": "If there is a new repo, please have at least 2 maintainers, preferably from 2 different companies.\n\nTo provide a balanced viewpoint in the code review process and ensure the knowledge about how the thing works is not contained in just one person.",
      "revId": "2f7ea62162b935c7cd296780ff60c014a1131772",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e29fefc_f406a240",
        "filename": "designs/platform-init.md",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-28T16:04:33Z",
      "side": 1,
      "message": "\u003e If there is a new repo, please have at least 2 maintainers, preferably from 2 different companies.\n\u003e \n\u003e To provide a balanced viewpoint in the code review process and ensure the knowledge about how the thing works is not contained in just one person.\n\nThat\u0027s fine, and I\u0027m in support, but without someone volunteering this comment isn\u0027t really actionable.",
      "parentUuid": "59f7f29c_c66b7870",
      "revId": "2f7ea62162b935c7cd296780ff60c014a1131772",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3254d14_e3c39eb0",
        "filename": "designs/platform-init.md",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-28T16:06:48Z",
      "side": 1,
      "message": "We also haven\u0027t enforced that in the past, and there are a number of repos that are single active maintainer.  Doing as you ask is certainly something to discuss, but I would ask that it doesn\u0027t block this review specifically.",
      "parentUuid": "4e29fefc_f406a240",
      "revId": "2f7ea62162b935c7cd296780ff60c014a1131772",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e9f186d_95b0e586",
        "filename": "designs/platform-init.md",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-07-28T17:23:37Z",
      "side": 1,
      "message": "\u003e We also haven\u0027t enforced that in the past\n\nThen why not start this good habit now 😊\n\n\u003e That\u0027s fine, and I\u0027m in support, but without someone volunteering this comment isn\u0027t really actionable.\n\nI can volunteer to look at the init code if we can get it into `entity-manager` repo and not create yet another one.\n\nSince initialization and configuration are closely related and need to be coordinated well, i believe this application can go into `entity-manager` repo.\n\nAlso i believe the benefit of having more people to maintain this thing outweighs any benefits a separate repo could provide.",
      "parentUuid": "c3254d14_e3c39eb0",
      "revId": "2f7ea62162b935c7cd296780ff60c014a1131772",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56a2dce6_57eb4ecc",
        "filename": "designs/platform-init.md",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-07-28T17:52:03Z",
      "side": 1,
      "message": "\u003e \u003e We also haven\u0027t enforced that in the past\n\u003e \n\u003e Then why not start this good habit now 😊\n\u003e \n\nBecause it\u0027s a separate concern.  Many people would debate \"good\".\n\n\u003e \u003e That\u0027s fine, and I\u0027m in support, but without someone volunteering this comment isn\u0027t really actionable.\n\u003e \n\u003e I can volunteer to look at the init code if we can get it into `entity-manager` repo and not create yet another one.\n\u003e \n\u003e Since initialization and configuration are closely related and need to be coordinated well, i believe this application can go into `entity-manager` repo.\n\n\nAs the entity-manager maintainer, I would like to maintain the rule that EM does not participate in hardware management itself.  I do not see how technically one could integrate this application with EM.  Doing so would involve blocking the main dbus reactor, which would be bad for dbus response times.  This application proposed doesn\u0027t have a dbus interface.\n\n\u003e \n\u003e Also i believe the benefit of having more people to maintain this thing outweighs any benefits a separate repo could provide.\n\nI would love to see more people maintain this.  And FWIW, once i get the GPIO things solved, the next thing in my targets are the duplicated host interface scripts:\nhttps://github.com/openbmc/openbmc/blob/master/meta-fii/meta-kudo/recipes-kudo/network/usb-network/usb_network.sh\n\nThat should all be common.  I would expect to see a lot more maintainers be involved once that happens, but at the moment, I need to get the existing code moved to place that can be maintained at all (not in a company-specific meta layer).",
      "parentUuid": "8e9f186d_95b0e586",
      "revId": "2f7ea62162b935c7cd296780ff60c014a1131772",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}