{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "137bce28_8ef5279a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-27T00:13:50Z",
      "side": 1,
      "message": "I\u0027m not sure if it fits here exactly but I wouldn\u0027t mind seeing words to discourage build-time configurable features as it blows up the CI matrix. Features that are disabled by default at build time don\u0027t tend to get test coverage and are frequently broken. Generally, effort should be made to make it possible to build all supported features for an application in a single build configuration.",
      "revId": "0f8a802bd323acd269864b50d8b9dc9c34f8a579",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1167d35f_8b908e42",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-04-27T17:18:01Z",
      "side": 1,
      "message": "\u003e I\u0027m not sure if it fits here exactly but I wouldn\u0027t mind seeing words to discourage build-time configurable features as it blows up the CI matrix.\n\nAgreed it\u0027s something that we should tackle, but that\u0027s a can of worms I\u0027d like to avoid in this patch.  To some extent we need to extend this to include a definition of \"features\" and \"policies\".  Policies (for example https://github.com/openbmc/bmcweb/blob/02e01b5108d46720a0b438c0d79952464320d954/meson_options.txt#L296) aren\u0027t things that can be simply enabled or disabled like a feature can, and require the developer to make a choice about how their system should respond, and we need to differentiate them before we can talk about the CI matrix, although I\u0027m not sure the CI matrix blowup is as big of a deal as we think.  Ideally folks are committing enough CI resources and machine layers that their configs of the matrix can be tested, and if it\u0027s a configuration nobody uses, so be it.\n\n\u003e Features that are disabled by default at build time don\u0027t tend to get test coverage and are frequently broken.\n\nAgreed.\n\n\u003e Generally, effort should be made to make it possible to build all supported features for an application in a single build configuration.\n\nEasier said than done, and has implications for things like \"should developers wait for builds to finish for features they\u0027ll never use?\"\n\nThese are all interesting questions, but I\u0027d like to keep this patchset on the less controversial stuff for the moment if that\u0027s ok.",
      "parentUuid": "137bce28_8ef5279a",
      "revId": "0f8a802bd323acd269864b50d8b9dc9c34f8a579",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10e06d64_8882f2ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-28T00:02:47Z",
      "side": 1,
      "message": "\u003e \u003e Generally, effort should be made to make it possible to build all supported features for an application in a single build configuration.\n\n\u003e Easier said than done, and has implications for things like \"should developers wait for builds to finish for features they\u0027ll never use?\"\n\nMaybe I needed to be a bit more explicit with what I meant here, but the intent was that:\n\n1. Any build-time options are enabled by default\n2. Design the code such that build options aren\u0027t mutually exclusive\n\nDevelopers that don\u0027t care about features can just turn them off, but on-by-default means that they get build and test coverage in CI.",
      "parentUuid": "1167d35f_8b908e42",
      "revId": "0f8a802bd323acd269864b50d8b9dc9c34f8a579",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f36ce6f_b9b893a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-28T06:54:41Z",
      "side": 1,
      "message": "speaking of which: https://gerrit.openbmc.org/c/openbmc/pldm/+/62954",
      "parentUuid": "10e06d64_8882f2ff",
      "revId": "0f8a802bd323acd269864b50d8b9dc9c34f8a579",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41a98d3e_3ed3d102",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-02T15:53:54Z",
      "side": 1,
      "message": "\u003e Any build-time options are enabled by default\n\nRight, so should I have to enable IBM OEM Redfish by default?  Should IBM have to enable Google OEM by default?  Should the insecure options be the default?  I think the answer is more subtle than just enabling everything.\n\n#2 makes sense to me.\n\n\u003e on-by-default means that they get build and test coverage in CI.\n\nBut it also means that if those patches have insecurities or stability problems, they take on that burden as well without realizing it.  I think there\u0027s some nuance in defaults that I\u0027m not fully prepared to write down yet, because I\u0027m still trying to work it out in my head.\n\n\u003e https://gerrit.openbmc.org/c/openbmc/pldm/+/62954\n\nYep......   I think \"don\u0027t break the build for things that are working\" is a different statement ðŸ˜Š",
      "parentUuid": "5f36ce6f_b9b893a8",
      "revId": "0f8a802bd323acd269864b50d8b9dc9c34f8a579",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77197e1f_71218259",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-02T20:59:05Z",
      "side": 1,
      "message": "\u003e \u003e Any build-time options are enabled by default\n\u003e \n\u003e Right, so should I have to enable IBM OEM Redfish by default?  Should IBM have to enable Google OEM by default?  Should the insecure options be the default?  I think the answer is more subtle than just enabling everything.\n\nI think you\u0027re conflating meson option defaults and distro/machine configuration here.\n\nmeson option defaults values are relevant for developers working on the repository directly, and CI.\n\n`PACKAGECONFIG`s for the distro and the machine should always be tightly scoped to the requirements of the machine and rarely accept defaults specified by the underlying repository. Relying on the repository defaults is lazy and should be addressed immediately by fully describing the configuration required for the machine via `PACKAGECONFIG`.\n \n\u003e \n\u003e #2 makes sense to me.\n\u003e \n\u003e \u003e on-by-default means that they get build and test coverage in CI.\n\u003e \n\u003e But it also means that if those patches have insecurities or stability problems, they take on that burden as well without realizing it.  I think there\u0027s some nuance in defaults that I\u0027m not fully prepared to write down yet, because I\u0027m still trying to work it out in my head.\n\nI think it\u0027s likely addressed by my discussion above.\n\n\u003e \n\u003e \u003e https://gerrit.openbmc.org/c/openbmc/pldm/+/62954\n\u003e \n\u003e Yep......   I think \"don\u0027t break the build for things that are working\" is a different statement ðŸ˜Š\n\nright, but the build was only broken after I enabled the off-by-default option, which meant it wasn\u0027t caught in CI",
      "parentUuid": "41a98d3e_3ed3d102",
      "revId": "0f8a802bd323acd269864b50d8b9dc9c34f8a579",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dad686d_be441dd2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-03T15:59:54Z",
      "side": 1,
      "message": "\u003e \u003e \u003e Any build-time options are enabled by default\n\u003e \u003e \n\u003e \u003e Right, so should I have to enable IBM OEM Redfish by default?  Should IBM have to enable Google OEM by default?  Should the insecure options be the default?  I think the answer is more subtle than just enabling everything.\n\u003e \n\u003e I think you\u0027re conflating meson option defaults and distro/machine configuration here.\n\u003e \n\u003e meson option defaults values are relevant for developers working on the repository directly, and CI.\n\u003e \n\u003e `PACKAGECONFIG`s for the distro and the machine should always be tightly scoped to the requirements of the machine and rarely accept defaults specified by the underlying repository.\n\u003e Relying on the repository defaults is lazy and should be addressed immediately by fully describing the configuration required for the machine via `PACKAGECONFIG`.\n\u003e  \n\u003e \u003e \n\u003e \u003e #2 makes sense to me.\n\u003e \u003e \n\u003e \u003e \u003e on-by-default means that they get build and test coverage in CI.\n\u003e \u003e \n\u003e \u003e But it also means that if those patches have insecurities or stability problems, they take on that burden as well without realizing it.  I think there\u0027s some nuance in defaults that I\u0027m not fully prepared to write down yet, because I\u0027m still trying to work it out in my head.\n\u003e \n\u003e I think it\u0027s likely addressed by my discussion above.\n\u003e \n\u003e \u003e \n\u003e \u003e \u003e https://gerrit.openbmc.org/c/openbmc/pldm/+/62954\n\u003e \u003e \n\u003e \u003e Yep......   I think \"don\u0027t break the build for things that are working\" is a different statement ðŸ˜Š\n\u003e \n\u003e right, but the build was only broken after I enabled the off-by-default option, which meant it wasn\u0027t caught in CI\n\n\nI\u0027m not sure I agree with everything above about machines having to know every configuration option, but that\u0027s good to know this is where the root of our disagreement is.  My understanding is that today Meson defaults and CI are identical.  I think we both agree that CI should test as many configurations as it can, including the everything-enabled build, but back to this review, I\u0027m not sure how to add that without making statements about infrastructure that doesn\u0027t yet exist.  I don\u0027t believe we have any matrix testing capability, aside from the per-machine matrix, so I\u0027m not sure what this doc could even say aside from something idealistic.",
      "parentUuid": "77197e1f_71218259",
      "revId": "0f8a802bd323acd269864b50d8b9dc9c34f8a579",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ebcdbd92_f0d65c18",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-04T01:58:48Z",
      "side": 1,
      "message": "\u003e \u003e \u003e \u003e Any build-time options are enabled by default\n\u003e \u003e \u003e \n\u003e \u003e \u003e Right, so should I have to enable IBM OEM Redfish by default?  Should IBM have to enable Google OEM by default?  Should the insecure options be the default?  I think the answer is more subtle than just enabling everything.\n\u003e \u003e \n\u003e \u003e I think you\u0027re conflating meson option defaults and distro/machine configuration here.\n\u003e \u003e \n\u003e \u003e meson option defaults values are relevant for developers working on the repository directly, and CI.\n\u003e \u003e \n\u003e \u003e `PACKAGECONFIG`s for the distro and the machine should always be tightly scoped to the requirements of the machine and rarely accept defaults specified by the underlying repository.\n\u003e \u003e Relying on the repository defaults is lazy and should be addressed immediately by fully describing the configuration required for the machine via `PACKAGECONFIG`.\n\u003e \u003e  \n\u003e \u003e \u003e \n\u003e \u003e \u003e #2 makes sense to me.\n\u003e \u003e \u003e \n\u003e \u003e \u003e \u003e on-by-default means that they get build and test coverage in CI.\n\u003e \u003e \u003e \n\u003e \u003e \u003e But it also means that if those patches have insecurities or stability problems, they take on that burden as well without realizing it.  I think there\u0027s some nuance in defaults that I\u0027m not fully prepared to write down yet, because I\u0027m still trying to work it out in my head.\n\u003e \u003e \n\u003e \u003e I think it\u0027s likely addressed by my discussion above.\n\u003e \u003e \n\u003e \u003e \u003e \n\u003e \u003e \u003e \u003e https://gerrit.openbmc.org/c/openbmc/pldm/+/62954\n\u003e \u003e \u003e \n\u003e \u003e \u003e Yep......   I think \"don\u0027t break the build for things that are working\" is a different statement ðŸ˜Š\n\u003e \u003e \n\u003e \u003e right, but the build was only broken after I enabled the off-by-default option, which meant it wasn\u0027t caught in CI\n\u003e \n\u003e \n\u003e I\u0027m not sure I agree with everything above about machines having to know every configuration option, but that\u0027s good to know this is where the root of our disagreement is.\n\nRight, we can iterate on the concepts outside of this patch.\n\nBut to try to round out the discussion, I don\u0027t think it\u0027s required that all machines know all options. Absence of an option in `PACKAGECONFIG` implies that the option is disabled, not that build system\u0027s default value is applied. Only an absence of a `PACKAGECONFIG[...]` specification for the option in the package\u0027s recipe implies the build system\u0027s default value. If the recipe specifies a `PACKAGECONFIG[...]` for each build system options then an empty `PACKAGECONFIG` explicitly disables all options. Machines therefore only need to explicitly enable what they care about.\n\n\u003e My understanding is that today Meson defaults and CI are identical.\n\nRight. It\u0027s easiest if CI just uses the defaults for options so we don\u0027t have to specify the options in CI.\n\n\u003e I think we both agree that CI should test as many configurations as it can, including the everything-enabled build\n\nAgree.\n\n\u003e but back to this review, I\u0027m not sure how to add that without making statements about infrastructure that doesn\u0027t yet exist. I don\u0027t believe we have any matrix testing capability, aside from the per-machine matrix, so I\u0027m not sure what this doc could even say aside from something idealistic.\n\nI\u0027m trying to argue that we don\u0027t need any further infrastructure to exist :) Rather, we should properly exploit bitbake\u0027s `PACKAGECONFIG` to control what\u0027s built by bitbake for a particular machine. From there, the only statement we need is that any build option introduced in a subproject must be enabled by default so we get CI coverage.\n\nHaving said that, I\u0027ve already +1\u0027ed the patch. I\u0027ll mark this as resolved so we can discuss it separately.",
      "parentUuid": "1dad686d_be441dd2",
      "revId": "0f8a802bd323acd269864b50d8b9dc9c34f8a579",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0381da07_d325e2d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-05-04T15:52:26Z",
      "side": 1,
      "message": "\u003e Absence of an option in PACKAGECONFIG implies that the option is disabled\n\nIf all options were simple enable/disable, I would completely agree with you, but there\u0027s things like \"should you enforce content-type?\" or \"Should you support legacy incorrect behavior?\" that doesn\u0027t cleanly fit into a feature enabled model, and for new platforms, certainly shouldn\u0027t be the default.\n\n\u003e Rather, we should properly exploit bitbake\u0027s PACKAGECONFIG to control what\u0027s built by bitbake for a particular machine.\n\nThis is making more sense now what you\u0027re proposing, and while I wish our platform maintainers were more active, I worry that they\u0027re not going to keep their PACKAGECONFIG up to date, and asking a user of a feature that should be the default for all platforms to go update N platforms work of config seems like overkill.\n\n\u003e Having said that, I\u0027ve already +1\u0027ed the patch.\n\nThank you for the discussion.  I really appreciate it.",
      "parentUuid": "ebcdbd92_f0d65c18",
      "revId": "0f8a802bd323acd269864b50d8b9dc9c34f8a579",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c77025fb_6d717772",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-05T02:59:39Z",
      "side": 1,
      "message": "I\u0027ll send a change proposing wording along the lines of what Patrick wrote in Discord, and we can discuss it all further on that patch:\n\nhttps://discord.com/channels/775381525260664832/867820390406422538/1103508562765938778",
      "parentUuid": "0381da07_d325e2d9",
      "revId": "0f8a802bd323acd269864b50d8b9dc9c34f8a579",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}