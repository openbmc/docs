{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0abbd805_7726c6a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000235
      },
      "writtenOn": "2023-07-21T18:57:59Z",
      "side": 1,
      "message": "This design is looking good to me a way to satisfy various audit requirements such as those given by the NIAP Virtualization Protection Profile mentioned in this design.",
      "revId": "65cf8ec42b5499a04c77abf3face23d5c1cf77bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3cdb687_e2626311",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000182
      },
      "writtenOn": "2023-07-21T22:09:19Z",
      "side": 1,
      "message": "I\u0027m still thinking that audit event log function should be wrapped inside phosphor-logging mechanism which provides more clean way of work, in this particular way you can use whatever you want inside this wrapper - auditd, journald, rsyslog or whatever you want, and you use whenever you want, not just redfish/bmcweb.",
      "revId": "65cf8ec42b5499a04c77abf3face23d5c1cf77bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93c4f9a3_524f4bc4",
        "filename": "designs/auditLog.md",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1000235
      },
      "writtenOn": "2023-07-21T18:57:59Z",
      "side": 1,
      "message": "Proposed new requirements:\n- All auditable events recorded.  The implementation shall not drop events it is configured to audit, even if the system is busy, unless the audit buffer is full and set to not wrap.\n\n- Offload protocol does not skip events.  For the use case of an external audit server whose purpose is to offload audit events from the BMC, the implementation shall support a protocol that guarantees no audit events are skipped as the external server downloads and deletes audit events.  (For example, we don\u0027t want the external server to get confused and delete an audit record before it downloads it.)  The proposed design should suggest such a protocol.",
      "revId": "65cf8ec42b5499a04c77abf3face23d5c1cf77bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79feb7a1_5ef247c5",
        "filename": "designs/auditLog.md",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2023-08-09T22:25:14Z",
      "side": 1,
      "message": "The Linux audit subsystem provides configuration control that specifies how to handle errors when trying to write audit events. I\u0027ve added a line to the requirements to include this as the action desired can be distro dependant.\n\nThis design does not include the ability to push audit events to a remote server. However the Linux audit subsystem does provide the ability to create such a service using audisp. This design could be altered in the future to add details of such a service. I\u0027ve clarified this below where audisp is referenced.",
      "parentUuid": "93c4f9a3_524f4bc4",
      "revId": "65cf8ec42b5499a04c77abf3face23d5c1cf77bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7078e6f8_1bc7b1a8",
        "filename": "designs/auditLog.md",
        "patchSetId": 3
      },
      "lineNbr": 458,
      "author": {
        "id": 1000235
      },
      "writtenOn": "2023-07-21T18:57:59Z",
      "side": 1,
      "message": "Proposed unit test: Audit collection stress test.\nOn a heavily loaded BMC, continuously perform various events which should produce audit records, and validate all events are audited.  Stress can be from various BMC operations such a firmware upload (without rebooting the BMC!), or reading logs, or a program running which chews up spare CPU cycles, etc.  Maybe the testcase can run for an hour or so.\n\nProposed unit test: Dynamic offload of audit records.\nOperate your BMC to continuously write audit events, and have an external audit server continuously download and delete those audit records from the BMC.  Be careful follow the protocol (to be determined) to delete only those records it just downloaded.  The external audit server can be mocked-up: it must interact with the BMC but can just print out the records it downloads.  Validate the records obtained by the the audit server are as expected, with no missing (omitted) records.  Maybe the testcase can run for an hour or so.",
      "revId": "65cf8ec42b5499a04c77abf3face23d5c1cf77bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bdb98df_89387a4d",
        "filename": "designs/auditLog.md",
        "patchSetId": 3
      },
      "lineNbr": 458,
      "author": {
        "id": 1001621
      },
      "writtenOn": "2023-08-09T22:25:14Z",
      "side": 1,
      "message": "Thank you for these suggestions, good idea to stress this service.\n\nI\u0027ve added stress test for logging of the events per your suggestion.\nFor the entry retrieval I\u0027ve added a test to include the continuation retrieval using the available Redfish parameters.",
      "parentUuid": "7078e6f8_1bc7b1a8",
      "revId": "65cf8ec42b5499a04c77abf3face23d5c1cf77bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}