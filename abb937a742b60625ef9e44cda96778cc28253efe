{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f26abfbd_78e16b9e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-02T21:25:44Z",
      "side": 1,
      "message": "Please wrap your commit 50/72",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 37
      },
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be4f6b92_befbe4dd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-10-03T12:13:08Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "f26abfbd_78e16b9e",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 37
      },
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6b4fa3f_d720df2a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-02T21:25:44Z",
      "side": 1,
      "message": "nitpick, link this at the bottom with something like\n\ncpp core guidlelines [1]\n\nThen at the bottom\n\n\n[1] https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines\n\n\n\nThis is a nit, fix if you think it makes your commit better.",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 60
      },
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0532ab8_cbba906a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-10-03T12:13:08Z",
      "side": 1,
      "message": "it does make it better ðŸ˜Š Thanks.",
      "parentUuid": "b6b4fa3f_d720df2a",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 60
      },
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7702007d_63775ac2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2023-10-02T20:44:50Z",
      "side": 1,
      "message": "I agree with the goal \"to make the code more readable\"\n\nI worry, that enforcing arbitrary limits will not help. strict adherence to this rules will not necessarily facilitate cleaner code.\n\nOne can imagine \n- Splitting one logical function multiple time, so it complies with with 60 line rule. \n- Or packing all 8 parameters into a onetime use structs to get around the 7 parameter limit. \n- Or dumping cyclomatic complexity into a library,\n\n\nA strong system of ownership and reviewers keeps code clean, and maintainable. I would perfer not to limit either the maintainers or the devs in such a strict way",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 60
      },
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04788a1f_e27036fb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-03T00:11:34Z",
      "side": 1,
      "message": "I think Ed makes a good point about excluding these settings from the `WarningsAsErrors` set. That at least gives maintainers some automated feedback on contributions without enforcing the style.",
      "parentUuid": "7702007d_63775ac2",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 60
      },
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d93b2d6_dd02c97e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-10-03T12:13:08Z",
      "side": 1,
      "message": "I\u0027m unsure about it. Picked the latest jenkins run from ci-repository as an example (https://jenkins.openbmc.org/job/ci-repository/74640/console). Here, very many warnings are displayed, and would almost certainly be ignored by \u003e90% of developers, as the job was successful.\n\nPeople almost never care about warnings. They just get buried in the endless amount of logs.\n\nRegarding the point about strict adherence: Ed mentioned (over here https://gerrit.openbmc.org/c/openbmc/bmcweb/+/66823) that certain functions\ncan be excluded from some checks by using NOLINT. \n\nAnd i agree that some functions such as constructors might take many parameters for good reasons, and some functions are just inherently nontrivial, with lots of branches and splitting them up for the sake of cyclomatic complexity would just make them more confusing.\n\nThat\u0027s part of the reason i proposed very lax thresholds in the beginning, until i was asked to back up the values. Cpp Core Guidelines are more strict.\n\nBut using NOLINT we can just exempt some parts of the code from these rules.",
      "parentUuid": "04788a1f_e27036fb",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 60
      },
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ddd25b5_4f64a4d9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-03T23:09:55Z",
      "side": 1,
      "message": "\u003e People almost never care about warnings. They just get buried in the endless amount of logs.\n\u003e \n\nEd\u0027s idea was that the warnings would be something that *maintainers* can reference, for a period, while we evaluate whether these settings are something we want to enforce. I don\u0027t think he was suggesting that we should expect contributors to dig into the warnings if CI gave the patch a Verified+1.",
      "parentUuid": "6d93b2d6_dd02c97e",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 60
      },
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a831eae_10949371",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-10-04T08:19:56Z",
      "side": 1,
      "message": "I\u0027m all for first enabling the new checks as warnings.\nAnd i am certain we should enforce these checks (with NOLINT exceptions) for every repo, after it comes into compliance.\n\nReadability is essential for maintainers to be able to efficiently review changes and for contributors to make changes without introducing new bugs in functions with 200+ lines of code and deep nesting of control flow.\n\nI don\u0027t see how refactoring can be done otherwise in a project like this, where many people submit patches to many repositories which all might introduce new checks or behaviors into already existing functions. The patch might work and be correct but the function keeps on growing and it gets harder to change it without fear of breaking something. And making Maintainers responsible for refactoring does not scale...\n\nJust my opinion :)",
      "parentUuid": "0ddd25b5_4f64a4d9",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 60
      },
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "026628f4_26016570",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T09:51:12Z",
      "side": 1,
      "message": "Yes, it seems we are agreeing with each other.",
      "parentUuid": "1a831eae_10949371",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 60
      },
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26913852_f483eb97",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-05T17:14:37Z",
      "side": 1,
      "message": "\u003e And i am certain we should enforce these checks (with NOLINT exceptions) for every repo, after it comes into compliance.\n\nI can\u0027t say I\u0027m as certain about these being hard failures, which is why I\u0027d like to see how much code we can actually get cleaned up with this.  NOLINT warnings everywhere makes code less readable IMO, so the goal should be NOLINT is the uncommon exception.\n\nTake note that we use cppcheck as it stands today with warnings enabled, but result ignored in the build system, so there is some precedent for running static analysis and using manual human effort to find the issues.\n\n\u003e Readability is essential for maintainers to be able to efficiently review changes and for contributors to make changes without introducing new bugs in functions with 200+ lines of code and deep nesting of control flow.\n\nAs a maintainer, I find that it\u0027s significantly more to do with how well the code path is tested, and how organized the code is, rather than directly how many lines a function is, but I\u0027m happy to have any improvement.\n\n\u003e I don\u0027t see how refactoring can be done otherwise in a project like this\n\n\u003e The patch might work and be correct but the function keeps on growing and it gets harder to change it without fear of breaking something\n\nOnly if maintainers don\u0027t do their jobs.  I routinely tell people to break out code into smaller functions before adding large blocks of code to an existing method.  Maybe you\u0027ve seen differently?\n\nMost of the really bad code in bmcweb was written that way by the author, many of whom disappeared from the project once their code was accepted.  It\u0027s a hard tradeoff to be able to say \"This code is ugly, but solves the engineering problem, so we should accept it, warts and all.\"\n\n\n\u003e That\u0027s part of the reason i proposed very lax thresholds in the beginning, until i was asked to back up the values\n\nThe most important thing here is that you proposed lax thresholds without any real plan to get to consistency or proper enforcement.",
      "parentUuid": "026628f4_26016570",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 60
      },
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4eaf5f72_65c842d4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-02T21:25:44Z",
      "side": 1,
      "message": "I think this is deprecated?  We can just point at the coding standard?",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 35,
        "endChar": 65
      },
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d871a2c_56f6d2d3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-10-03T12:13:08Z",
      "side": 1,
      "message": "i removed the fluff.",
      "parentUuid": "4eaf5f72_65c842d4",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 35,
        "endChar": 65
      },
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40b1ef82_8daae69a",
        "filename": "style/cpp/.clang-tidy",
        "patchSetId": 3
      },
      "lineNbr": 5,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-02T21:25:44Z",
      "side": 1,
      "message": "Do we want to start with these only as warnings instead of hard errors?\n\nI think that would be a much easier way to roll this out.  We can take a look at what kinds of failures this flags, and as repos come into spec, or add NOLINT flags where appropriate, we can have repos start enforcing the rule.\n\nThen once all repos are enabled, you can work with maintainers to start refactoring the functions to be more to your liking.  Seem reasonable?",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 5,
        "endChar": 21
      },
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9460d2b_127893e9",
        "filename": "style/cpp/.clang-tidy",
        "patchSetId": 3
      },
      "lineNbr": 5,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-03T00:11:34Z",
      "side": 1,
      "message": "\u003e Do we want to start with these only as warnings instead of hard errors?\n\u003e \n\u003e I think that would be a much easier way to roll this out.  We can take a look at what kinds of failures this flags, and as repos come into spec, or add NOLINT flags where appropriate, we can have repos start enforcing the rule.\n\u003e \n\u003e Then once all repos are enabled, you can work with maintainers to start refactoring the functions to be more to your liking.  Seem reasonable?\n\n+1",
      "parentUuid": "40b1ef82_8daae69a",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 5,
        "endChar": 21
      },
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7e0f260_18183d96",
        "filename": "style/cpp/.clang-tidy",
        "patchSetId": 3
      },
      "lineNbr": 5,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-10-03T12:13:08Z",
      "side": 1,
      "message": "Agreed.",
      "parentUuid": "c9460d2b_127893e9",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 5,
        "endChar": 21
      },
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a50174a8_fba19d07",
        "filename": "style/cpp/.clang-tidy",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-10-02T21:25:44Z",
      "side": 1,
      "message": "Is it possible to include comments with the links to F.2 and F.2 in cppcoreguidlelines so it\u0027s more clear why these are here?  If this file doesn\u0027t support comments, no need to worry about it, but it would be nice to have a pointer.  Most of the other rules we have the clang-tidy rule itself links to the check, so we don\u0027t really need a link.",
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa14fa9e_1b61bffe",
        "filename": "style/cpp/.clang-tidy",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-03T00:11:34Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "a50174a8_fba19d07",
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "decb1d6e_24312614",
        "filename": "style/cpp/.clang-tidy",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2023-10-03T12:13:08Z",
      "side": 1,
      "message": "included the comments.",
      "parentUuid": "aa14fa9e_1b61bffe",
      "revId": "abb937a742b60625ef9e44cda96778cc28253efe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}