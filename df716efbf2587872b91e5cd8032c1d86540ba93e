{
  "comments": [
    {
      "key": {
        "uuid": "e6bea048_025b2546",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2020-04-23T12:37:45Z",
      "side": 1,
      "message": "Looks like Oracle has implemented something along the same lines, but it\u0027s not open source. Maybe they would be willing to open it, if they\u0027re participating in OpenBMC? :)\nhttps://docs.oracle.com/cd/E37444_01/html/E37451/z40000061645388.html",
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a48dda8c_eef4d254",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-04-24T10:40:49Z",
      "side": 1,
      "message": "Since \"Get Channel Authentication\" is outside of DTLS, doesn\u0027t that leave you just as exposed to a MiM?  I can just tell you that this BMC doesn\u0027t support DTLS, capture your RMCP+ content and forward it on to the BMC as DTLS.\n\nMaybe this isn\u0027t much different from HTTPS though where a browser falls back to HTTP and we have to leave it up to the client to add a --ensure-im-using-dtls option.",
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf289375_807910b4",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-04-23T11:26:54Z",
      "side": 1,
      "message": "What\u0027s the use in overriding the reserved bits if we can tell that DTLS is supported just by looking at OpenBMC id in bytes 6:8 and some bits in byte 9?\nI\u0027m worried that treating reserved bits in the proposed way may bring some incompatibility with existing BMC implementations for the IPMI tools like ipmitool et. al.",
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7be8b8a7_e04d6aef",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2020-04-23T12:37:45Z",
      "side": 1,
      "message": "While I\u0027m also wary of using the reserved bits, tying this to OpenBMC identification may limit the proliferation of this - what if other BMC stack vendors would want to implement this? In addition, not all OpenBMC versions would support this mechanism, so some sort of dynamic discovery is I think preferred.",
      "parentUuid": "cf289375_807910b4",
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75495781_1c21798a",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2020-04-24T22:36:12Z",
      "side": 1,
      "message": "\u003e What\u0027s the use in overriding the reserved bits if we can tell that DTLS is supported just by looking at OpenBMC id in bytes 6:8 and some bits in byte 9?\nI\u0027m worried that treating reserved bits in the proposed way may bring some incompatibility with existing BMC implementations for the IPMI tools like ipmitool et. al.\n\nThis entire thing is \"off-spec\". We are creating a de-facto standard here for running RMCP+ over DTLS. That won\u0027t currently work with any tool. I was hoping that since we have ipmitool contributors, the ipmitool maintainer, OpenBMC IPMI contributors and OpenBMC IPMI maintainers here in the same room, we could come to a reasonable implementation on both ends of the wire.\n\nThere are no plans for an updated IPMI specification, so it is very unlikely that any reserved bits would get used in a future specification. Even if they were, we could probably convince the spec writers to include this de-facto standard in the IPMI specification, especially if it has wide acceptance.\n\nThat being said, I am not tied to exactly *this* version of the standard. I just wanted to get something rolling. It is time we get rid of RMCP+.",
      "parentUuid": "7be8b8a7_e04d6aef",
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ec5d795_88b1b112",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-04-23T11:26:54Z",
      "side": 1,
      "message": "strictly speaking, it is \"IANA PEN\", not just \"IANA\".",
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fa2af5a_591041c1",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2020-04-24T22:36:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2ec5d795_88b1b112",
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe704a14_91307937",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-04-23T11:26:54Z",
      "side": 1,
      "message": "I would right away define some OEM command to fetch the version of encoding of this byte.\nThat is, if bytes 6-8 are OpenBMC PEN, then fetch the version via an OEM command and then based on that data decode this byte 9. That version could also be used to differentiate other OEM field meanings.",
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49a83fe3_5a86c2ae",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-04-23T11:26:54Z",
      "side": 1,
      "message": "I\u0027d say \"If ... provides OpenBMC IANA PEN in bytes 6-8 and \u003csomething else\u003e\", leaving those reserved bits alone.",
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ee15bb5_d1889cae",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-04-23T11:26:54Z",
      "side": 1,
      "message": "Why accept 4 with \u0027STARTTLS\u0027 ? Let\u0027s limit it to just 5.",
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41b96bdf_aaf0d923",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2020-04-24T22:36:12Z",
      "side": 1,
      "message": "The idea was that if 4 is set, then the session would not by attempting to use mutual TLS authentication. But we could just stick with 5 and then require some sort of authentication after the TLS session is started (assuming that mTLS auth did not happen).",
      "parentUuid": "9ee15bb5_d1889cae",
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65a90c52_eacab947",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-04-23T11:26:54Z",
      "side": 1,
      "message": "I suppose, if we only leave 5 (OEM proprietary auth), then the BMC would respond with a CCh completion code (Invalid data field in request) if no OEM proprietary auth is supported or with a 81h (invalid user name) indeed if there is some OEM auth, but there was no user named STARTTLS. An IPMI client though should not attempt to request a session challenge for STARTTLS \u0027user\u0027 if Get Channel Auth Capabilities didn\u0027t report an OpenBMC identification and the corresponding OEM command mentioned earlier didn\u0027t indicate support for RMCP+DTLS.",
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "458d9ece_5efb0de3",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 125,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-04-23T11:26:54Z",
      "side": 1,
      "message": "I guess we\u0027ll need a separate document to capture all the OEM / Device-specific completion codes (range 01h-7Eh) used by OpenBMC. Also, doesn\u0027t this specific case fall under 06h (No matching authentication payload) ?",
      "range": {
        "startLine": 125,
        "startChar": 49,
        "endLine": 125,
        "endChar": 52
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "089ca80f_e352a6e5",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 125,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2020-04-24T22:36:12Z",
      "side": 1,
      "message": "This is a bonafide IPMI command and needs to respond with an IPMI completion code, not a RAKP status code. It might be possible to use Invalid Parameter or something instead.",
      "parentUuid": "458d9ece_5efb0de3",
      "range": {
        "startLine": 125,
        "startChar": 49,
        "endLine": 125,
        "endChar": 52
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d675bfd5_af75715c",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 128,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-04-23T11:26:54Z",
      "side": 1,
      "message": "Looks very much like RMCP+ 04h (Invalid authentication algorithm).",
      "range": {
        "startLine": 128,
        "startChar": 28,
        "endLine": 128,
        "endChar": 66
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "006ab5af_bbeb5b32",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 128,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2020-04-24T22:36:12Z",
      "side": 1,
      "message": "This is a bonafide IPMI command and needs to respond with an IPMI completion code, not a RAKP status code. It might be possible to use Invalid Parameter or something instead.",
      "parentUuid": "d675bfd5_af75715c",
      "range": {
        "startLine": 128,
        "startChar": 28,
        "endLine": 128,
        "endChar": 66
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7f190b7_e2455181",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-04-23T11:26:54Z",
      "side": 1,
      "message": "How exactly that is specified in the request? I suppose auth type 5 (OEM) implies password auth, doesn\u0027t it? I don\u0027t see any other options.",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 135,
        "endChar": 40
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bbcd906_3af786d9",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2020-04-24T22:36:12Z",
      "side": 1,
      "message": "I intended 4 to be password auth and 5 to be mTLS auth.",
      "parentUuid": "d7f190b7_e2455181",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 135,
        "endChar": 40
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a5e9459_a9964ef6",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2020-04-23T12:37:45Z",
      "side": 1,
      "message": "I wonder how does this match the foundational idea of no longer storing passwords on the BMC? Do you mean that something like \"straight password\" would be used here and the BMC would check that against PAM? Just trying to understand the idea.",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 136,
        "endChar": 69
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56d1839d_97873b83",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2020-04-24T22:36:12Z",
      "side": 1,
      "message": "Yes. While not perfect, a straight password (once the TLS session is established) could be used by PAM to authenticate the user. This way, we would no longer need to store the plaintext password on the BMC.",
      "parentUuid": "3a5e9459_a9964ef6",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 136,
        "endChar": 69
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0c8833d_ab35b922",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-04-23T11:26:54Z",
      "side": 1,
      "message": "Again, how exactly in that command anyone could request a certificate authentication?",
      "range": {
        "startLine": 138,
        "startChar": 3,
        "endLine": 138,
        "endChar": 74
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7138f993_307bf3ee",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2020-04-23T12:51:54Z",
      "side": 1,
      "message": "And in general, the request for client certificate is a part of the standard TLS handshake, so I don\u0027t think we need to duplicate this piece at the IPMI level.",
      "parentUuid": "c0c8833d_ab35b922",
      "range": {
        "startLine": 138,
        "startChar": 3,
        "endLine": 138,
        "endChar": 74
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c812cc2_3dd296d0",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2020-04-24T22:36:12Z",
      "side": 1,
      "message": "I guess at this point, it is more a question of how do we detect if the user has been authenticated after the session has been established.\n\nThe client knows if it has attempted mTLS auth. I assume they will get some sort of error if that does not succeed. If it failed and the BMC supports password authentication, they need to then start that. If the BMC does not support password authentication, it would need to bail on the connection then.",
      "parentUuid": "7138f993_307bf3ee",
      "range": {
        "startLine": 138,
        "startChar": 3,
        "endLine": 138,
        "endChar": 74
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d047d5eb_3fa069a1",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2020-04-23T12:37:45Z",
      "side": 1,
      "message": "That would be \"TLS\" (the protocol), not OpenSSL (the library)",
      "range": {
        "startLine": 139,
        "startChar": 45,
        "endLine": 139,
        "endChar": 52
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a421396c_835a1149",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2020-04-24T22:36:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d047d5eb_3fa069a1",
      "range": {
        "startLine": 139,
        "startChar": 45,
        "endLine": 139,
        "endChar": 52
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "983f6b69_0219757b",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-04-23T11:26:54Z",
      "side": 1,
      "message": "Won\u0027t CCh (Invalid data field in request) or C1h (Invalid command) suffice? I don\u0027t like the idea of hi-jacking reserved entities, be it bits or completion codes.",
      "range": {
        "startLine": 143,
        "startChar": 69,
        "endLine": 143,
        "endChar": 72
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "208f1fd9_64af4d27",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2020-04-24T22:36:12Z",
      "side": 1,
      "message": "The error code here corresponds to byte 2 of the RAKP2/RAKP4 responses, not a standard IPMI completion code. The codes are defined in Section 13.24 of the IPMI spec (RMCP+ and RAKP Message Status Codes). Maybe 12h (Illegal or unrecognized parameter?)",
      "parentUuid": "983f6b69_0219757b",
      "range": {
        "startLine": 143,
        "startChar": 69,
        "endLine": 143,
        "endChar": 72
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb6b229e_97da7258",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2020-04-23T12:37:45Z",
      "side": 1,
      "message": "nit: this should be \"to\"",
      "range": {
        "startLine": 144,
        "startChar": 14,
        "endLine": 144,
        "endChar": 15
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0c3a88d_05a98900",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2020-04-24T22:36:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cb6b229e_97da7258",
      "range": {
        "startLine": 144,
        "startChar": 14,
        "endLine": 144,
        "endChar": 15
      },
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c439fa3c_ae5c1caf",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 164,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2020-04-23T12:37:45Z",
      "side": 1,
      "message": "In the name of making as few changes into protocols as possible (because that may have unforeseen security consequences), I wonder if we could simply do a first-message analysis at the BMC side and if it\u0027s the DTLS ClientHello - we do RMCP+ over DTLS with appropriate authentication mechanism modifications (because we know it\u0027s the DTLS-enabled client that\u0027s talking to us), but if it\u0027s a standard IPMI RMCP+ message, we then turn to the legacy flows (if enabled by BMC admin). When user runs a tool, they would anyway specify the mode they want to run in explicitly (or the tool would have it in the defaults), so it seems to me we could avoid this dynamic determination/fallback with Get Channel Authentication Capabilities changes.",
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cef533e_8340541e",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 164,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2020-04-24T22:36:12Z",
      "side": 1,
      "message": "This was actually the first idea I had come up with, but then abandoned it. When I was coming up with this idea, I was reading about other solutions and I came across the SMTP STARTTLS extension to upgrade the unencrypted connection to an encrypted one. I modeled it after that because I figured that there may have been some issues with doing what you propose here.\n\nIf there are not any technical issues with this idea, I would agree that we should promote this to the chosen solution to avoid the messaging changes I came up with.",
      "parentUuid": "c439fa3c_ae5c1caf",
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6bee4186_afcfb12f",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 190,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2020-04-23T11:26:54Z",
      "side": 1,
      "message": "There is also an option to run OpenVPN on OpenBMC and tunnel all the IPMI traffic inside a VPN. Not very convenient if there are multiple BMCs to communicate with.",
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c9886e6_e99b9689",
        "filename": "designs/ipmi-over-dtls.md",
        "patchSetId": 2
      },
      "lineNbr": 190,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2020-04-24T22:36:12Z",
      "side": 1,
      "message": "I will add that as an option. I had not considered it.",
      "parentUuid": "6bee4186_afcfb12f",
      "revId": "df716efbf2587872b91e5cd8032c1d86540ba93e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}