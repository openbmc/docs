{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e750f391_c178c698",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-10T23:19:00Z",
      "side": 1,
      "message": "@rushtotom@gmail.com Looks like you resolved all the comments by replying to them. If you haven\u0027t made a change and there is an open question, please keep the comment open until the question is resolved or a conclusion has been reached.",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e3f49ad_5d5a502c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-02-14T05:17:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e750f391_c178c698",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "431e17e8_6592ec60",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-10T23:59:48Z",
      "side": 1,
      "message": "I don\u0027t agree that its not supported. I already provided 2 solutions via our discord conversation earlier -\n\n1. Multipart PLDM Image with Target List supplied - BMCWeb sends the image to individual updater backends by using the Target List (invoked using Update Interface). Based on relevant component descriptors, backends will process the image.\n2. Multipart PLDM Image with no Target List supplied - BMCWeb can discover all update interfaces and send the image to all updater backend. If the backend can parse the image and the package contains the image applicable to it (based on descriptor), it will process it, otherwise it would be dropped.\n\nSo, i think you have to specifically state why above doesn\u0027t work for you which clarifies why you are looking for a different solution.",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08a4a171_e91dc1df",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-02-14T05:17:32Z",
      "side": 1,
      "message": "\u003eIf the backend can parse the image and the package contains the image applicable to it (based on descriptor), it will process it, otherwise it would be dropped.\n\nThis wouldn\u0027t work for us, we are relying on PLDM packaging as a single package for PLDM and Non-PLDM devices, we cannot expect all code updaters to rewritten or mandated implement PLDM package parsing, this is highlighted in the problem statement. [1]. Code updaters dropping is also not an options.\n\n[1] *5.3 Not all code updaters can be expected to interpret PLDM package format,\nso forwarding the PLDM package to every code updater is not feasible.*",
      "parentUuid": "431e17e8_6592ec60",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16ea2eb5_3cc6b6ef",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-28T00:35:09Z",
      "side": 1,
      "message": "\u003e \u003eIf the backend can parse the image and the package contains the image applicable to it (based on descriptor), it will process it, otherwise it would be dropped.\n\u003e \n\u003e This wouldn\u0027t work for us, we are relying on PLDM packaging as a single package for PLDM and Non-PLDM devices, we cannot expect all code updaters to rewritten or mandated implement PLDM package parsing, \n\nAs i understand correctly in your downstream solution the individual code updaters works on passed in binary blobs (Extracted from PLDM package). So, the main rationale for the new updater is because you don\u0027t want to change the downstream code?\nAlso, how does these code updaters connect to the entity which parses the PLDM package, is it part of same daemon (as Updater) or via D-bus ?\n \n\n\u003e this is highlighted in the problem statement. [1]. Code updaters dropping is also not an options.\n\u003e \n\u003e [1] *5.3 Not all code updaters can be expected to interpret PLDM package format,\n\u003e so forwarding the PLDM package to every code updater is not feasible.*\n\nJust to be clear here Code Updater is not just the entity which acts on binary blob, there is some infra that needs to act before that (Parsing Package, creating interfaces etc), which can be the common code written for non-PLDM devices.",
      "parentUuid": "08a4a171_e91dc1df",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1572aabc_ed89b2ea",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-03-11T07:02:39Z",
      "side": 1,
      "message": "\u003eAs i understand correctly in your downstream solution the individual code updaters works on passed in binary blobs (Extracted from PLDM package). So, the main rationale for the new updater is because you don\u0027t want to change the downstream code?\n\nWe are aligned with the upstream design of code updaters of implementing the StartUpdate interface and callers passing the fd, so that firmware blob need not be extracted. We also want vendors to write their code updaters without the requirement that PLDM package is passed to it. In which case, code-update-manager will bridge from PLDM package to component format which the updater will process.\n\n\u003eAlso, how does these code updaters connect to the entity which parses the PLDM package, is it part of same daemon (as Updater) or via D-bus ?\ncode\n\nIt is covered in the block diagram[1]. code-update-manager will parse the PLDM package and forward the component info to updater. The code-update-manager and updater will use D-Bus.\n[1] https://gist.github.com/tomjoseph83/eb79892d52f95f0fb784599cd7c14808#multi-part-images\n\n\u003eJust to be clear here Code Updater is not just the entity which acts on binary blob, there is some infra that needs to act before that (Parsing Package, creating interfaces etc), which can be the common code written for non-PLDM devices.\n\nWe are not maintaining all the code updaters, some are maintained by vendors. This also aligns with the code update design that there is no common packaging format.",
      "parentUuid": "16ea2eb5_3cc6b6ef",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2eab754a_17bd4b89",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-04-02T22:42:04Z",
      "side": 1,
      "message": "\u003e \u003eAs i understand correctly in your downstream solution the individual code updaters works on passed in binary blobs (Extracted from PLDM package). So, the main rationale for the new updater is because you don\u0027t want to change the downstream code?\n\u003e \n\u003e We are aligned with the upstream design of code updaters of implementing the StartUpdate interface and callers passing the fd, so that firmware blob need not be extracted. We also want vendors to write their code updaters without the requirement that PLDM package is passed to it.  In which case, code-update-manager will bridge from PLDM package to component format which the updater will process.\n\nFirst, there will be some packaging for sure, but who unpackages is the question. Secondly, there still needs to be some code which implements the StartUpdate interface for the vendor, so its not that vendor code will be completely untouched and can just be integrated without any change.\nI can understand we don\u0027t want vendors to unpackage, but that doesn\u0027t mean a new daemon is needed to do that job. We have already written common code in phosphor-bmc-code-mgmt which can do the unpackaging and also provide high level classes to implement required interfaces. This solves both #1 and #2 i mentioned above. This common code can be extended to add support for any kind of packaging.\n\n\u003e \n\u003e \u003eAlso, how does these code updaters connect to the entity which parses the PLDM package, is it part of same daemon (as Updater) or via D-bus ?\n\u003e code\n\u003e \n\u003e It is covered in the block diagram[1]. code-update-manager will parse the PLDM package and forward the component info to updater. The code-update-manager and updater will use D-Bus.\n\u003e [1] https://gist.github.com/tomjoseph83/eb79892d52f95f0fb784599cd7c14808#multi-part-images\n\nSo, this makes it clear that Updater will implement the Update D-Bus interface, then why not use the common code in the Code Updater (which parses image, provides usage classes etc) rather than introducing a middle agent just for image parsing.\n\n\u003e \n\u003e \u003eJust to be clear here Code Updater is not just the entity which acts on binary blob, there is some infra that needs to act before that (Parsing Package, creating interfaces etc), which can be the common code written for non-PLDM devices.\n\u003e \n\u003e We are not maintaining all the code updaters, some are maintained by vendors. \n\nI can understand, but still you need to define a hook into the Update D-Bus interface for this vendor code which i suppose is going to be your code. Rest all logic is already being taken care by the common code.\n\n\u003e This also aligns with the code update design that there is no common packaging format.\n\nThis has already been the requirement in the current design, but that doesn\u0027t mean we need to define a new daemon  for this as i mentioned above that common code is already doing this job.",
      "parentUuid": "1572aabc_ed89b2ea",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6bd4f5c_058c0dd2",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-04-11T10:39:55Z",
      "side": 1,
      "message": "@deepak.kodihalli.83@gmail.com Can you add your thoughts to suggestions by Jagpal on the specific requirement?\n\n`Not all code updaters can be expected to interpret PLDM package format, so forwarding the PLDM package to every code updater is not feasible.`\n\nThe suggestion is non-PLDM code updaters to use the common code in phosphor-bmc-code-mgmt for non-PLDM code updaters for creating D-Bus interfaces and libpldm for parsing non-PLDM component image. So the expectation is all non-PLDM code updaters will leverage this.",
      "parentUuid": "2eab754a_17bd4b89",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0f60fee_818aab8b",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-10T23:59:48Z",
      "side": 1,
      "message": "As i mentioned earlier this is something which is already supported by the current design. I was asked to first stabilize the single component update implementation and then implement the multi component flow. That is something you guys can definitely work on in BMCWeb since you have an active use case.",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1381c5d_48520010",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-02-14T05:17:32Z",
      "side": 1,
      "message": "With the current design if multiple targets are passed for update API would it return a single RF task or multiple RF tasks? Our requirement is to return a single RF task.\n\nhttps://github.com/openbmc/docs/blob/master/designs/code-update.md#proposed-end-to-end-flow",
      "parentUuid": "e0f60fee_818aab8b",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f534a6f_7d1ca379",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-28T00:35:09Z",
      "side": 1,
      "message": "\u003e With the current design if multiple targets are passed for update API would it return a single RF task or multiple RF tasks? \n\nThis was discussed with Redfish Forum https://redfishforum.com/post/4045 and the options are mentioned there. \n1. Single Task.\n2. Parent Task with bunch of SubTasks with SubTasks messages flowing to ParentTask.\n\nI had started discussion on discord for this, but it was de-prioritized for single device update feature development.\n\n\u003e Our requirement is to return a single RF task.\n\nAny specific reason for this requirement?\n\nAs mentioned by MichaelR in the post above, all the messages from child shall flow to parent, so i think you should be covered there, in case of option#2 as well.\n\u003e \n\u003e https://github.com/openbmc/docs/blob/master/designs/code-update.md#proposed-end-to-end-flow",
      "parentUuid": "a1381c5d_48520010",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e8110a4_b4b984cf",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-03-11T07:02:39Z",
      "side": 1,
      "message": "Since single task is the preference of the community, it aligns for us, marking it as resolved.",
      "parentUuid": "9f534a6f_7d1ca379",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18b5aff3_00dccbee",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-10T23:59:48Z",
      "side": 1,
      "message": "This is intentional and are not suppose to be forwarded. BMCWeb is suppose to discover the update interface and trigger the update directly by passing image and other attributes.",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9647d733_987a543c",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-02-14T05:17:32Z",
      "side": 1,
      "message": "This is discussed in an earlier comment and closure will be tracked there, marking it as resolved.",
      "parentUuid": "18b5aff3_00dccbee",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fda2d7a_a4bebc91",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-10T23:59:48Z",
      "side": 1,
      "message": "This was already a requirement in the original design too on not restricting the image packaging.\n\nAs to answer the requirement here - If the updater cannot interpret the PLDM package, it will just ignore or skip it. Why is there a problem in that?",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7e16e4a_551891f0",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-02-14T05:17:32Z",
      "side": 1,
      "message": "This is a combination problem with a single PLDM package for all devices, but all code updaters cannot be expected to support PLDM package format. code-update manager has to offload the component image to these code updaters, skipping is not an option.",
      "parentUuid": "2fda2d7a_a4bebc91",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c5bc1a7_0f4572e3",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-28T00:35:09Z",
      "side": 1,
      "message": "\u003e This is a combination problem with a single PLDM package for all devices, but all code updaters cannot be expected to support PLDM package format. code-update manager has to offload the component image to these code updaters, skipping is not an option.\n\nI am not saying \"all code updaters cannot be expected to support PLDM package format\", but the updater needs to understand some imaging format, so it can do some validations otherwise it will start updating without any validations.",
      "parentUuid": "e7e16e4a_551891f0",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4184bf1e_869d7ca7",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-03-11T07:02:39Z",
      "side": 1,
      "message": "\u003eI am not saying \"all code updaters cannot be expected to support PLDM package format\", but the updater needs to understand some imaging format, so it can do some validations otherwise it will start updating without any validations.\n\nI think we are on the same page here, also discussed in the previous comment. There will be format for the component images and subsequent validations, only thing to highlight here is that updaters don\u0027t have an explicit requirement that this component blob is inside a PLDM package. Marking this comment as resolved.",
      "parentUuid": "4c5bc1a7_0f4572e3",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e77d0d7_8062d5b9",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 186,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-11T07:54:21Z",
      "side": 1,
      "message": "\"Provides update method, modified to include \u003cbr\u003e Targets,\"\n\nAlready mentioned above the Update DBus interface doesn\u0027t include the Targets as an arg as this interface already gets implemented on the specific software object path as all other interfaces below.",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7022ee1e_355f14a3",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 186,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-02-14T05:17:32Z",
      "side": 1,
      "message": "This is discussed in an earlier comment regarding Targets and closure will be tracked there, marking it as resolved.",
      "parentUuid": "8e77d0d7_8062d5b9",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e68770c2_0ca3d8d5",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 318,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-11T07:54:21Z",
      "side": 1,
      "message": "Just to be clear Update interface is associated with a software entity and not the code updater daemon itself as the interface resides on specific software instance path, so i don\u0027t think its applicable here.",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c00ec746_f16d7eae",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 318,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-02-14T05:17:32Z",
      "side": 1,
      "message": "I think this contradicts the existing design in multi-part section, where the Update interface is associated with the CodeUpdater by creating a logical firmware object, the difference being only in semantics.\n\nhttps://github.com/openbmc/docs/blob/master/designs/code-update.md#multi-part-images",
      "parentUuid": "e68770c2_0ca3d8d5",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db71a517_f15800cb",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 318,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-28T00:35:09Z",
      "side": 1,
      "message": "\u003e I think this contradicts the existing design in multi-part section, where the Update interface is associated with the CodeUpdater by creating a logical firmware object, the difference being only in semantics.\n\u003e \n\u003e https://github.com/openbmc/docs/blob/master/designs/code-update.md#multi-part-images\n\n\"the difference being only in semantics.\" Can you clarify on this?",
      "parentUuid": "c00ec746_f16d7eae",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af147035_92281a7d",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 318,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-03-11T07:02:39Z",
      "side": 1,
      "message": "https://github.com/openbmc/docs/blob/master/designs/code-update.md#multi-part-images\n\nIn the existing design for multi part image, the Update interface is implemented by logical firmware object created by code updater and not a real software entity. So similarly the proposal here is for code-update-manager to implement the Update interface.",
      "parentUuid": "db71a517_f15800cb",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "308ed545_080a9f85",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 318,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-04-02T22:42:04Z",
      "side": 1,
      "message": "\u003e https://github.com/openbmc/docs/blob/master/designs/code-update.md#multi-part-images\n\u003e \n\u003e In the existing design for multi part image, the Update interface is implemented by logical firmware object created by code updater and not a real software entity. So similarly the proposal here is for code-update-manager to implement the Update interface.\n\nI think there is some misunderstanding, so let me clarify. Here, the logical firmware object is mentioned for the device in case device consists of multiple components. But that doesn\u0027t mean each component will not have its own Version and Update Interface, which it will as i mentioned in another comment too. Each component can be individually representable (via FirmwareInventory URI) and updatable through Redfish.",
      "parentUuid": "af147035_92281a7d",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c43a266_4ff0d6f3",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 318,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-04-11T10:39:55Z",
      "side": 1,
      "message": "I think we are on the same page on this. So marking it resolved.\n\nLogical firmware object can be implemented when a code-updater has to handle multiple components. So PLDM UA will implement logical firmware object to handle a single package which has to handle multiple components.",
      "parentUuid": "308ed545_080a9f85",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26d2a3a1_9da9fca7",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 320,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-11T07:54:21Z",
      "side": 1,
      "message": "xyz.openbmc_project.Software.Manager\n\nWhere\u0027s the proposed definition for this Manager interface?",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5551d8aa_b54d7af7",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 320,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-02-14T05:17:32Z",
      "side": 1,
      "message": "As a starting proposal, it would be an empty interface with no properties. Further revisions can be tracked through PDI interface review.",
      "parentUuid": "26d2a3a1_9da9fca7",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "018b91e2_5a5bafad",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 320,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-28T00:35:09Z",
      "side": 1,
      "message": "\u003e As a starting proposal, it would be an empty interface with no properties. Further revisions can be tracked through PDI interface review.\n\nFor the design clarity we need to understand what the PDI interface looks like as i have been asked for it in past. Can you please raise a gerrit PR even if its an empty interface along with the service names and object path specifications and include it in design.",
      "parentUuid": "5551d8aa_b54d7af7",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f9eee5d_d0dd22e5",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 320,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-03-11T07:02:39Z",
      "side": 1,
      "message": "Acknowledged, will raise the gerrit PR for the D-Bus interface.",
      "parentUuid": "018b91e2_5a5bafad",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "943f8d9e_44b73cc8",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 321,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2025-02-11T07:54:21Z",
      "side": 1,
      "message": "How does the BMCWeb will know if the request should go to regular flow or this new flow? Are you suggesting both the flows won\u0027t co-exist at runtime?",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afd249f6_8b1aa2f6",
        "filename": "designs/code-update.md",
        "patchSetId": 8
      },
      "lineNbr": 321,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2025-02-14T05:17:32Z",
      "side": 1,
      "message": "The proposal suggests that both flows co-exist, I can highlight that in the next revision of the proposal.",
      "parentUuid": "943f8d9e_44b73cc8",
      "revId": "ccd4dfebb19de8e395acadc9d2a6408f87fc431a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}