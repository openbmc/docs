{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fea5b569_18e2a8ff",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-08-30T19:11:29Z",
      "side": 1,
      "message": "I wonder if we need a requirement to support devices that have primary/backup designs. For example, some systems have 2 flash chips for BMC firmware. Some have a single emmc that it is carved up into 2 copies. Is that all abstracted by the service implementing the update?",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60cbf142_8543b134",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-31T16:13:48Z",
      "side": 1,
      "message": "\u003e I wonder if we need a requirement to support devices that have primary/backup designs.\n\nWe could add the requirement, but this feels device specific, and unimportant to this level.  I don\u0027t know of any \"standard\" for AB updates, so I suspect each device daemon will implement its own mechanism.\n\n\u003e For example, some systems have 2 flash chips for BMC firmware. Some have a single emmc that it is carved up into 2 copies. Is that all abstracted by the service implementing the update?\n\nYes.",
      "parentUuid": "fea5b569_18e2a8ff",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "193804de_d286f92e",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-06T22:28:54Z",
      "side": 1,
      "message": "Yes, i agree with Ed that it looks more of a device specific detail and would be better if device specific daemon handles it as per their fit.",
      "parentUuid": "60cbf142_8543b134",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2945afdc_78179852",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2023-08-31T18:16:57Z",
      "side": 1,
      "message": "Is there any thought given to being able to package these device images into the BMC image, and then having the BMC code do the device updates after it starts up with an image that contains new versions?  Or at least there wouldn\u0027t be a reason that we couldn\u0027t write some code to do the updates with these new daemons say when the BMC gets to Ready after a code update?  IBM only ever provides a single image for all of its firmware.",
      "range": {
        "startLine": 47,
        "startChar": 3,
        "endLine": 47,
        "endChar": 38
      },
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2319df8_fd74cfe2",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-06T22:28:54Z",
      "side": 1,
      "message": "@Matt, I am not sure if providing a new BMC image for updating a related component would be reasonable. This way every such update cycle will result in bumping the BMC version as it will get tied to it. It will also increase the BMC image size. I would let other folks to share their thoughts.",
      "parentUuid": "2945afdc_78179852",
      "range": {
        "startLine": 47,
        "startChar": 3,
        "endLine": 47,
        "endChar": 38
      },
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41323d28_12426b83",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-31T18:06:01Z",
      "side": 1,
      "message": "One thing I missed the first time around, that\u0027s kind of implied, but I think should explicitly be called out is the ability to map a given physical component to the update \"slot\" for that device.  Given that we\u0027re going to support multiple devices and not have a custom format that determines what devices an update payload supports, that would mean that a user needs to be able to ask Redfish to implement the UpdateService.Targets property, which would need to have some mapping in dbus (X firmware update API is for Y processor/drive/power supply).\n\nI don\u0027t see that called out here.  If you\u0027d rather deal with that in a PDI \n (and presumably entity-manager) review, that\u0027s fine with me.",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eaae742c_f613c1a2",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-06T22:28:54Z",
      "side": 1,
      "message": "Done.\n\nPlease refer to the update flow sequence diagram. It covers how does a Redfish Target URI gets mapped to the DBus path. I have added a section on Associations in doc for more details on this.\nAlso the design is not imposing any restriction for any specific image format.",
      "parentUuid": "41323d28_12426b83",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a907c7e7_3a9fdf28",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-31T16:13:48Z",
      "side": 1,
      "message": "Please don\u0027t point to personal repositories in project documents.",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 60,
        "endChar": 70
      },
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4378a2d_15e86cf9",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-06T22:28:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a907c7e7_3a9fdf28",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 60,
        "endChar": 70
      },
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61a13cf8_4f27876d",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 147,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-08-30T19:11:29Z",
      "side": 1,
      "message": "We\u0027ve had memory issues before (our images can be 100MB+ in size). Multiple of these sticking around in memory for parallel updates could be dangerous. Is there any chance of being able to still offload to /tmp and then send the fd to that file to the update services vs. keeping it all in bmcweb memory? Does allowing bmcweb access to /tmp really raise security concerns?",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cb953a7_7f60665a",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 147,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-31T16:13:48Z",
      "side": 1,
      "message": "\u003e  Is there any chance of being able to still offload to /tmp and then send the fd to that file to the update services\n\nWhat does this fix?  /tmp uses ram, so does bmcweb.  In theory it\u0027s pretty trivial to write the FD in, say 8k increments so we don\u0027t double count memory, but I don\u0027t see this as terribly important to this design, but an implementation detail.\n\nI suspect this needs to say \"Implementations need to implement appropriate memory limits to prevent parallel updates from running the bmc out of memory.\"",
      "parentUuid": "61a13cf8_4f27876d",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8e993dc_5b4bf3b5",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 147,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-06T22:28:54Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "1cb953a7_7f60665a",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5695ef2_19cdfe94",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 205,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-31T16:13:48Z",
      "side": 1,
      "message": "Can you give some more details here?  In the simplest case, lets take a power supply that supports PMBUS update, but requires no other commands run to that device while the update is in progress (as is pretty common), how would this interface prevent access to that device from, for example, dbus-sensors?  We likely can\u0027t stop ALL sensor scanning, because that would be a thermal problem for the server, so how would this interface know WHICH things to stop scanning?",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43ee18a0_cbcd84da",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 205,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-06T22:28:54Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "b5695ef2_19cdfe94",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "957a2e83_7808d463",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 271,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-08-30T19:11:29Z",
      "side": 1,
      "message": "I\u0027m a little concerned this could cause a lot of new small repos in openbmc. I\u0027d prefer one large repo where we use the OWNERS file to determine who maintains which sub-directories.",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63b8ce0d_dd33567c",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 271,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-30T20:54:09Z",
      "side": 1,
      "message": "\u003e I\u0027d prefer one large repo where we use the OWNERS file to determine who maintains which sub-directories.\n\nWhy?  Isn\u0027t this just a monorepo by another name?\n\nI don\u0027t expect there to really be a lot of sharing between the update portions of this.  It also gives a clear path for supporting non-opensource updates (which, while not a primary focus of this project, is an unfortunate reality).\n\nI don\u0027t really think there is a lot of [code] overlap in update for the BMC, voltage regulators (i2c), NICs (pldm), and CPLDs (JTAG).  Do we really want all these different interfaces, and corresponding access libraries, needing to be linked into a single repository?  What happens if/when various CPLD vendors give us separate libraries for their special flavor of JTAG?\n\nMy opinion is that if the interface requires a lot of boiler-code that is copied around various repositories, we\u0027ve failed in defining the interface.  Let\u0027s fix that (if it is a problem) rather than trying to cram everything into one big repo.",
      "parentUuid": "957a2e83_7808d463",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8aac1f16_04df294b",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 271,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2023-08-31T12:52:55Z",
      "side": 1,
      "message": "\u003e Why? Isn\u0027t this just a monorepo by another name?\n\nYeah, but to me it\u0027s much more user-friendly. Wouldn\u0027t you prefer to go to one repo to find all of the supported devices for code update by the project vs. trying to find the random repo? Our documentation for repos in openbmc is bad. When the project started we focused on lots of small repos, which caused a lot of confusion IMO. We then started moving towards larger repos (converging on PDI, moving PEL\u0027s into logging, ...).",
      "parentUuid": "63b8ce0d_dd33567c",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88828a14_566dcc1f",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 271,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-31T15:07:43Z",
      "side": 1,
      "message": "I suggest working with Ed on a proposal for a monorepo then.  We shouldn\u0027t debate that in every individual feature design proposal.",
      "parentUuid": "8aac1f16_04df294b",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95648da3_89819f57",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 271,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-31T16:13:48Z",
      "side": 1,
      "message": "\u003e Why? Isn\u0027t this just a monorepo by another name?\n\nI don\u0027t believe so.  This looks more like dbus-sensors or bmcweb, which centralize one function into a single repo.\n\n\nFWIW, because these are going to share a transport to whatever device (i2c, pldm, whatever) I would expect the implementations of each to go in the repo that deals with that transport to avoid duplicating code and dependencies.  (i2c devices in dbus-sensors, pldm in pldmd, etc).  To support things like stopping sensor scanning when firmware updates are in progress (as is required by a lot of devices), it helps a lot to have the implementation for a complete device in one daemon.\n\n\nI share Andrews concerns that:\n1. As written going to create a lot of new repositories, and the repo creation overhead today is still high, which will possibly limit the number of devices we can support.  Considering we\u0027re likely to support 10s if not 100s of devices, that number of repos doesn\u0027t seem wise.\n2. This is going to de-incentivize core maintainers to maintain firmware update as a whole, given that each repo will likely have different maintainers (if this isn\u0027t the plan, let me know).  This is what we\u0027ve seen with the IPMI repos that are repo-per-oem.\n\nAlso, in the context of this doc, it doesn\u0027t seem wise to approve the creation of wildcard repos with no fixed bound or listed maintainers.",
      "parentUuid": "88828a14_566dcc1f",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9625d0d9_fa9444a6",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 271,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-31T16:42:31Z",
      "side": 1,
      "message": "I\u0027m fine with transport-level update repositories.  I suspect that pldmd will be one of the primary implementations.  I just don\u0027t want to see a direction that _requires_ us to put { i2c, pldm, jtag, spi, BMC, BIOS } updates all in one giant repo.  The \"updates interferes with sensor collection\" is one good reason why it doesn\u0027t belong into a single large repo because then we end up with coordination between ... for example ... dbus-sensors and phosphor-bmc-code-mgmt.\n\nI think Jagpal can adjust the wording to be transport-centric (or device-type-centric) rather than device-centric.  From an OpenBMC perspective we can aim at that.\n\nHopefully the design still allows proprietary update methods (in non-OSS repositories) because that seems to be something that a number of companies have been interested in.  Typically this is related to custom silicon where there are not public data sheets.  It seems relatively straight-forward for us to come up with a design where they can drop-in their own repositories without having to modify bmcweb, etc.",
      "parentUuid": "95648da3_89819f57",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acbdb67a_ac09973a",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 271,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-31T17:25:09Z",
      "side": 1,
      "message": "\u003e I\u0027m fine with transport-level update repositories.  I suspect that pldmd will be one of the primary implementations.  I just don\u0027t want to see a direction that _requires_ us to put { i2c, pldm, jtag, spi, BMC, BIOS } updates all in one giant repo.  The \"updates interferes with sensor collection\" is one good reason why it doesn\u0027t belong into a single large repo because then we end up with coordination between ... for example ... dbus-sensors and phosphor-bmc-code-mgmt.\n\u003e \n\u003e I think Jagpal can adjust the wording to be transport-centric (or device-type-centric) rather than device-centric.  From an OpenBMC perspective we can aim at that.\n\nSounds good to me.  This will be a significant improvement.\n\n\u003e \n\u003e Hopefully the design still allows proprietary update methods (in non-OSS repositories) because that seems to be something that a number of companies have been interested in.\n\nI can\u0027t see why it would prevent that, and I think it supports that mode.  If it\u0027s proprietary, do whatever you want, and reuse/copy whatever transport code you\u0027d like into a private daemon and maintain it.  For upstream, we should avoid copying code for similar transports.\n\n\u003e  Typically this is related to custom silicon where there are not public data sheets.  It seems relatively straight-forward for us to come up with a design where they can drop-in their own repositories without having to modify bmcweb, etc.\n\nAgreed, and I think just having it on dbus supports that, so long as we\u0027re using the mapper to look up EM devices that support update.  It\u0027s basically the same as the sensor model, which seems to work (there\u0027s probably more downstream vendor-specific sensor code than there is upstream at this point).",
      "parentUuid": "9625d0d9_fa9444a6",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8aa0ecb8_faf2ab93",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 271,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-06T22:28:54Z",
      "side": 1,
      "message": "Done.\n\nDevice transport level for repo distribution seems to strike the right balance. Sure, will update the design doc to reflect this.",
      "parentUuid": "acbdb67a_ac09973a",
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0917d319_d51841fb",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 277,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-08-31T16:13:48Z",
      "side": 1,
      "message": "The intent here is that you actually name the people, and ensure they have appropriate participation stats to maintain this amount of code.  If \"Hardware vendors\" are going to maintain this, then those hardware vendors need to be on the design doc.  It\u0027s really difficult to approve the creation of wildcard repos without a named person as maintainer.",
      "range": {
        "startLine": 276,
        "startChar": 0,
        "endLine": 277,
        "endChar": 38
      },
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9bab8c11_59d198d6",
        "filename": "designs/code-update.md",
        "patchSetId": 6
      },
      "lineNbr": 277,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-06T22:28:54Z",
      "side": 1,
      "message": "Done.\n\nAdded details on repo ownership and modification owner.\n\nWe still need a Volunteer for modifications to openpower-pnor-code-mgmt. Probably, will check with anoo or gmills as they are the maintainer for that repo or they can suggest someone.",
      "parentUuid": "0917d319_d51841fb",
      "range": {
        "startLine": 276,
        "startChar": 0,
        "endLine": 277,
        "endChar": 38
      },
      "revId": "387e6332fd3eb9337b083942e844abcce4a01177",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}