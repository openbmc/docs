{
  "comments": [
    {
      "key": {
        "uuid": "421b6ed2_e0d8b94b",
        "filename": "designs/virtual-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1000472
      },
      "writtenOn": "2020-06-30T15:16:54Z",
      "side": 1,
      "message": "I think that you should consider readings synchronization. The readings of component sensors are not synchronized, thus such virtual sensor may produce some reading fluctuations, because calculation will be performed on one fresh sample (from recently updated component sensor), and the rest of old samples from component sensors. Of course, I assumed, thad update will be performed at any of component sensors update.\nI assume, that virtual sensor will produce readings with the period of the component sensor with the shortest update period. Is this correct?",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 36,
        "endChar": 52
      },
      "revId": "6329310fa9a650ba49d26c4e4aa968d1bc6a52bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13df20f6_b39f0234",
        "filename": "designs/virtual-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-01T02:09:25Z",
      "side": 1,
      "message": "This is the generic case of the differential ADC issue that I mentioned in another comment.  In some cases, like CFM measurement, it\u0027s tolerable (and realistically, needs a low pass filter on the output anyway, to account for fan pressure waves, but I digress).\n\nThis is something that today is easily handled in code, based on physical assumptions in the measurement it\u0027s trying to do, and can account for things like sample rate and sample hold delays.  I\u0027m not sure how you would handle that in a daemon like this.",
      "parentUuid": "421b6ed2_e0d8b94b",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 36,
        "endChar": 52
      },
      "revId": "6329310fa9a650ba49d26c4e4aa968d1bc6a52bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba0d32f7_08eebfe0",
        "filename": "designs/virtual-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1000271
      },
      "writtenOn": "2020-07-02T01:43:27Z",
      "side": 1,
      "message": "I agree, I have to think on synchronization of all dependent sensor before calculating this sensor, I am not sure what approach will be best for this synchronization. But my assumption is if all other sensors are updated at the same rate then I would have fresh data if I add small delay.\n\nYes you are right about shortest period.",
      "parentUuid": "421b6ed2_e0d8b94b",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 36,
        "endChar": 52
      },
      "revId": "6329310fa9a650ba49d26c4e4aa968d1bc6a52bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e55fc813_6a6a566e",
        "filename": "designs/virtual-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-03T05:45:15Z",
      "side": 1,
      "message": "CFM sensor handles this by updating on any change, to avoid the possible sample skid, but you would need to sort through the performance implications of this.",
      "parentUuid": "ba0d32f7_08eebfe0",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 36,
        "endChar": 52
      },
      "revId": "6329310fa9a650ba49d26c4e4aa968d1bc6a52bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "087feefa_5c02d24f",
        "filename": "designs/virtual-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1000472
      },
      "writtenOn": "2020-06-30T15:16:54Z",
      "side": 1,
      "message": "How the formula will be parsed by the machine to perform calculations?",
      "revId": "6329310fa9a650ba49d26c4e4aa968d1bc6a52bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f2996fd_280f57c1",
        "filename": "designs/virtual-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-01T02:09:25Z",
      "side": 1,
      "message": "I had assumed Vijay would use some combination of bison/flex or other parsers.  The exact parser to use feels like an implementation detail.",
      "parentUuid": "087feefa_5c02d24f",
      "revId": "6329310fa9a650ba49d26c4e4aa968d1bc6a52bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9eee436_08de344d",
        "filename": "designs/virtual-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1000271
      },
      "writtenOn": "2020-07-02T01:43:27Z",
      "side": 1,
      "message": "We have some parser code to do this",
      "parentUuid": "7f2996fd_280f57c1",
      "revId": "6329310fa9a650ba49d26c4e4aa968d1bc6a52bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cee062d_96b2ed1a",
        "filename": "designs/virtual-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2020-07-27T19:29:49Z",
      "side": 1,
      "message": "split up params into constants and sensors. That way it is easier to extend with new variable types in the future.",
      "revId": "6329310fa9a650ba49d26c4e4aa968d1bc6a52bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba786aec_01d3fbdb",
        "filename": "designs/virtual-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2020-07-27T19:29:49Z",
      "side": 1,
      "message": "constant should be a float: \"P3\": 200.0",
      "revId": "6329310fa9a650ba49d26c4e4aa968d1bc6a52bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4607ef5_60cd8fab",
        "filename": "designs/virtual-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 1000472
      },
      "writtenOn": "2020-06-30T15:16:54Z",
      "side": 1,
      "message": "Have you considered this: https://lists.ozlabs.org/pipermail/openbmc/2020-January/020394.html ?",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 81,
        "endChar": 4
      },
      "revId": "6329310fa9a650ba49d26c4e4aa968d1bc6a52bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dae18332_f9c72658",
        "filename": "designs/virtual-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-01T02:09:25Z",
      "side": 1,
      "message": "I don\u0027t think telemetry solves it.  If you look at Vijays examples, he\u0027s trying to do:\n1. Transfer functions (offsets, gains, ect) to go from electrical readings to calibrated \"real\" values.\n2. Equations to calculate an differential or integral order above or below what the physical reading is (like going from current, to current/time (watts) or current * voltage * time (Power VA).\n3. Combining a lot of sensors, to form a totally new measurement (ex, combining fan speeds, power usage, and incoming air temp to form a new sensor, exit air temp)",
      "parentUuid": "f4607ef5_60cd8fab",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 81,
        "endChar": 4
      },
      "revId": "6329310fa9a650ba49d26c4e4aa968d1bc6a52bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "598e43ac_56345f1c",
        "filename": "designs/virtual-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 1000271
      },
      "writtenOn": "2020-07-02T01:43:27Z",
      "side": 1,
      "message": "It caters a simple arithmetic calculation based on predefined algorithm.",
      "parentUuid": "dae18332_f9c72658",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 81,
        "endChar": 4
      },
      "revId": "6329310fa9a650ba49d26c4e4aa968d1bc6a52bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef49dd5b_37d737dd",
        "filename": "designs/virtual-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 1000472
      },
      "writtenOn": "2020-07-03T07:46:50Z",
      "side": 1,
      "message": "I was talking about proposition of user-defined reading types. The assumption of these was to enable creating new measurements out of existing ones using mathematical formulas. The proposition supported simple operations, but there is no reason why it cannot support more complex operations. I think the main difference would be in the configuration. The suer-defined readins were to be configured over the Redfish,",
      "parentUuid": "598e43ac_56345f1c",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 81,
        "endChar": 4
      },
      "revId": "6329310fa9a650ba49d26c4e4aa968d1bc6a52bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcece49a_01958b12",
        "filename": "designs/virtual-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-07-30T14:23:27Z",
      "side": 1,
      "message": "As this is an open source project, can\u0027t a user simply create the new type in code, rather than creating a new language specification for it?  For closed source applications, a user defined type like that might make a ton of sense.",
      "parentUuid": "ef49dd5b_37d737dd",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 81,
        "endChar": 4
      },
      "revId": "6329310fa9a650ba49d26c4e4aa968d1bc6a52bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f52c3d5_fbf884b6",
        "filename": "designs/virtual-sensors.md",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 1000472
      },
      "writtenOn": "2020-08-05T08:12:39Z",
      "side": 1,
      "message": "Agree, but still it requires re-compilation of the code. The user-defined readings is a way of defining new synthesized readings in runtime.",
      "parentUuid": "fcece49a_01958b12",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 81,
        "endChar": 4
      },
      "revId": "6329310fa9a650ba49d26c4e4aa968d1bc6a52bf",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}