{
  "comments": [
    {
      "key": {
        "uuid": "5e2f95a0_b74a2ca2",
        "filename": "lint/cpp/.clang-tidy",
        "patchSetId": 1
      },
      "lineNbr": 3,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-11-04T22:10:58Z",
      "side": 1,
      "message": "Do we really want to be explicit about every individual check?  It seems immensely wordy and constantly requiring updating.  What I\u0027ve done on other projects is:\n\nbugprone-*\nclang-diagnostic-*\nclang-analyzer-*\ncppcoreguidelines-*\nhicpp-excxeption-baseclass\nmisc-*\nmodernize-*\nperformance-*\nreadability-*\n-modernize-concat-nested-namespaces\n-modernize-use-trailing-return-type",
      "revId": "91fa74ada29694f9835e9f43594ae3933eaf0b18",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15fac74b_8201d607",
        "filename": "lint/cpp/.clang-tidy",
        "patchSetId": 1
      },
      "lineNbr": 3,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-04T22:22:02Z",
      "side": 1,
      "message": "Yes, I did that explicitly for the actual checked in files because new versions of clang-tidy add new checks, so \"bugprone-*\" will mean something different tomorrow than it does today, and very likely would prevent us upgrading freely.  bmcweb has been running clang-tidy for a while now (never in CI until recently) and having wildcards burned us a couple times.  I really want repos to be explicit about what checks are turned on and enforced.  It also makes it really nice for non-CI users to have a warning that you\u0027re not checking all the checks expected of you if your distro has an older version of clang-tidy.\n\nIt also makes a very nice diff in the commit when someone goes and fixes all the issues with a given check, and adds the check to the list.  Having both makes it much more apparent why the seemingly meaningless changes were made, and atomically turns them on at the same time they\u0027re fixed.",
      "parentUuid": "5e2f95a0_b74a2ca2",
      "revId": "91fa74ada29694f9835e9f43594ae3933eaf0b18",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1782abef_089b3982",
        "filename": "lint/cpp/.clang-tidy",
        "patchSetId": 1
      },
      "lineNbr": 3,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-11-05T03:08:56Z",
      "side": 1,
      "message": "I understand the opinion.  I don\u0027t have strong feelings on it.  The bad thing about not using foo-* enablement is that we have to regularly re-review all the documentation for each new Clang release to see what new shiny toys there might be for us.\n\nIf we are going to enable them individually, I think there is a significant number of these that should be disabled because they are not relevant to BMC code.  The osx and fuchsia ones are obvious examples.  By having them here we\u0027re just wasting time running analyses that aren\u0027t going to flag anything.\n\nI\u0027d be willing to take a second stab at pruning the list down a bit if requested.",
      "parentUuid": "15fac74b_8201d607",
      "revId": "91fa74ada29694f9835e9f43594ae3933eaf0b18",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e14fa1c_898e430f",
        "filename": "lint/cpp/.clang-tidy",
        "patchSetId": 1
      },
      "lineNbr": 242,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-28T22:43:37Z",
      "side": 1,
      "message": "this flags a lot of these:\n\n static constexpr auto THE_CONSTANT_VAR \u003d \"the constant var\";",
      "range": {
        "startLine": 242,
        "startChar": 0,
        "endLine": 242,
        "endChar": 30
      },
      "revId": "91fa74ada29694f9835e9f43594ae3933eaf0b18",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8f6f5ed_b529edb8",
        "filename": "lint/cpp/.clang-tidy",
        "patchSetId": 1
      },
      "lineNbr": 242,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-28T23:05:53Z",
      "side": 1,
      "message": "Technically that\u0027s against the coding standard, right?  The stuff I used as test cases for clang-tidy (correctly) didn\u0027t have very many global variables, so it\u0027s possible I messed that up in the CheckOptions on line 246.\n\nIt should be noted, you can run this with -fix, and it\u0027ll fix all the the naming convention violations for you automagically.",
      "parentUuid": "9e14fa1c_898e430f",
      "range": {
        "startLine": 242,
        "startChar": 0,
        "endLine": 242,
        "endChar": 30
      },
      "revId": "91fa74ada29694f9835e9f43594ae3933eaf0b18",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c811f1d1_b700a04b",
        "filename": "lint/cpp/.clang-tidy",
        "patchSetId": 1
      },
      "lineNbr": 242,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-28T23:19:12Z",
      "side": 1,
      "message": "\u003e Technically that\u0027s against the coding standard, right?  \n\nYes it looks that way:\n\n \"Constants and enum members should be named like variables in lowerCamelCase.\"",
      "parentUuid": "a8f6f5ed_b529edb8",
      "range": {
        "startLine": 242,
        "startChar": 0,
        "endLine": 242,
        "endChar": 30
      },
      "revId": "91fa74ada29694f9835e9f43594ae3933eaf0b18",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "548c68d8_7045de27",
        "filename": "lint/cpp/.clang-tidy",
        "patchSetId": 1
      },
      "lineNbr": 242,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-28T23:33:02Z",
      "side": 1,
      "message": "If you have repos where you want to partially apply naming, there is a aNy_CasE (yes, that\u0027s the correct capitalization), and you can use that in the CheckOptions thing, if it makes the transition easier to stomach.",
      "parentUuid": "c811f1d1_b700a04b",
      "range": {
        "startLine": 242,
        "startChar": 0,
        "endLine": 242,
        "endChar": 30
      },
      "revId": "91fa74ada29694f9835e9f43594ae3933eaf0b18",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "343110c0_a50d4056",
        "filename": "lint/cpp/.clang-tidy",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-11-04T22:10:58Z",
      "side": 1,
      "message": "Elsewhere I\u0027ve had to do \u0027AnalyzeTemporaryDtors: false\u0027, but I don\u0027t recall why.",
      "revId": "91fa74ada29694f9835e9f43594ae3933eaf0b18",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45a04f9d_5bd9276a",
        "filename": "lint/cpp/.clang-tidy",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-04T22:22:02Z",
      "side": 1,
      "message": "Apparently that only applies to clang-tidy before 6.0.  That option has been removed (then added back and deprecated because everyones config files broke, but that\u0027s a different story).  I wouldn\u0027t expect a modern .clang-tidy file to need that key.",
      "parentUuid": "343110c0_a50d4056",
      "revId": "91fa74ada29694f9835e9f43594ae3933eaf0b18",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "812fe1df_d64374fa",
        "filename": "lint/cpp/.clang-tidy",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-11-05T03:08:56Z",
      "side": 1,
      "message": "Interesting.",
      "parentUuid": "45a04f9d_5bd9276a",
      "revId": "91fa74ada29694f9835e9f43594ae3933eaf0b18",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b318a35c_e0684c6c",
        "filename": "lint/cpp/.clang-tidy",
        "patchSetId": 1
      },
      "lineNbr": 250,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-11-04T22:10:58Z",
      "side": 1,
      "message": "I think you intended \u0027camelBack\u0027 here.  There is no \u0027lowerCamel\u0027 value.\n\nIt\u0027s unfortunate that clang doesn\u0027t allow \"value: A | B | C\" for cases when we have multiple but specific options.",
      "range": {
        "startLine": 250,
        "startChar": 63,
        "endLine": 250,
        "endChar": 73
      },
      "revId": "91fa74ada29694f9835e9f43594ae3933eaf0b18",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cf8629c_ec07ab91",
        "filename": "lint/cpp/.clang-tidy",
        "patchSetId": 1
      },
      "lineNbr": 250,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-11-04T22:22:02Z",
      "side": 1,
      "message": "Yep.  I had noticed this and fixed it when I did this for dbus-sensors.\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/37294/20/.clang-tidy\n\nBut bmcweb is still wrong.  It\u0027s on my list to put together a commit to fix it.",
      "parentUuid": "b318a35c_e0684c6c",
      "range": {
        "startLine": 250,
        "startChar": 63,
        "endLine": 250,
        "endChar": 73
      },
      "revId": "91fa74ada29694f9835e9f43594ae3933eaf0b18",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}