{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3a85e4da_64868582",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 87,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-01T04:44:03Z",
      "side": 1,
      "message": "nitpick.  use of Interrupts aren\u0027t a requirement, CPU usage and latency might necessitate the use of interrupts, but those two should be requirements, interrupts is the solution.",
      "range": {
        "startLine": 87,
        "startChar": 3,
        "endLine": 87,
        "endChar": 13
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a8c9cc7_0ecf4443",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 87,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-02T23:31:55Z",
      "side": 1,
      "message": "Good point! Updated this sentence and the proposed design:\n\n\"We propose the mangement daemon to detect the module presence through GPIO pin\ninterrupts to save CPU usage and reduce latency. \"",
      "parentUuid": "3a85e4da_64868582",
      "range": {
        "startLine": 87,
        "startChar": 3,
        "endLine": 87,
        "endChar": 13
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96df4a51_30c61a63",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 87,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T00:25:48Z",
      "side": 1,
      "message": "Again.....  The requirement is CPU usage and latency, which we should have requirements for.  \"Daemon should use less than 1% BMC CPU when idle, and cards should be detected with \u003c30ms of latency\" might be a good starting place.",
      "parentUuid": "3a8c9cc7_0ecf4443",
      "range": {
        "startLine": 87,
        "startChar": 3,
        "endLine": 87,
        "endChar": 13
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0a7cb0f_31f6c665",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 87,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2022-01-21T19:05:00Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "96df4a51_30c61a63",
      "range": {
        "startLine": 87,
        "startChar": 3,
        "endLine": 87,
        "endChar": 13
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e48b0160_be13dbc0",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 94,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-01T04:44:03Z",
      "side": 1,
      "message": "For telemetry we already have the concept of unavailable.  I suspect this would just be a new implementation of it, or is there a reason to mark the whole module unavailable?  What is the use case that requires knowing the module is unavailable, as opposed to just knowing that the specific telemetry items are unavailable?",
      "range": {
        "startLine": 93,
        "startChar": 19,
        "endLine": 94,
        "endChar": 24
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b247773_e41450e8",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 94,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-02T23:31:55Z",
      "side": 1,
      "message": "No, I don\u0027t think \"marking a bunch of subsidiary sensors unavailable\" will be more clear than marking the whole module unavailable for this point. We can do them both for different purposes, but a module level flag is still needed. Think about we have an accelerator which connects with the CMIS module\u0027s data path (not I2C but some high speed path), it need to understand whether the module is fully up and ready for traffic during its initialization. Using some sensors\u0027 availabilities to infer the module availability doesn\u0027t make a lot of sense here.",
      "parentUuid": "e48b0160_be13dbc0",
      "range": {
        "startLine": 93,
        "startChar": 19,
        "endLine": 94,
        "endChar": 24
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3ab7228_07392e96",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 94,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T00:25:48Z",
      "side": 1,
      "message": "\u003e No, I don\u0027t think \"marking a bunch of subsidiary sensors unavailable\" will be more clear than marking the whole module unavailable for this point.\n\nTo meet the intent of the sensor interfaces, you have to do the above anyway.  It\u0027s not about clarity, it\u0027s about knowing the state of a sensor without having to backtrack it to a module.  This is also how we already handle this in other places, so I would expect this daemon to do the same.\n\n\u003e We can do them both for different purposes, but a module level flag is still needed. Think about we have an accelerator which connects with the CMIS module\u0027s data path (not I2C but some high speed path), it need to understand whether the module is fully up and ready for traffic during its initialization.\n\n\"Fully up and ready to serve traffic\" isn\u0027t quite the same as unavailable.  I don\u0027t see anything in this design for that, so I\u0027m assuming that\u0027s needed to be added still?\n\n\u003e Using some sensors\u0027 availabilities to infer the module availability doesn\u0027t make a lot of sense here.\n\nAgreed, but you should set the sensors unavailable all the same, such that downstream telemetry daemons know the sensors aren\u0027t scanning.",
      "parentUuid": "9b247773_e41450e8",
      "range": {
        "startLine": 93,
        "startChar": 19,
        "endLine": 94,
        "endChar": 24
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b7b61a5_ac6c3db0",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 94,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2022-01-21T19:05:00Z",
      "side": 1,
      "message": "Sure, we will implement both module level and sensor level availability.\n\nAs of module availability/status, there are already some on-going efforts in the openbmc community:\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/47756\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/44711",
      "parentUuid": "b3ab7228_07392e96",
      "range": {
        "startLine": 93,
        "startChar": 19,
        "endLine": 94,
        "endChar": 24
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2822a90d_6725cfde",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 96,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-01T04:44:03Z",
      "side": 1,
      "message": "nit: this isn\u0027t really an openbmc requirement.  Probably take out the word \"should\"",
      "range": {
        "startLine": 95,
        "startChar": 3,
        "endLine": 96,
        "endChar": 18
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d09c20e7_0ecee4d9",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 96,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-02T23:31:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2822a90d_6725cfde",
      "range": {
        "startLine": 95,
        "startChar": 3,
        "endLine": 96,
        "endChar": 18
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a875f15_c2a0a746",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 138,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-01T04:44:03Z",
      "side": 1,
      "message": "Ideally this would just link to the phosphor-dbus-interfaces review.  It doesn\u0027t make sense to duplicate the interface definitions here.  Could be done in another patchset I guess if you wanted, but we should avoid writing these definitions twice.",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 138,
        "endChar": 68
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d03ac93_65ebe6dc",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 138,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2022-01-21T19:05:00Z",
      "side": 1,
      "message": "Acknowledged.\n\nI can fork these interface definitions into another patchset when all discussions are converged. Before that, it\u0027s still useful to keep them here to help reviewers understand the overall picture.",
      "parentUuid": "6a875f15_c2a0a746",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 138,
        "endChar": 68
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "444cbdfb_f4b7a838",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 177,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-01T04:44:03Z",
      "side": 1,
      "message": "Does this name need to be specific to CMIS OUI?  I could see this accidentally getting used for PCIeOUI, or IPMI OUI, which if we\u0027re going to do we should do explicitly by calling out the registry we\u0027re using, but in this case, I suspect just making the naming specific would be enough.",
      "range": {
        "startLine": 177,
        "startChar": 41,
        "endLine": 177,
        "endChar": 50
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "382199c3_c6112c54",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 177,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-12-01T21:12:17Z",
      "side": 1,
      "message": "Is there a difference?  Aren\u0027t these all owned by IEEE as the numbering authority?",
      "parentUuid": "444cbdfb_f4b7a838",
      "range": {
        "startLine": 177,
        "startChar": 41,
        "endLine": 177,
        "endChar": 50
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d452549c_d323fe7a",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 177,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-01T22:14:30Z",
      "side": 1,
      "message": "They\u0027re owned by IEEE, but I thought there were different lists for the various specs, ie PCIe had one list, USB had another, ect (not an expert, and I could very well be wrong).\n\nIf it\u0027s a common list, then this point is moot.",
      "parentUuid": "382199c3_c6112c54",
      "range": {
        "startLine": 177,
        "startChar": 41,
        "endLine": 177,
        "endChar": 50
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4ed60ff_53218136",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 177,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-02T23:31:55Z",
      "side": 1,
      "message": "The OUI list should be shared:\n\nhttps://en.wikipedia.org/wiki/Organizationally_unique_identifier\nhttp://standards-oui.ieee.org/oui/oui.txt\n\nAnd it should be a 24-bit number, not a string (although we usually parse it as a string). Already updated in the latest patchset.",
      "parentUuid": "d452549c_d323fe7a",
      "range": {
        "startLine": 177,
        "startChar": 41,
        "endLine": 177,
        "endChar": 50
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56dc2916_f24f3b9d",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 177,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T00:25:48Z",
      "side": 1,
      "message": "Understood.  Fine as-is.",
      "parentUuid": "c4ed60ff_53218136",
      "range": {
        "startLine": 177,
        "startChar": 41,
        "endLine": 177,
        "endChar": 50
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9bf2a38_6e059bbc",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 207,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-01T04:44:03Z",
      "side": 1,
      "message": "I\u0027m not really following what this table is saying.\n\nis this pointing out that there will be 4 sensors?  The sensor itself isn\u0027t of type double.  Maybe that column needs removed?  I suspect this whole thing could be boiled down to \"will implement sensor.Value interfaces for temperature, supply voltage, tx power, and rx power for a given module\"",
      "range": {
        "startLine": 207,
        "startChar": 2,
        "endLine": 207,
        "endChar": 6
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b6647e8_1aa619d4",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 207,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-02T23:31:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9bf2a38_6e059bbc",
      "range": {
        "startLine": 207,
        "startChar": 2,
        "endLine": 207,
        "endChar": 6
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "573a14b9_664406f6",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 222,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-01T04:44:03Z",
      "side": 1,
      "message": "Generally we would split these into separate objects.  one object per lane, each with an enum for the various things you\u0027re trying to convey.",
      "range": {
        "startLine": 221,
        "startChar": 0,
        "endLine": 222,
        "endChar": 207
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d3d206d_e7a6d2dc",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 222,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-02T23:31:55Z",
      "side": 1,
      "message": "Please see my previous explanation in PatchSet 8:\n\n\"\nJianqiao Liu\nNov 11\nLossOfSignal and LossOfLock are two independent properties. One lane in a module could have neither/either/both of them. So the boolean type seems like a good choice.\n\nActually Jason Ling has a good point about how we should associate a lane with a module. For example, a 1U front panel supports up to 36 OSFP (one type of CMIS-compliant set) modules, and each module has 8 lanes. In the current interface design, we need to perform 36 * 8 \u003d 288 queries on dbus to get overall system status. That may cause performance pressure on dbus. So I\u0027m updating the interface here.\n\"\n\nLeaving this thread unresolved just in case you want to have more discussions.",
      "parentUuid": "573a14b9_664406f6",
      "range": {
        "startLine": 221,
        "startChar": 0,
        "endLine": 222,
        "endChar": 207
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "100f86cd_413b502b",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 222,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T00:25:48Z",
      "side": 1,
      "message": "\u003e Please see my previous explanation in PatchSet 8:\n\u003e \n\u003e \"\n\u003e Jianqiao Liu\n\u003e Nov 11\n\u003e LossOfSignal and LossOfLock are two independent properties. One lane in a module could have neither/either/both of them. So the boolean type seems like a good choice.\n\nBoolean is a mediocre choice compared to an enum\n\n\"HasLock/LostLock\" is a lot more descriptive than true/false.\n\n\u003e \n\u003e Actually Jason Ling has a good point about how we should associate a lane with a module. For example, a 1U front panel supports up to 36 OSFP (one type of CMIS-compliant set) modules, and each module has 8 lanes. In the current interface design, we need to perform 36 * 8 \u003d 288 queries on dbus to get overall system status.\n\nI have no idea how you got to that number, but GetManagedObjects, which we use all over the place for sensors, solves this in a single query.\n\n\u003e That may cause performance pressure on dbus. So I\u0027m updating the interface here.\n\u003e \"\n\u003e \n\u003e Leaving this thread unresolved just in case you want to have more discussions.",
      "parentUuid": "2d3d206d_e7a6d2dc",
      "range": {
        "startLine": 221,
        "startChar": 0,
        "endLine": 222,
        "endChar": 207
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a2ce9a9_9b9484d7",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 222,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-12-15T16:23:19Z",
      "side": 1,
      "message": "\u003e \"HasLock/LostLock\" is a lot more descriptive than true/false.\n\u003e Actually Jason Ling has a good point about how we should associate a lane with a module.\n\nYeah, Ed is right here. I completely forgot about GetManagedObjects - which returns all the sub-objects with all their properties. I\u0027ll also go on to say that the performance difference is roughly the same.\n\nTaking this into consideration, it\u0027s still worthwhile to discuss representing Loss of Lock (LoL) and Loss of Signal (LoS) as arrays attached to a single module object.\n\nTo me this is more usable both programmatically and through manual interaction\n\n* -script use- any scripts that want to check lane link health are trivial if you use an array but become more complex if you use GetManagedObjects\n\n* -interactive use- for those tooling around on the shell debugging things it\u0027s now a single busctl introspect to determine the link health\n\n* -programmatic use- relatively simple interface now. Just grab a property from an interface instead of GetManagedObjects and parsing through a bunch of strings. Likely not a significant performance difference; just easier to make coding errors and increases complexity of unit tests.\n\n* Also..doesn\u0027t this mean that lane objects would also need associations?\n\nI can\u0027t think of any compelling reasons to represent lanes as separate objects besides aesthetics (debatable) and precedence.",
      "parentUuid": "100f86cd_413b502b",
      "range": {
        "startLine": 221,
        "startChar": 0,
        "endLine": 222,
        "endChar": 207
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26dd5bf2_11a3790d",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 222,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2022-01-21T20:04:47Z",
      "side": 1,
      "message": "ping! any thoughts on the response Ed?",
      "parentUuid": "7a2ce9a9_9b9484d7",
      "range": {
        "startLine": 221,
        "startChar": 0,
        "endLine": 222,
        "endChar": 207
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a601f8f_5f92f38d",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 258,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-01T04:44:03Z",
      "side": 1,
      "message": "Given that this is module-specific data, and I\u0027m assuming has some common implementations, should this be called out in the entity-manager config data?  Do specific CMIS modules have an entity manager config?   (if there\u0027s specific logic that needs turned on per module, they probably should).",
      "range": {
        "startLine": 257,
        "startChar": 17,
        "endLine": 258,
        "endChar": 56
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b7737d4_35acd7bb",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 258,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-02T23:31:55Z",
      "side": 1,
      "message": "Yes, we do plan to use entity manager config handle this. The EntityManager config file should include two pieces of information: 1) mandatory i2c location info 2) company-customized functionalities, like lane reversing, reporting additional module data\n\nIdeally, we will pack the main logic of company-customized functionalities in the daemon and only place some on/off flags in the config file. I\u0027ll share some examples later.",
      "parentUuid": "8a601f8f_5f92f38d",
      "range": {
        "startLine": 257,
        "startChar": 17,
        "endLine": 258,
        "endChar": 56
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c86014e_a4549b0f",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 258,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T00:25:48Z",
      "side": 1,
      "message": "\u003e Yes, we do plan to use entity manager config handle this. The EntityManager config file should include two pieces of information: 1) mandatory i2c location info 2) company-customized functionalities, like lane reversing, reporting additional module data\n\nGotcha.  Just to be clear, you\u0027re going to have two config entries, one for the baseboard, that maps this GPIO to a \"has a cable module slot\" and a second one for the module itself, that instantiates the CMIS interface, right?\n\n\u003e \n\u003e Ideally, we will pack the main logic of company-customized functionalities in the daemon and only place some on/off flags in the config file. I\u0027ll share some examples later.\n\nYep, that\u0027s the intent of EM.  Just making sure that you\u0027re doing the probe in EM such that it\u0027s easily configurable in the future.",
      "parentUuid": "2b7737d4_35acd7bb",
      "range": {
        "startLine": 257,
        "startChar": 17,
        "endLine": 258,
        "endChar": 56
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9da24d5_273740f9",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 258,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2022-01-21T19:05:00Z",
      "side": 1,
      "message": "Hi, Ed,\n\nI just added an example for EM config file. Please take a look and let me know whether it makes sense to you. Note that I didn\u0027t put register level customization in the EM config file. Instead I planned to add them in the code.",
      "parentUuid": "0c86014e_a4549b0f",
      "range": {
        "startLine": 257,
        "startChar": 17,
        "endLine": 258,
        "endChar": 56
      },
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bc33154_30e15705",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 259,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-01T04:44:03Z",
      "side": 1,
      "message": "Some things I see missing:\nWhat does the entity-manager config for a module look like?  What parameters does it give the user control over?\nAre there any requirements for inventory interfaces?  Ie, asset?  manufacturer?\nHow will modules avoid name collisions?  (if the answer is naming the devices after their entity-manager name, then this problem is solved already).\nAre there any requirements that these modules show up in redfish?  Which schemas?",
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54ee45e4_c9d79739",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 12
      },
      "lineNbr": 259,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2022-01-21T19:05:00Z",
      "side": 1,
      "message": "Hi, Ed,\n\nPlease see the example EM config file I just added. \n\n\"Are there any requirements for inventory interfaces?  Ie, asset?  manufacturer?\"\n[Jianqiao]: This is a good point. We currently reply on other services on the accelerator/NIC high speed data path to decide which types of module to accept, so EM config doesn\u0027t constrain this. But we can easily add such constrain in future design if needed.\n\n“How will modules avoid name collisions?”\n[Jianqiao]: Yes, we will follow the entity-manager name.\n\n\"Are there any requirements that these modules show up in redfish?  Which schemas?\"\n[Jianqiao]: Redfish schema proposal: \nhttps://github.com/DMTF/Redfish/issues/4963",
      "parentUuid": "8bc33154_30e15705",
      "revId": "8cef704468f3c74c9734d0cb5049e28985d24be5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}