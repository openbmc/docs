{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8f0e3e18_b7247a9c",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2022-06-15T18:58:43Z",
      "side": 1,
      "message": "Who is the vendor in this case that would have a hard time implementing the existing APIs?\nbmcweb already implements the Update Redfish API to be an update-and-activate in one call.",
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5512e09b_86f6bf54",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-06-15T19:29:40Z",
      "side": 1,
      "message": "There is no specific vendor, I am just speculating. Even with the bmcweb call, a vendor needs to develop against the full end-to-end flow with bmcweb, image manager and their item updater. What I\u0027m saying here is that the vendor can easily develop and test their implementation without the full workflow. They should still test the whole workflow before sending for review, but this API could just make development easier.",
      "parentUuid": "8f0e3e18_b7247a9c",
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ae982b2_b67840fc",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T05:18:27Z",
      "side": 1,
      "message": "\u003e bmcweb already implements the Update Redfish API to be an update-and-activate in one call.\n\nAs the person that implemented the current API in bmcweb, it was very...very difficult for me given the complexities, and arguably breaks some of the design ideals in bmcweb to do it (requires storing state, ect), and causes bugs like:\nhttps://github.com/openbmc/bmcweb/issues/202\n\nThat basically can\u0027t be solved in a reasonable way because of having to store state that doesn\u0027t exist on dbus.\n\nAlso, it\u0027s more than one call, it\u0027s a call to the filesystem to write the payload, then it\u0027s a call to the dbus-broker to set up the match, then its a polling waiting for the update to get accepted, then it\u0027s polling to wait for the update to complete.  This design is attempting to simplify that.\n\n\nSome immediate possible users include:\nNvme, which supports updating over nvme-mi\nVRs, which have an i2c based update API\nPossible integration with fwupd, which already supports a ton of devices.",
      "parentUuid": "5512e09b_86f6bf54",
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30d078e6_e94664c7",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-06-15T05:24:58Z",
      "side": 1,
      "message": "It looks like the ImagePath is the path on BMC that is the uploaded image is it?\nWhat is the difference between this new API and the existing `RequestedActivation`?\n\nI feel that they are doing pretty much the same thing?",
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ef55ae2_72fa61bc",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-06-15T19:29:40Z",
      "side": 1,
      "message": "Yes the path is local to the BMC.\nRequestedActivation requires the ItemUpdater to first know about an image through the Version object published by the ImageManager, and then creating that Activation object. This new API cuts out that extra step so a client can directly send an image to an ItemUpdater-like daemon.",
      "parentUuid": "30d078e6_e94664c7",
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "817e2c18_f22ca65c",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T05:26:36Z",
      "side": 1,
      "message": "Can we just avoid the filesystem altogether and pass an FD?  we\u0027ve used it in other places successfully, it just wasn\u0027t well known when the first update APIs were built, and it avoids a lot of permissions issues that we\u0027ve seen in the past with daemons sharing FDs.\n\nAlternatively, could we just make this array\u003cuint8\u003e?  Is there a dbus limit that we would hit?",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 54,
        "endChar": 41
      },
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70250011_01d603b1",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T05:26:36Z",
      "side": 1,
      "message": "We shouldn\u0027t be passing a signature on the filesystem.  It\u0027s not intended to be large.\n\nAlso, we need to support:\n1. Devices with no crypto verification\n2. Devices for which the crypto signature is embedded in the payload.\n\nSo at a minimum, this needs to be optional, but I suspect in most cases we\u0027d just embed it in the image itself.\n\n\nIn terms of documentation, because this is a common interface, we probably need a lot more details on what requirements on the signature are.  \"string\" isn\u0027t very descriptive about format or behavior.",
      "range": {
        "startLine": 58,
        "startChar": 26,
        "endLine": 58,
        "endChar": 35
      },
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c570b8e2_aed570eb",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T05:26:36Z",
      "side": 1,
      "message": "Probably need an error type of \"Firmware Update already in progress\", \"signature failure\" and \"Device not in required state\" (probably power state).",
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80b6e639_cafd8f54",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2022-06-15T05:24:58Z",
      "side": 1,
      "message": "How does this API tell which status is for which image?\nE.g. if user tries to update BMC and BIOS images, and calls UpdateFirmware twice, how does this API tell which image is in progress?",
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de23ab96_6706e969",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-06-15T19:29:40Z",
      "side": 1,
      "message": "There would be separate objects for each device. So if BIOS and BMC are managed by the same daemon, there should be 2 separate objects on that daemon.",
      "parentUuid": "80b6e639_cafd8f54",
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10ce81b0_134e21d7",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T05:26:36Z",
      "side": 1,
      "message": "Can we call this \"idle\" instead?",
      "range": {
        "startLine": 76,
        "startChar": 16,
        "endLine": 76,
        "endChar": 20
      },
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ceac0775_9f7ae982",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T05:26:36Z",
      "side": 1,
      "message": "The task service APIs give a progress indicator thats 0-100.  We should probably at least make that possible.",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 81,
        "endChar": 36
      },
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b74961a_6d198519",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T05:26:36Z",
      "side": 1,
      "message": "In each of these states, it adds some unknowns to the behavior.  How long is an update implementation required to stay in the \"done\" state before it goes back to None?  If VerifyError occurs, is it possible to go back to None?  Is it required to allow a reattempt?",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 90,
        "endChar": 45
      },
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14cba7eb_6635728f",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2022-06-15T18:58:43Z",
      "side": 1,
      "message": "An alternative could be adding an option in the existing interfaces that when an image is uploaded it automatically sets the RequestedActivations property to start the activation.",
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b63e26e6_19770ea5",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-06-15T19:29:40Z",
      "side": 1,
      "message": "Would that be an option passed through Redfish to bmcweb, so that bmcweb automatically sets the RequestedActivations property? I believe bmcweb already does this by default.\n\nA problem this new API is trying to solve is for firmware upgrades without Redfish, where some local process within the BMC is coordinating the firmware upgrade. In that case (and even in the case of Redfish SimpleUpdate) I don\u0027t see the use for the ImageManager, when the image can be passed directly to the ItemUpdater.",
      "parentUuid": "14cba7eb_6635728f",
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81a739a5_fe4ab10b",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T05:18:27Z",
      "side": 1,
      "message": "\u003e An alternative could be adding an option in the existing interfaces that when an image is uploaded it automatically sets the RequestedActivations property to start the activation.\n\nthe problem here is that it still requires an untrusted daemon (bmcweb) to be writing the filesystem, which requires some level of permissions.  That\u0027s one of the big things being avoided.\n\nWith that said, Adriana is right here, there should be something in the alternatives section, even if it\u0027s just \"keep the current API\"",
      "parentUuid": "b63e26e6_19770ea5",
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f964c7d_cdf22c53",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T05:18:27Z",
      "side": 1,
      "message": "If this is the plan, please plan on removing the ImageManager interface first, and having that be the first target before the bmcweb patches land.  This avoids having to support two implementations for a period of time, and needing to have complex logic to determine which implementation to use at any given time.",
      "range": {
        "startLine": 108,
        "startChar": 62,
        "endLine": 109,
        "endChar": 63
      },
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f1e51a1_e6235ba7",
        "filename": "designs/simple-firmware-update-api.md",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-13T05:18:27Z",
      "side": 1,
      "message": "Surely theres some testing?",
      "range": {
        "startLine": 115,
        "startChar": 0,
        "endLine": 115,
        "endChar": 4
      },
      "revId": "4cf8c2eaa3765bebe786595857271ec0198d78c2",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}