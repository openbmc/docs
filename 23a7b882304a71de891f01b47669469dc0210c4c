{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d8d3ea3d_bc9d52c2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-08-13T16:44:37Z",
      "side": 1,
      "message": "This doesn\u0027t seem like a true statement:\n\n```\n$ rg \"[^-]readability-function-cognitive\" --hidden -l\nphosphor-virtual-sensor/.clang-tidy\nkcsbridge/.clang-tidy\nphosphor-modbus/.clang-tidy\nspdm/.clang-tidy\ndocs/style/cpp/.clang-tidy\n$ rg \"[^-]readability-function-size\" --hidden -l     \nssifbridge/.clang-tidy\nobmc-console/.clang-tidy\nphosphor-state-manager/.clang-tidy\nphosphor-virtual-sensor/.clang-tidy\nlibpldm/.clang-tidy\nphosphor-psu-code-mgmt/.clang-tidy\nphosphor-led-manager/.clang-tidy\nphosphor-modbus/.clang-tidy\nkcsbridge/.clang-tidy\nspdm/.clang-tidy\nphosphor-bmc-code-mgmt/.clang-tidy\nphosphor-debug-collector/.clang-tidy\nentity-manager/.clang-tidy\nphosphor-time-manager/.clang-tidy\ndbus-sensors/.clang-tidy\nbmcweb/.clang-tidy\nlibcper/.clang-tidy\ndocs/style/cpp/.clang-tidy\n```\n\n`readability-function-size` are even enabled by bmcweb, entity-manager, and dbus-sensors.  So it at least seems like that one isn\u0027t an issue?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 37
      },
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab1d88ba_0f3886a8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T17:04:01Z",
      "side": 1,
      "message": "https://clang.llvm.org/extra/clang-tidy/checks/readability/function-size.html\n\nThe default value is `none` which is no-op, right?\n\nSo the check is enabled without any effect.\n\nThere is a `StatementThreshold` which seems to default to 800.",
      "parentUuid": "d8d3ea3d_bc9d52c2",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 37
      },
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc6a6c06_8b2e88ce",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T16:27:42Z",
      "side": 1,
      "message": "\u003e or we\u0027d have to raise the limits to\nwhere they were not useful.\n\nIMO the *correct interpretation* of the line count check would be to simply have a limit which matches the current largest function.\n\nThen anyone interested can break down that function and lower the value.\n\nAt some point then we can arrive at the recommended value.\n\nUnderstand this is a *monotonic process* and not something to be done in a single patch.\n\n\u003e While I\u0027m hopeful that these checks could\nbe enabled in the future,\n\nWith this change you are actively working against such a future by removing the check from the list.\n\n\nExtra note:\n\nNot sure if a clang-format upgrade could cause problems with line count check.\nIn which case, we could simply increase the line count check by a small amount.",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ee3f925_4dd37447",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-08-13T16:07:59Z",
      "side": 1,
      "message": "I had a similar experience running into issues when I tried enabling this on PLDM, and encountered similar challenges while working with SPDM as well. In addition , the terminology used in the PLDM and SPDM specifications can sometimes be quite extensive, which makes it difficult to translate directly into code. If we simplify or alter the terms/symbol names just to pass length checks, it can become challenging to maintain a clear mapping to the original specifications.",
      "range": {
        "startLine": 11,
        "startChar": 39,
        "endLine": 14,
        "endChar": 27
      },
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c40796f7_b1b041f7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T16:27:42Z",
      "side": 1,
      "message": "If that\u0027s a regular thing (not just a few functions), then why not just enable some of these checks, with somewhat higher values?\n\nFor example if you regularly find yourself writing 200 line functions which are conceptually simple and easy to understand despite the length, maybe that is a good starting point for your repos?",
      "parentUuid": "8ee3f925_4dd37447",
      "range": {
        "startLine": 11,
        "startChar": 39,
        "endLine": 14,
        "endChar": 27
      },
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b54dc7be_45414b43",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T16:27:42Z",
      "side": 1,
      "message": "\u003e As a side note, one thing asio-based repos suffer from is overly large inline lambdas. cognative comlexity and length checks do not take those\ninto account when measuring line count, and in some cases seem to\nactively disable the checks, so even if we were able to enable these\nchecks, as implemented in clang they\u0027re not useful in a lot of scenarios\ntoday.\n\nYour argument goes like \"The check for problem A is not useful because it does not work right in presence of problem B. So we can remove the check for problem A\".\n\nThen just remove problem B. It needs to be removed anyways.\n\nFor the rest of the functions without inline lambdas, it works right, so it has value there.\n\nFrom a compiler perspective, inline lembdas could be seen as separate functions. So maybe the tooling does work right with that interpretation.",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a54e04f3_c1ab3c92",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T16:27:42Z",
      "side": 1,
      "message": "There is absolutely no requirement for any \u0027experience\u0027 what-so-ever.\n\nWe can simply take what\u0027s been written down in those core guidelines, which have been documented by people who are actually C++ experts.\n\nThe OpenBMC project has already documented it is trying to follow these guidelines.\n\nhttps://github.com/openbmc/docs/blob/ac6e69a7df9c214fbf55144aafde43595a76aa60/cpp-style-and-conventions.md?plain\u003d1#L73",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "265adcbc_c7e936a4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-08-13T16:44:37Z",
      "side": 1,
      "message": "\u003e We can simply take what\u0027s been written down in those core guidelines\n\nI do agree with the overall intent of the Core Guidelines w.r.t. function length and function behavior.  But, the Core Guidelines are also vague as to what the \"enforcement\" would be of long line length.  The core guidelines do not talk about \"cognative\" or cyclomatic complexity.  I don\u0027t think it is really sufficient to point to the words in the Core Guidelines as the rationale for these.\n\n\u003e There is absolutely no requirement for any \u0027experience\u0027 what-so-ever.\n\nNo, not necessarily, but negative experience is certainly a reason for removing this, which is the data Ed is bringing.",
      "parentUuid": "a54e04f3_c1ab3c92",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f88bb7f_796ce861",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T17:04:01Z",
      "side": 1,
      "message": "\u003e negative experience is certainly a reason for removing this\n\nnegative experience in terms of \"we could not bring the function size down to 60 lines\"\nIMO shows that the project overall is not ready to try and enforce this value.\n\nMaybe we need to come up with a project-specific value which is a more realistic value. Something like 200.\n\nThen in the future if the goal has been reached then the goalpost can be moved.\n\nI guess we did not do that the first time around since people were asking for concrete sources and not arbitrary values (if i remember correctly).",
      "parentUuid": "265adcbc_c7e936a4",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}