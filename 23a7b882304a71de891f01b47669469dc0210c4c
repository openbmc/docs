{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d8d3ea3d_bc9d52c2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-08-13T16:44:37Z",
      "side": 1,
      "message": "This doesn\u0027t seem like a true statement:\n\n```\n$ rg \"[^-]readability-function-cognitive\" --hidden -l\nphosphor-virtual-sensor/.clang-tidy\nkcsbridge/.clang-tidy\nphosphor-modbus/.clang-tidy\nspdm/.clang-tidy\ndocs/style/cpp/.clang-tidy\n$ rg \"[^-]readability-function-size\" --hidden -l     \nssifbridge/.clang-tidy\nobmc-console/.clang-tidy\nphosphor-state-manager/.clang-tidy\nphosphor-virtual-sensor/.clang-tidy\nlibpldm/.clang-tidy\nphosphor-psu-code-mgmt/.clang-tidy\nphosphor-led-manager/.clang-tidy\nphosphor-modbus/.clang-tidy\nkcsbridge/.clang-tidy\nspdm/.clang-tidy\nphosphor-bmc-code-mgmt/.clang-tidy\nphosphor-debug-collector/.clang-tidy\nentity-manager/.clang-tidy\nphosphor-time-manager/.clang-tidy\ndbus-sensors/.clang-tidy\nbmcweb/.clang-tidy\nlibcper/.clang-tidy\ndocs/style/cpp/.clang-tidy\n```\n\n`readability-function-size` are even enabled by bmcweb, entity-manager, and dbus-sensors.  So it at least seems like that one isn\u0027t an issue?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 37
      },
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab1d88ba_0f3886a8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T17:04:01Z",
      "side": 1,
      "message": "https://clang.llvm.org/extra/clang-tidy/checks/readability/function-size.html\n\nThe default value is `none` which is no-op, right?\n\nSo the check is enabled without any effect.\n\nThere is a `StatementThreshold` which seems to default to 800.",
      "parentUuid": "d8d3ea3d_bc9d52c2",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 37
      },
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6817742_9e6abe52",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-15T07:56:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ab1d88ba_0f3886a8",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 37
      },
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc6a6c06_8b2e88ce",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T16:27:42Z",
      "side": 1,
      "message": "\u003e or we\u0027d have to raise the limits to\nwhere they were not useful.\n\nIMO the *correct interpretation* of the line count check would be to simply have a limit which matches the current largest function.\n\nThen anyone interested can break down that function and lower the value.\n\nAt some point then we can arrive at the recommended value.\n\nUnderstand this is a *monotonic process* and not something to be done in a single patch.\n\n\u003e While I\u0027m hopeful that these checks could\nbe enabled in the future,\n\nWith this change you are actively working against such a future by removing the check from the list.\n\n\nExtra note:\n\nNot sure if a clang-format upgrade could cause problems with line count check.\nIn which case, we could simply increase the line count check by a small amount.",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d82914bb_2a5bef8c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-13T21:42:03Z",
      "side": 1,
      "message": "\u003e With this change you are actively working against such a future by removing the check from the list.\n\nFor all the repos I\u0027ve enabled tidy on, the lack of a reference wasn\u0027t what stopped enabling these, it was actual engineering and social problems.  IF we find a way to enable these, and someone is signed up to figure out the technical problems with them, I\u0027m in support, but this reference has been present for almost 2 years, and we haven\u0027t made progress.  I\u0027d rather documentation handle the bulk of our repositories and be generally useful, as the commit message states.",
      "parentUuid": "fc6a6c06_8b2e88ce",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3be65960_bc07c2ff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-14T09:55:17Z",
      "side": 1,
      "message": "\u003e I\u0027m in support, but this reference has been present for almost 2 years, and we haven\u0027t made progress.\n\nWe did make progress on this. I sometimes reference cpp core guidelines for function size and having these statements in our documented `.clang-tidy` file here helps to remove any ambiguity about where the project wants to go.\n\n\n\u003e  IF we find a way to enable these, and someone is signed up to figure out the technical problems with them, I\u0027m in support,\n\nYou do not have to go to 60 lines right away. You can start with some realistic goal for the repos you maintain, and `NOLINT` the functions which are too big.\n\nThen at least you do not get any new functions exceeding that size, and people can work on the problematic ones on their own time.\n\n\nI do not see any technical problems. If you refer to inline lambda size, it is an interpretation issue. If you want an option to count inline lambdas towards the size, that\u0027s something to contribute to the clang-tidy project.",
      "parentUuid": "d82914bb_2a5bef8c",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a8ab14f_27ed25b1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-14T13:43:09Z",
      "side": 1,
      "message": "To reinforce my point here, created this change for EM\nhttps://gerrit.openbmc.org/c/openbmc/entity-manager/+/82811\n\nWe can set the line threshold to 170 in EM repo now, which is only around triple what cpp core guidelines recommends.\n\nPending refactor of a few bloated functions we could probably go to 120 in a few months or so if anyone is interested.\n\nIt also helps in the review since the context one needs to look at for reviewing a change gets smaller.",
      "parentUuid": "3be65960_bc07c2ff",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ace346f_9e64ef2a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-14T15:17:06Z",
      "side": 1,
      "message": "\u003e documented .clang-tidy file here helps to remove any ambiguity about where the project wants to go.\n\nCan we just document that outside of the actual file?  Putting these checks in the .clang-tidy file means we can\u0027t deploy them across the repos without maintainers doing work.  I get wanting some documentation, I\u0027d kind of assume cpp core guidelines does a good job of that, and we just need to amend some other recommendations for limits?  IMO, if we have limits they should be written down in prose rather than having to dig up a config file.\n\n\u003e We can set the line threshold to 170 in EM repo now,\n\nAs the EM maintainer, I\u0027m happy to have that conversation in the EM review, but that still doesn\u0027t allow us to enable this check in EM as it\u0027s defined here, so I\u0027m not sure how it helps.  I\u0027m VERY happy to see some amount of progress on this, but I don\u0027t think that review alone changes the need for this commit.  Most of the checks in the next commit have been enabled for years.\n\n\u003e NOLINT the functions which are too big.\n\nI think I mentioned this in one of the other comments, but this meant that far too many functions needed NOLINT, and it became a maintenance problem.",
      "parentUuid": "1a8ab14f_27ed25b1",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0b2ce2d_f0ba7df5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-14T15:25:06Z",
      "side": 1,
      "message": "\u003e Putting these checks in the .clang-tidy file means we can\u0027t deploy them across the repos without maintainers doing work.\n\nYou can not just \u0027deploy\u0027 most of these checks. People have to do the work to enable them.\n\nWhich is also true for the reference checks you are planning to add here.\n\n\u003e  IMO, if we have limits they should be written down in prose rather than having to dig up a config file.\n\nIf you want something to just \u0027roll out\u0027 without doing any work, then set the limit to 9000 or something and leave in the comment about cpp core guidelines and their recommended value.",
      "parentUuid": "6ace346f_9e64ef2a",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5467a7e2_544cdd6e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-14T22:29:47Z",
      "side": 1,
      "message": "\u003e \u003e Putting these checks in the .clang-tidy file means we can\u0027t deploy them across the repos without maintainers doing work.\n\u003e \n\u003e You can not just \u0027deploy\u0027 most of these checks. People have to do the work to enable them.\n\u003e \n\u003e Which is also true for the reference checks you are planning to add here.\n\nThat hasn\u0027t been my experience.  The majority of these checks can be applied without a ton of maintainer effort.  The first tidy file in 2020 was added in a day or two.  Many of the checks have \"fix\" capabilities, that will just fix the code for you.  Put that in a PR, and you\u0027re done.\n\n\u003e \n\u003e \u003e  IMO, if we have limits they should be written down in prose rather than having to dig up a config file.\n\u003e \n\u003e If you want something to just \u0027roll out\u0027 without doing any work, then set the limit to 9000 or something and leave in the comment about cpp core guidelines and their recommended value.\n\nThere is no value in a check that has a limit of 9000, and just adds to our runtime.  I am happy to document it in another file.",
      "parentUuid": "f0b2ce2d_f0ba7df5",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45d82857_b3c27135",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-15T07:56:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5467a7e2_544cdd6e",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ee3f925_4dd37447",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-08-13T16:07:59Z",
      "side": 1,
      "message": "I had a similar experience running into issues when I tried enabling this on PLDM, and encountered similar challenges while working with SPDM as well. In addition , the terminology used in the PLDM and SPDM specifications can sometimes be quite extensive, which makes it difficult to translate directly into code. If we simplify or alter the terms/symbol names just to pass length checks, it can become challenging to maintain a clear mapping to the original specifications.",
      "range": {
        "startLine": 11,
        "startChar": 39,
        "endLine": 14,
        "endChar": 27
      },
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c40796f7_b1b041f7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T16:27:42Z",
      "side": 1,
      "message": "If that\u0027s a regular thing (not just a few functions), then why not just enable some of these checks, with somewhat higher values?\n\nFor example if you regularly find yourself writing 200 line functions which are conceptually simple and easy to understand despite the length, maybe that is a good starting point for your repos?",
      "parentUuid": "8ee3f925_4dd37447",
      "range": {
        "startLine": 11,
        "startChar": 39,
        "endLine": 14,
        "endChar": 27
      },
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b54dc7be_45414b43",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T16:27:42Z",
      "side": 1,
      "message": "\u003e As a side note, one thing asio-based repos suffer from is overly large inline lambdas. cognative comlexity and length checks do not take those\ninto account when measuring line count, and in some cases seem to\nactively disable the checks, so even if we were able to enable these\nchecks, as implemented in clang they\u0027re not useful in a lot of scenarios\ntoday.\n\nYour argument goes like \"The check for problem A is not useful because it does not work right in presence of problem B. So we can remove the check for problem A\".\n\nThen just remove problem B. It needs to be removed anyways.\n\nFor the rest of the functions without inline lambdas, it works right, so it has value there.\n\nFrom a compiler perspective, inline lembdas could be seen as separate functions. So maybe the tooling does work right with that interpretation.",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5284ac68_cc3e4344",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-13T21:42:03Z",
      "side": 1,
      "message": "\u003e Then just remove problem B. It needs to be removed anyways.\n\nSure, lets remove problem B (you and I have both been working on it), but if we had to enable this check and enforce it, it would take effort away from cleaning up B to work on A which is less important.  It is about noting that even IF we were able to enable this check, there are technical limitations in tidy that prevent it being useful in many real contexts.  If you\u0027re suggesting I go fix tidy, I\u0027ve thought about it, but that doesn\u0027t change anything about this path.",
      "parentUuid": "b54dc7be_45414b43",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0c2eb7b_ab65a607",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-14T09:55:17Z",
      "side": 1,
      "message": "\u003e but if we had to enable this check and enforce it, it would take effort away from cleaning up B to work on A which is less important.\n\nIt\u0027s documented that it does not have to be enforced yet, and certainly not at 60 lines per function.\n\nWe can discuss about a realistic line count or parameter count, but there has to be a limit somewhere, and ideally it should be documented.",
      "parentUuid": "5284ac68_cc3e4344",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c58284f_44123afd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-14T15:17:06Z",
      "side": 1,
      "message": "\u003e \u003e but if we had to enable this check and enforce it, it would take effort away from cleaning up B to work on A which is less important.\n\u003e \n\u003e It\u0027s documented that it does not have to be enforced yet, and certainly not at 60 lines per function.\n\nRight..... but that\u0027s preventing people from using this file.  The next patchset turns this into a \"reference\" of checks that we\u0027ve enabled and know can work on our codebases.\n\n\u003e \n\u003e We can discuss about a realistic line count or parameter count, but there has to be a limit somewhere, and ideally it should be documented.\n\ncpp core guidelines warns against enforcement, but does document some recommendations for length and arg count, so I think we have that even after this patch.",
      "parentUuid": "b0c2eb7b_ab65a607",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2721815_eebb18e8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-14T15:25:06Z",
      "side": 1,
      "message": "\u003e Right..... but that\u0027s preventing people from using this file. The next patchset turns this into a \"reference\" of checks that we\u0027ve enabled and know can work on our codebases.\n\nIt works on the 2 codebases you got the list from. Not sure if it will work on any other repos?\n\n\u003e cpp core guidelines warns against enforcement, but does document some recommendations for length and arg count, so I think we have that even after this patch.\n\nI am fine if we drop the checks for complexity and parameter count for now.\n\nBut the function line count is something i want to stay in here.",
      "parentUuid": "4c58284f_44123afd",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ab94edf_b6ccd93a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-14T22:29:47Z",
      "side": 1,
      "message": "\u003e \u003e Right..... but that\u0027s preventing people from using this file. The next patchset turns this into a \"reference\" of checks that we\u0027ve enabled and know can work on our codebases.\n\u003e \n\u003e It works on the 2 codebases you got the list from. Not sure if it will work on any other repos?\n\nNo, I don\u0027t know that for a fact, but I would suspect it would.  There are more repositories that have enabled these checks other than the two I mentioned, enough that I believe that the average maintainer can enable these.  With that said, if as we go along, we find specific checks that are too onerous, this list is changable.\n\n\u003e \n\u003e \u003e cpp core guidelines warns against enforcement, but does document some recommendations for length and arg count, so I think we have that even after this patch.\n\u003e \n\u003e I am fine if we drop the checks for complexity and parameter count for now.\n\u003e \n\u003e But the function line count is something i want to stay in here.\n\nCan I document it outside this file somewhere (maybe clang-tidy-next.md)?  I know you mentioned increasing the value to 9000 lines, but I\u0027d rather we document intent with the real number.  Something like \"There is general agreement that we would LIKE code to be able to conform to these checks, but are attempting to roll out changes across the repos, so these checks cannot be enabled yet.\"",
      "parentUuid": "d2721815_eebb18e8",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62eb97cb_0b552e2b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-15T07:56:57Z",
      "side": 1,
      "message": "I am fine with this approach if you need something to roll out without too much effort. That way we avoid pulling any value like `9000` or `200` out of thin air.\n\nWould prefer something like `.clang-tidy-next` so people can just copy-past from one to the other. Ideally right next to the `.clang-tidy` file.\n\nSuggested contents:\n\n```\n# This file contains additional checks we would like to enable in the future.\n\nChecks: \u0027-*,\n    readability-function-size,\n    \u0027\nCheckOptions:\n-   key: readability-function-size.LineThreshold\n    value: 60 # [1]\n-   key: readability-function-size.ParameterThreshold\n    value: 6  # [2]\n\n# [1] https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f3-keep-functions-short-and-simple\n# [2] https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f2-a-function-should-perform-a-single-logical-operation\n\n```",
      "parentUuid": "5ab94edf_b6ccd93a",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a54e04f3_c1ab3c92",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T16:27:42Z",
      "side": 1,
      "message": "There is absolutely no requirement for any \u0027experience\u0027 what-so-ever.\n\nWe can simply take what\u0027s been written down in those core guidelines, which have been documented by people who are actually C++ experts.\n\nThe OpenBMC project has already documented it is trying to follow these guidelines.\n\nhttps://github.com/openbmc/docs/blob/ac6e69a7df9c214fbf55144aafde43595a76aa60/cpp-style-and-conventions.md?plain\u003d1#L73",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "265adcbc_c7e936a4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-08-13T16:44:37Z",
      "side": 1,
      "message": "\u003e We can simply take what\u0027s been written down in those core guidelines\n\nI do agree with the overall intent of the Core Guidelines w.r.t. function length and function behavior.  But, the Core Guidelines are also vague as to what the \"enforcement\" would be of long line length.  The core guidelines do not talk about \"cognative\" or cyclomatic complexity.  I don\u0027t think it is really sufficient to point to the words in the Core Guidelines as the rationale for these.\n\n\u003e There is absolutely no requirement for any \u0027experience\u0027 what-so-ever.\n\nNo, not necessarily, but negative experience is certainly a reason for removing this, which is the data Ed is bringing.",
      "parentUuid": "a54e04f3_c1ab3c92",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f88bb7f_796ce861",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T17:04:01Z",
      "side": 1,
      "message": "\u003e negative experience is certainly a reason for removing this\n\nnegative experience in terms of \"we could not bring the function size down to 60 lines\"\nIMO shows that the project overall is not ready to try and enforce this value.\n\nMaybe we need to come up with a project-specific value which is a more realistic value. Something like 200.\n\nThen in the future if the goal has been reached then the goalpost can be moved.\n\nI guess we did not do that the first time around since people were asking for concrete sources and not arbitrary values (if i remember correctly).",
      "parentUuid": "265adcbc_c7e936a4",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4de6235_71fe9c6b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-08-13T21:42:03Z",
      "side": 1,
      "message": "\u003e IMO shows that the project overall is not ready to try and enforce this value.\n\nThis is exactly what I\u0027m trying to say in this patch.\n\n\u003e I don\u0027t think it is really sufficient to point to the words in the Core Guidelines as the rationale for these.\n\nI had similar thoughts around cppcoreguildelines enforcement recommendations, but I didn\u0027t articulate it in the commit message.\n\n\n\u003e Maybe we need to come up with a project-specific value which is a more realistic value. Something like 200.\n\nI\u0027ve tried exactly this (I think I picked 250) and the number of functions that needed to change was still too high, and because of the lambda problem, didn\u0027t even target the most complex code we had that should be the highest priority to clean up.  If I\u0027m personally going to spend time cleaning things up, it will be the deeply nested lambda garbage that we have a lot of experience to know causes problems (and I greatly appreciate your patches you send to help clean up).  Enabling this check doesn\u0027t align with those goals, and actively distracts from cleanup of the worst code we have.",
      "parentUuid": "5f88bb7f_796ce861",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e93e4cad_4792dcd8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-14T09:55:17Z",
      "side": 1,
      "message": "\u003e I\u0027ve tried exactly this (I think I picked 250) and the number of functions that needed to change was still too high, and because of the lambda problem, didn\u0027t even target the most complex code we had that should be the highest priority to clean up\n\nThen go to 350 or something. Better to have some limit there than no limit at all.\n\nI agree that cleaning up inline lambdas is more important. So if by extracting an inline lambda you exceed the line count, simply NOLINT the function and come back to it at a later time.\nIt\u0027s not a heavy lift.\n\n\n\u003e enabling this check doesn\u0027t align with those goals, and actively distracts from cleanup of the worst code we have.\n\nHow does it distract? You have your own priorities for cleanup. No one is forcing you to prioritize this issue.",
      "parentUuid": "a4de6235_71fe9c6b",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4fb6871_8d8a2cee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-15T07:56:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e93e4cad_4792dcd8",
      "revId": "23a7b882304a71de891f01b47669469dc0210c4c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}