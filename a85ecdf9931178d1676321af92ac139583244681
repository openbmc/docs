{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d6dc6936_224d11fd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2023-03-01T04:24:10Z",
      "side": 1,
      "message": "Thank you for the proposal, I think we need some more details on the daemon design though.",
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "424bbe1c_b9e17617",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000233
      },
      "writtenOn": "2023-03-08T05:18:56Z",
      "side": 1,
      "message": "The implementation details should be in a different section. \"Problem description\" should just list requirements and describe what functionality we need, not how the solution will be organized or written.",
      "range": {
        "startLine": 17,
        "startChar": 24,
        "endLine": 17,
        "endChar": 38
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e56dedc5_c8785a0c",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2023-03-20T16:55:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "424bbe1c_b9e17617",
      "range": {
        "startLine": 17,
        "startChar": 24,
        "endLine": 17,
        "endChar": 38
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92c25047_81b6e2a6",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2023-03-01T04:24:10Z",
      "side": 1,
      "message": "Do you mean the existing pldm daemon would be extended to handle RDE as well? Or is this a new daemon proposal? If it is the former case, I suggest we call it pldm daemon itself and not RDE daemon.",
      "range": {
        "startLine": 23,
        "startChar": 2,
        "endLine": 24,
        "endChar": 77
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f74c2e02_22d8a40d",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2023-03-01T18:57:36Z",
      "side": 1,
      "message": "It is a new daemon. RDE daemon is a sub directory in the `pldm` repo itself.",
      "parentUuid": "92c25047_81b6e2a6",
      "range": {
        "startLine": 23,
        "startChar": 2,
        "endLine": 24,
        "endChar": 77
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bafd37fd_8d49cf7b",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1001317
      },
      "writtenOn": "2023-03-21T07:08:15Z",
      "side": 1,
      "message": "It would be good to mention the operations supported by RDE daemon(GET, HEAD, POST, PATCH, DELETE).\nThe phases in which the operations would be supported etc",
      "parentUuid": "f74c2e02_22d8a40d",
      "range": {
        "startLine": 23,
        "startChar": 2,
        "endLine": 24,
        "endChar": 77
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bec748ee_268356bc",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2023-03-21T17:16:44Z",
      "side": 1,
      "message": "Sounds good! I will add more information about the operations. We are planning to start with GET request and then expand further (with PATCH, POST, etc) with different request. \n\nI can add a section of implementation rollout plan for different operations supported by RDE Daemon.",
      "parentUuid": "bafd37fd_8d49cf7b",
      "range": {
        "startLine": 23,
        "startChar": 2,
        "endLine": 24,
        "endChar": 77
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca0fcb4a_50ce71fe",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1001317
      },
      "writtenOn": "2023-03-23T01:20:53Z",
      "side": 1,
      "message": "Please, that would be very helpful.",
      "parentUuid": "bec748ee_268356bc",
      "range": {
        "startLine": 23,
        "startChar": 2,
        "endLine": 24,
        "endChar": 77
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e16516e5_c7207fd1",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1000233
      },
      "writtenOn": "2023-03-08T05:18:56Z",
      "side": 1,
      "message": "typo: CRUD (also I recommend spelling it out on first use)",
      "range": {
        "startLine": 26,
        "startChar": 13,
        "endLine": 26,
        "endChar": 17
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ecb32fbe_4000c546",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2023-03-20T16:55:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e16516e5_c7207fd1",
      "range": {
        "startLine": 26,
        "startChar": 13,
        "endLine": 26,
        "endChar": 17
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ce6719b_741ac7a3",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2023-03-01T04:24:10Z",
      "side": 1,
      "message": "Can you capture the design details of the daemon? This should preferably include:\n(1) D-Bus interfaces hosted by the objects of the daemon\n(2) RDE is a special protocol that converges PLDM and Redfish worlds. I would like to see how do you plan to converge the *proposed daemon* and bmcweb(current Redfish server). In my mind, bmcweb is the right place to host the user facing part of the RDE specification, and there should be an abstraction layer in bmcweb that handles an underlying RDE device.\n(3) How do you plan to handle the Redfish payload \u003c-\u003e BEJ translations?\n(4) How do you plan to model the different type of RDE devices? Ex: NIC RDE devices could have network related schemas where as RAID controllers might have storage related schemas- so the question is how does the daemon design model the different types of possible RDE devices?\n(5) Usually RDE devices will have PLDM Type 2 as well (Monitoring and Control) - this is to facilitate the RDE PDRs. Currently the PLDM Type 2 is already handled by pldm daemon; so can you capture the flow of type 2 and type 6 during RDE initialisation phase?",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 18
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c42e88e_703c906c",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2023-03-01T18:57:36Z",
      "side": 1,
      "message": "This design is focusing majorly on the requester library and RDE daemon iteraction.\n\nBut to summarize, that is correct we will receive the requests via BMCWeb and the BMCWeb Aggregator design is focusing on handling the multiple RDE devices, as it will forward the request over DBus call, with parameters such as URI, payload, etc.\nI would rather write a separate design doc, that captures BMCWeb and RDE daemon interactions, etc.; and maybe keep this as an interaction between RDE Daemon and requester library, but I am open to suggestions.\n\n--\nTo answer a couple of questions: \n- We are thinking of something called an RDE translator (which would be nothing but a couple of cpp files within the rde subdirectory) that takes care of converting the payload or any data received from Redfish request into a RDE compatible format. \nWe already have `libbej` in openbmc that encodes and decodes the",
      "parentUuid": "3ce6719b_741ac7a3",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 18
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2521a602_af4d1218",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2023-03-01T19:11:19Z",
      "side": 1,
      "message": "-- Continuing the previous comment--\n* Yes the RDE devices have PLDM Type 2, where we need to get the PDRs from the RDE device. Since we were keeping the RDE as a completely separate entity, we were currently sending the type 2 and 6 requests directly from RDE daemon to the rde devices and storing them within itself during the initialization phase (That is again using the requester library).\n\nAlso, when you say PLDM already handles Type2, does it mean PLDM has facility to send the request to the RDE device and store the PDRs?",
      "parentUuid": "7c42e88e_703c906c",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 18
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "812d1291_8a408364",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2023-03-20T16:55:16Z",
      "side": 1,
      "message": "-- On PLDM supporting PDR --\nI am not sure if PLDM daemon is requesting for PDRs from RDE device.\n\nI think in the case of RDE, we request the RDE device for Device PDRs and store them to use for URI-resource id mapping, hence it would be exclusively handled by the RDE daemon itself. \n\nYou can correct me if my understanding seems wrong w.r.t PLDM PDR implementation.",
      "parentUuid": "2521a602_af4d1218",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 18
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3003872_7c3d4adb",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2023-03-20T17:18:50Z",
      "side": 1,
      "message": "Added a lot of the other information in the latest patchset (Patchset 5) about the RDE Daemon, RDE Device fetching etc.",
      "parentUuid": "812d1291_8a408364",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 18
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f610b1d5_e9199705",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2023-03-20T07:00:25Z",
      "side": 1,
      "message": "We already have a PLDM discovery part(PLDM base) implementation under review \nhttps://gerrit.openbmc.org/c/openbmc/docs/+/47252/18/designs/pldm-stack.md#340\nhttps://gerrit.openbmc.org/c/openbmc/pldm/+/51443/\n\nAdding the same here might be a duplicate. Also, 2 separate daemons handling same device (assigning TID etc..) might not be a good idea. I believe, PLDM RDE can be an extension of existing PLDM daemon itself.",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 91,
        "endChar": 19
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b8ca1c9_f5bcdebd",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2023-03-20T16:55:16Z",
      "side": 1,
      "message": "Does this support setting up PLDM on multiple RDE devices? If yes, how will it distinguish between RDE devices?\n\nRight now it seems like it is sending a message to an Eid, what if we have same EID and the only way to distinguish between devices is netid?\n\nAlso when you say that PLDM RDE `can be an extension`, do you mean not having a separate daemon??\n\nBecause RDE needs to do a lot of work- \n\n* RDE Discovery including RDE Negotiate parameters, RDE medium parameters and then catering to RDE requests **on demand**, such as read, update, etc.\n\n* Also, there could be multiple RDE devices that would need that setup which would require setting up the PLDM Base discovery on each of them and (as I mentioned) could be having same EID but diff netID (which we could produce randomly on start up etc.). \n\n* The discovery of RDE Devices would also be a bit challenging: For instance, lets say there are USB devices that are RDE devices, one needs to discover/monitor them (maybe via `Detector` in EntityManager) and having a `Reactor` somewhere at the RDE side. We would need to tie up Dbus methods to the interfaces for each RDE device to cater to the read/update etc. request. Hence there would be a lot more processes that would be RDE specific (\u0026 not just PLDM per se) in this case. \n * Just a quick summary on detector-reactor design for RDE Devices:\n   * Each of the RDE device detected would be put up as an object path in the Entity Manager based on some probe logic\n   * Then the reactor, would detect those object paths (at the RDE end) and create rde specific object paths for each RDE device with DBus methods exposed for each of the CRUD operations.\n   * Then the DBus methods will be executed during any CRUD operation requests.\n \nI think having RDE within the PLDM daemon can convolute a lot of things and would strongly propose having a separate RDE daemon.\n\nLet me know what you think about it!",
      "parentUuid": "f610b1d5_e9199705",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 91,
        "endChar": 19
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5976fbda_1f36fd92",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2023-03-01T04:24:10Z",
      "side": 1,
      "message": "CRUD ?",
      "range": {
        "startLine": 102,
        "startChar": 2,
        "endLine": 102,
        "endChar": 7
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "216bfb5e_f8ca7d62",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2023-03-01T18:57:36Z",
      "side": 1,
      "message": "Primarily create, read, update operations. I can change it to read and update operations for now. Since that is what we are focussing on.",
      "parentUuid": "5976fbda_1f36fd92",
      "range": {
        "startLine": 102,
        "startChar": 2,
        "endLine": 102,
        "endChar": 7
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6dc74f83_26ba27d0",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2023-03-01T19:29:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "216bfb5e_f8ca7d62",
      "range": {
        "startLine": 102,
        "startChar": 2,
        "endLine": 102,
        "endChar": 7
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68f32953_586b4569",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1000233
      },
      "writtenOn": "2023-03-08T05:18:56Z",
      "side": 1,
      "message": "(I think Sumanth was just pointing out the typo)",
      "parentUuid": "6dc74f83_26ba27d0",
      "range": {
        "startLine": 102,
        "startChar": 2,
        "endLine": 102,
        "endChar": 7
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "032d4278_f64f7e1e",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1001582
      },
      "writtenOn": "2023-03-20T16:55:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "68f32953_586b4569",
      "range": {
        "startLine": 102,
        "startChar": 2,
        "endLine": 102,
        "endChar": 7
      },
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40f47407_126f359e",
        "filename": "designs/redfish-device-enablement.md",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 1000233
      },
      "writtenOn": "2023-03-08T05:18:56Z",
      "side": 1,
      "message": "Please add some alternative design ideas and why they\u0027re not as good.\n\ne.g., integrate directly into bmcweb, use a separate daemon for the requester library and talk to it over D-Bus, etc",
      "revId": "a85ecdf9931178d1676321af92ac139583244681",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}