{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6764f359_eba27772",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-10-11T07:21:38Z",
      "side": 1,
      "message": "While it doesn\u0027t seem to be spelled out explicitly here as far as I can see, I assume the idea here is that the one-shot service would exit after performing the GPIO initialization described by the config file?\n\nIf so, that doesn\u0027t sound like a great fit with the \"modern\" (non-legacy) kernel GPIO interface, under which I believe GPIO state is undefined after the process exits (or the relevant file descriptors are closed).  Depending on implementation details of the underlying components (kernel/drivers, hardware), whatever initialization had been performed might just be immediately reverted.\n\n(And alternately, if the process sticks around to maintain the specified GPIO state I think that would prevent anything else from being able to access those GPIOs, which also probably isn\u0027t what we\u0027d want -- if you just want GPIOs tied statically, a device-tree gpio-hog could achieve that.)",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b15d8872_937b32a4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-12T15:00:23Z",
      "side": 1,
      "message": "It appears that you\u0027ve deleted significant portions of the design document template.  Please don\u0027t do that.\n\nWhat are the repositories you\u0027re expecting to be affected by this feature?  Or are you requesting a new repository?",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d81b2ba_ddf9b7eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-13T09:01:12Z",
      "side": 1,
      "message": "While it doesn\u0027t seem to be spelled out explicitly here as far as I can see, I assume the idea here is that the one-shot service would exit after performing the GPIO initialization described by the config file?\n\nReply:\nYes, this is a one-shot service and would exit after performing the GPIO initialization described by the config file.\n\nIf so, that doesn\u0027t sound like a great fit with the \"modern\" (non-legacy) kernel GPIO interface, under which I believe GPIO state is undefined after the process exits (or the relevant file descriptors are closed).  Depending on implementation details of the underlying components (kernel/drivers, hardware), whatever initialization had been performed might just be immediately reverted.\n\n(And alternately, if the process sticks around to maintain the specified GPIO state I think that would prevent anything else from being able to access those GPIOs, which also probably isn\u0027t what we\u0027d want -- if you just want GPIOs tied statically, a device-tree gpio-hog could achieve that.)\n\nReply:\nWe have surveyed device-tree gpio-hog, but after implementing it, the resource would be occupied causing that other clients couldn\u0027t access specific gpio.\nCurrently, we are discussing with upstream. \nHowever, for short-term solution, we provided a service that not only could initialize gpios but also any clients could access all gpios.",
      "parentUuid": "6764f359_eba27772",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "363b9b87_52a8ae00",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-13T09:06:03Z",
      "side": 1,
      "message": "It appears that you\u0027ve deleted significant portions of the design document template.  Please don\u0027t do that.\n\nReply:\nWe will add all the indispensable portions to the design document.\n\nWhat are the repositories you\u0027re expecting to be affected by this feature?  Or are you requesting a new repository?\n\nReply:\nYes, we are requesting a new repository for gpio initialization.",
      "parentUuid": "b15d8872_937b32a4",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb8c717c_bd0bfa4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-10-13T09:32:58Z",
      "side": 1,
      "message": "\u003e However, for short-term solution, we provided a service that not only could initialize gpios but also any clients could access all gpios.\n\nBut the problem there is that the /dev/gpiochip API (what libgpiod uses internally) doesn\u0027t allow that model to work -- if the process that does the initialization exits, the state of the GPIOs it initialized may well change back to what they started out as (or something else entirely -- it doesn\u0027t guarantee anything).",
      "parentUuid": "1d81b2ba_ddf9b7eb",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4380052_da2fab9a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-14T08:59:40Z",
      "side": 1,
      "message": "Could you provide more detail about the model that you mentioned?\n\nCould you provide some examples for the behavior that the state of GPIOs may change back to what they started out as after the process exits?\n\nIn our user cases, we do initialization for GPIO which direction is output and not open-drain pin\nFurthermore, after our testing, the process could works.",
      "parentUuid": "fb8c717c_bd0bfa4b",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bbcd444_c4eab91b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-10-14T10:17:33Z",
      "side": 1,
      "message": "Unfortunately I haven\u0027t been able to find much in the way of actual documentation, but note the warning in the output of `gpioset --help`, which is from the libgpiod repo (emphasis added):\n\n```\n$ gpioset --help\nUsage: gpioset [OPTIONS] \u003cchip name/number\u003e \u003coffset1\u003e\u003d\u003cvalue1\u003e \u003coffset2\u003e\u003d\u003cvalue2\u003e ...\n\nSet GPIO line values of a GPIO chip and maintain the state ***until the process exits***\n\n...\n\nNote: the state of a GPIO line controlled over the character device reverts to default\nwhen the last process referencing the file descriptor representing the device file exits.\nThis means that it\u0027s wrong to run gpioset, have it exit and expect the line to continue\nbeing driven high or low. It may happen if given pin is floating but it must be interpreted\nas undefined behavior.\n```\n\n(Thanks @arj for the pointer on that.)\n\nFrom a bit of digging through the kernel code, I think that undefined-ness may stem at least in part from the `gc-\u003efree()` callback here: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/gpio/gpiolib.c?id\u003dv6.0#n2029\n\nSo, it\u0027s not surprising that it may happen to work on your particular system, but it\u0027s not guaranteed and we probably shouldn\u0027t be relying on it (it may well vary between different devices \u0026 drivers, e.g. due to differences in the `-\u003efree()` callback linked above).",
      "parentUuid": "e4380052_da2fab9a",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c4e896f_9ed06c01",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-19T08:44:53Z",
      "side": 1,
      "message": "We have validated the driver code but we didn\u0027t see that gc-\u003efree() be called after our service exits.",
      "parentUuid": "6bbcd444_c4eab91b",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12da88fe_642e8b87",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-19T09:34:19Z",
      "side": 1,
      "message": "We think gc-\u003efree() is called in driver porting phase, so after the gpio driver is successfully probed, gc-\u003efree() could\u0027t be called in application layer when we use any gpio related drivers.",
      "parentUuid": "0c4e896f_9ed06c01",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2164c41d_73dde87e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001292
      },
      "writtenOn": "2022-10-26T02:54:31Z",
      "side": 1,
      "message": "Minor fix-ups in formatting to resolve.",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd38dd0d_f3f589e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-10-31T19:16:08Z",
      "side": 1,
      "message": "I don\u0027t think the \"set gpio state and exit\" problem has really been resolved here (and frankly I don\u0027t see any clear way it could be).",
      "parentUuid": "12da88fe_642e8b87",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67c9db95_1c4511c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-11-01T08:52:53Z",
      "side": 1,
      "message": "Before discuss the \"set gpio state and exit\" solution, do you agree the concept that gc-\u003efree() could\u0027t be called in application layer when users use any gpio related drivers.\n\nOr do you have any other concern on that concept?",
      "parentUuid": "fd38dd0d_f3f589e0",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7c913d9_aa90d279",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2022-11-01T08:58:41Z",
      "side": 1,
      "message": "That\u0027s an implementation detail, and hence not really something I think should be a central focus of discussion.  The crux of the problem is the aspect described in the bit of `gpioset --help` output quoted above, which as far as I can see renders the whole approach proposed in this document unworkable.",
      "parentUuid": "67c9db95_1c4511c9",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f511c4d_38124ba7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-11-02T09:31:31Z",
      "side": 1,
      "message": "The service that we implemented uses the API in libgpiod not \"gpioset\" tool.\n\nMoreover, after checking the API in libgpiod, the value wouldn\u0027t restore to default after using the API.",
      "parentUuid": "c7c913d9_aa90d279",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "663e19b4_d899ebeb",
        "filename": "designs/gpio-initialization-service.md",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1001292
      },
      "writtenOn": "2022-10-26T02:54:31Z",
      "side": 1,
      "message": "Please wrap all lines at the allowed length of 80 characters.",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c8949d6_d1c8de3a",
        "filename": "designs/gpio-initialization-service.md",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-27T02:02:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "663e19b4_d899ebeb",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc53e6c0_f61830c6",
        "filename": "designs/gpio-initialization-service.md",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1001292
      },
      "writtenOn": "2022-10-26T02:54:31Z",
      "side": 1,
      "message": "GPIO.  Capitalization of GPIO needs to be consistent in this doc except when it is in a command or file name.",
      "range": {
        "startLine": 57,
        "startChar": 71,
        "endLine": 57,
        "endChar": 75
      },
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0bb7ea92_32fc6557",
        "filename": "designs/gpio-initialization-service.md",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-27T02:02:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc53e6c0_f61830c6",
      "range": {
        "startLine": 57,
        "startChar": 71,
        "endLine": 57,
        "endChar": 75
      },
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb8da9cf_b5494bda",
        "filename": "designs/gpio-initialization-service.md",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1001292
      },
      "writtenOn": "2022-10-26T02:54:31Z",
      "side": 1,
      "message": "- ChipId: This is the device name.  It is either offset (\"0\") or the complete GPIO device (\"gpiochip0\").",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21dd050f_eb0eb5f7",
        "filename": "designs/gpio-initialization-service.md",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-27T02:02:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cb8da9cf_b5494bda",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "642ce0f7_b06d8c0f",
        "filename": "designs/gpio-initialization-service.md",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1001292
      },
      "writtenOn": "2022-10-26T02:54:31Z",
      "side": 1,
      "message": "GPIO",
      "range": {
        "startLine": 60,
        "startChar": 46,
        "endLine": 60,
        "endChar": 50
      },
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64ddc584_bd88a814",
        "filename": "designs/gpio-initialization-service.md",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-27T02:03:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "642ce0f7_b06d8c0f",
      "range": {
        "startLine": 60,
        "startChar": 46,
        "endLine": 60,
        "endChar": 50
      },
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cab4eb37_3dcb57fc",
        "filename": "designs/gpio-initialization-service.md",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1001292
      },
      "writtenOn": "2022-10-26T02:54:31Z",
      "side": 1,
      "message": "GPIO",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d47476f5_fc7ed25b",
        "filename": "designs/gpio-initialization-service.md",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2022-10-27T01:07:51Z",
      "side": 1,
      "message": "Revised the format issue",
      "parentUuid": "cab4eb37_3dcb57fc",
      "revId": "a82526dc88c8795bf36e7ed61359a5815c1fb98e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}