{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e68a6db8_27655169",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2024-05-17T17:48:25Z",
      "side": 1,
      "message": "Very nice! Overall, it looks good to me and adds some great improvements.\n\nA couple concerns are about the performance of the logs being on D-Bus vs. in the filesystem:\n\nFirst is the start-up performance.  Do we have data on how long it takes to reload 10,000 D-Bus logs?  And could this slow down boot time overall?\n\nSecond is Redfish performance.  Do we know how long it takes for bmcweb to read 10,000 logs from D-Bus when the URL is accessed?  If it\u0027s a long time, this may need to be mitigated with something like displaying the first page of logs while loading the remaining logs in the background.\n\nIf there is a performance impact, do we need to consider an alternative to D-Bus for storing event logs?",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "187cae7c_e8401954",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-20T14:41:58Z",
      "side": 1,
      "message": "\u003e First is the start-up performance. Do we have data on how long it takes to reload 10,000 D-Bus logs? And could this slow down boot time overall?\n\nI previously did experiments with increasing the logging daemon to hold 30k events and there was nothing noticeable, except that creating that many events took a _long_ time to write to the NOR flash.  I did not explicitly measure start-up though.\n\nI didn\u0027t think it was appropriate for this document, but I have some ideas of alternative ways to store the data in phosphor-logging if that becomes the performance bottleneck.  One idea is to use an sqlite database for holding the events.\n\nThe \"can scale to 10k logs\" is, at this point, an per-integrator option and not a requirement but Meta plans to use something large.\n\n\u003e Second is Redfish performance. Do we know how long it takes for bmcweb to read 10,000 logs from D-Bus when the URL is accessed? If it\u0027s a long time, this may need to be mitigated with something like displaying the first page of logs while loading the remaining logs in the background.\n\nI think we have partially the same problem with the rsyslog one (from a purely Redfish perspective), except that we\u0027re going directly to a file for it?  If you\u0027re asking about the Redfish to phosphor-logging aspects, yes, this DBus activity could be a constraint.  We could add an interface to the `Logging.Manager` DBus interface to \"get all the logs as a file descriptor\", which should mitigate this.  As far as pagination, I\u0027m not positive if this is something Redfish would support anyhow; this sounds like something that the webui might want but not inherent to Redfish.\n\n\u003e If there is a performance impact, do we need to consider an alternative to D-Bus for storing event logs?\n\nI don\u0027t foresee a need to stop phosphor-logging from creating DBus objects for these, but there very well could be a need to improve the transfer between bmcweb and phosphor-logging.  Addressed above.",
      "parentUuid": "e68a6db8_27655169",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79365404_dd19878a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2024-05-21T13:51:02Z",
      "side": 1,
      "message": "\u003e I previously did experiments with increasing the logging daemon to hold 30k events and there was nothing noticeable, except that creating that many events took a long time to write to the NOR flash. I did not explicitly measure start-up though.\n\nI see.  My worry is that it would take a comparatively long time to read the data and re-generate all the D-Bus entries on start-up vs. rsyslog that has almost no start-up cost.\n\nIt may just be us, but we\u0027re starting to run into issues where D-Bus gets saturated and causes other issues.  So, I\u0027m just thinking through if there may be an alternative to D-Bus as the shared log storage that could solve this.  For example, if we can provide a well-defined filesystem storage format, could consumers like bmcweb directly read from there, and `commit`ed logs would not need to be added to D-Bus?\n\n\u003e As far as pagination, I\u0027m not positive if this is something Redfish would support anyhow; this sounds like something that the webui might want but not inherent to Redfish.\n\nIt doesn\u0027t do any pre-loading in the background, but the Redfish log supports pagination and shows only the first 1000 logs by default to provide a quicker response to the user request when there are a lot of logs.",
      "parentUuid": "187cae7c_e8401954",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc099a24_2c780abe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2024-05-21T18:02:37Z",
      "side": 1,
      "message": "We allow up to 3K of our logs (the max size 16KB PELs) on our systems and have definitely seen startup timing issues with loading all of these and getting them on d-bus. The original rsyslog design was done the way it was because of these d-bus bottlenecks. I\u0027m not sure what\u0027s really been done with this proposed design to address that issue? Is there something more efficient done here? It seems without using the journal we may even be increasing our d-bus traffic?",
      "parentUuid": "79365404_dd19878a",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4c684b3_6ffda3e9",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2024-05-17T17:48:25Z",
      "side": 1,
      "message": "typo: `is a versioned`",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "972e2ba2_6ad760ca",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-20T14:41:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4c684b3_6ffda3e9",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83b3205b_e578ac75",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-05-20T06:46:38Z",
      "side": 1,
      "message": "I am not sure if it is an option, Have you considered using [otel logs](https://opentelemetry.io/docs/concepts/signals/logs/ )? This will give better tooling support for analysis and debug tracing.",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28b38a71_1bc2ce5a",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-20T12:30:36Z",
      "side": 1,
      "message": "I don\u0027t know how to connect your question and this section.  I spent about 5 minutes going through the link(s) you provided and eventually got to this:  https://github.com/open-telemetry/oteps/blob/main/text/logs/0097-log-data-model.md#example-log-records\n\nThere isn\u0027t currently any plan to use OpenTelemetry inside all the BMC applications.  Should this be added to the Alternatives?  I can\u0027t really tell what the overlap is between OTEL, this proposal and the existing lg2/systemd-journald support.  Can you give more information on your thoughts here.\n\nThis section here is about current state of the art in Redfish.  Exposing internal error and event reporting through Redfish is the top priority as that is what is being used for general system management.  Is OTEL using another protocol or is there an OTEL-to-Redfish mapping somewhere?",
      "parentUuid": "83b3205b_e578ac75",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecac1136_dfe28a4f",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-05-20T14:26:54Z",
      "side": 1,
      "message": "I guess one of the problem this document trying to address is the possibility of better tooling for log and trace analysis. I pointed at the open telemetry because it  has standard format for logs and already some tools are available to help with analysis of it. But it does not work with redfish message registry format. Otel is not used for error reporting( as a response to redfish request). It is used for log, metric and trace collection using open standard for better observability and debugging.",
      "parentUuid": "28b38a71_1bc2ce5a",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec3c7688_a7bea62b",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2024-05-17T17:48:25Z",
      "side": 1,
      "message": "typo: `do not currently`?",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e313a394_9a0db255",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-20T14:41:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec3c7688_a7bea62b",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32a8dc0e_6d8e198b",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 355,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2024-05-17T17:48:25Z",
      "side": 1,
      "message": "typo: `will be recorded`",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c39b3c9_2a528aff",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 355,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-20T14:41:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "32a8dc0e_6d8e198b",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08691f29_c2448947",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 386,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2024-05-17T17:48:25Z",
      "side": 1,
      "message": "I like the shorter name.  Also, what does `commit` mean?  Is there a more descriptive name that could be used if we move it to `lg2`?",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecac0888_63bc9487",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 386,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-20T14:41:58Z",
      "side": 1,
      "message": "The choice of `commit` was already in phosphor-logging and probably comes from IBM internal terminology.  It means \"take this in-memory error object and add it to the permanent record\".  I\u0027m not sure if you have ideas on a better verb.",
      "parentUuid": "08691f29_c2448947",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca559ce7_1da96dc1",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 386,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2024-05-21T13:51:02Z",
      "side": 1,
      "message": "Now that I know what it means, `commit` is okay for me. `store` or `persist` are some ideas, but if everyone is already familiar with `commit`, it\u0027s probably not worth changing.\n\nSorry, I\u0027m not familiar with the API.  Is it two steps? Log first then commit?  If so, could we make it one step and do something like change `commit` to a flag to determine if it should go to the permanent record?",
      "parentUuid": "ecac0888_63bc9487",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27637727_b8365b32",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 647,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2024-05-17T17:48:25Z",
      "side": 1,
      "message": "typo: `for a developer to`",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc1553e8_b21edf25",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 647,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-20T14:41:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "27637727_b8365b32",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6291f2a_fb15e2ce",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 666,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-05-20T06:46:38Z",
      "side": 1,
      "message": "looks like this is key value pairs. But that is not evident in the argument passing. Is it too verbose to do as below?\n```\n UpdateFailure(m_p(\"TARGET\", \"BMC Flash A\"),m_p(\"ERRNO\", rc), m_p(\"CALLOUT_HARDWARE\", bmc_object_path));\n```\nYou can see the implementation [here](https://godbolt.org/z/rGfMrneW3)",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e304a770_319c2922",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 666,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-20T12:22:55Z",
      "side": 1,
      "message": "The old interface did the pairing like this and it was pretty verbose.  The lg2 interface allows 2 or 3 elements (depending on if you\u0027re using flags or not) without the wrapper, so this follows the same conventions.\n\nAbove that, once you construct a sub-object (such as a std::pair you described) you can no longer do constexpr analysis of the parameters.  This precludes doing compile time assurance that all the tuples have been provided.",
      "parentUuid": "e6291f2a_fb15e2ce",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c46e0c1a_dcd7b1fb",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 666,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-05-20T14:26:54Z",
      "side": 1,
      "message": "Yeah I agree the verbose part of it. But not sure about the compile time check you are talking about . This code  https://godbolt.org/z/xcsedqTn9 proves to be doing compile time evaluation and static assert on allowed parameter type and total number of parameters needed. This works as long the the arguments are known at compile time. But fails otherwise. Does the method 3 do type check for runtime values for you?",
      "parentUuid": "e304a770_319c2922",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3bcc4ff_c30a3530",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 666,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-05-20T14:30:06Z",
      "side": 1,
      "message": "actually it works with runtime values too https://godbolt.org/z/Ea7nMeT8G",
      "parentUuid": "c46e0c1a_dcd7b1fb",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58e1b1f8_07991d26",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 695,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2024-05-17T17:48:25Z",
      "side": 1,
      "message": "typo: `syntax has similar`",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8bb2d2bf_a6433db3",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 695,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-20T14:41:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "58e1b1f8_07991d26",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "048de494_4f159935",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 745,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2024-05-17T17:48:25Z",
      "side": 1,
      "message": "typo: `replace it with the`",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43316236_13854ce1",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 745,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-20T14:41:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "048de494_4f159935",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b9a7b77_5743c409",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 796,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2024-05-17T17:48:25Z",
      "side": 1,
      "message": "I assume these will need to be moved to an Intel downstream vendor addition to the registry?",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "147c301f_bf2a197f",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 796,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-20T14:41:58Z",
      "side": 1,
      "message": "At this point, I don\u0027t think they need to be moved, as the existing rsyslog mechanization will still work, right?\n\nI don\u0027t expect that we will remove the existing OpenBMC Redfish registry, at least not for a while.  My understanding from Ed is that these are \"locked in\" for external backwards compatibility.\n\nThe best bet though, in order to both maintain the backwards compatibility and to update to the new error interfaces, is to have these applications define error events in `com.intel` in phosphor-dbus-interfaces with the `redfish-mapping` directive pointing to these \"old\" ones.",
      "parentUuid": "5b9a7b77_5743c409",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9967682b_790b9b39",
        "filename": "designs/event-logging.md",
        "patchSetId": 2
      },
      "lineNbr": 796,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2024-05-21T13:51:02Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "147c301f_bf2a197f",
      "revId": "1a924e05135b4e20bc2780c663c7fca72f51355c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}