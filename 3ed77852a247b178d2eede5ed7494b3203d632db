{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4c1a180b_2ca96ebc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-02-26T07:42:09Z",
      "side": 1,
      "message": "@zhichuang - Thanks for the review. Asking it here since I have not got a response on the mailing list. I have sent out a note for you here:  https://lore.kernel.org/openbmc/e674332a-6956-4184-b077-39a0cc0e624d@gmail.com/T/#u\n\nIt\u0027s quite a while since the original design document was merged - but till now there is no code-drop. Do you still have plans to work on the spdm code ? Can you please take a look at my email and reply back ?",
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1dba5fa_198ae79d",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-03-06T14:42:40Z",
      "side": 1,
      "message": "I agree with milton and additonaly I wanted to know how the object ID for the SPDM D-Bus objects looks like?\n\nHow do you map the SPDM D-bus objects(Devices discovered through neighbpur discovery) to the Inventory?",
      "range": {
        "startLine": 126,
        "startChar": 46,
        "endLine": 126,
        "endChar": 68
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abddf156_6d5ced0e",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-03-10T13:12:48Z",
      "side": 1,
      "message": "\u003e I agree with milton and additonaly I wanted to know how the object ID for the SPDM D-Bus objects looks like?\n\u003e \n\nWhat do you mean by object id ? is it an SPDM spec term ? \n\n\u003e How do you map the SPDM D-bus objects(Devices discovered through neighbpur discovery) to the Inventory?\n\nIn my latest patchset , I plan on using the entity manager satellite controller schema (changed based on comments from milton). So the satellite controller object and the Rot(TPM) objects hosted by EM would be associated via the [physical topology design](https://github.com/openbmc/docs/blob/master/designs/physical-topology.md)",
      "parentUuid": "c1dba5fa_198ae79d",
      "range": {
        "startLine": 126,
        "startChar": 46,
        "endLine": 126,
        "endChar": 68
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95985c28_2dd0c6bf",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-03-12T07:39:11Z",
      "side": 1,
      "message": "\u003eWhat do you mean by object id ? is it an SPDM spec term ?\nI’m referring to the D-Bus object identifier.\n\n\u003eIn my latest patchset , I plan on using the entity manager satellite controller schema\nSo, the Satellite Management Controller is also exposed outside the BMC? Can these satellite management controllers be accessed externally?\n\nAre you saying that all device IPs will be statically configured in the Entity Manager configuration file, and Entity Manager will read this configuration to create the Inventory D-Bus Object? Will there then be a \"containing-contained by\" relationship?",
      "parentUuid": "abddf156_6d5ced0e",
      "range": {
        "startLine": 126,
        "startChar": 46,
        "endLine": 126,
        "endChar": 68
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13ca5b51_79a30f19",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-03-12T09:02:21Z",
      "side": 1,
      "message": "\u003e I’m referring to the D-Bus object identifier.\n\nIt can be anything, right ? How does the object path matter ? This is purely an implementation detail, right ? we can do construct something based on the RoT object (or) we can even give random strings like how entity manager does or we can even give 1, 2,3 .. e.t.c  \n\nYes, both the satellite controller and the RoT objects will be associated by containing-contained by relationships.",
      "parentUuid": "95985c28_2dd0c6bf",
      "range": {
        "startLine": 126,
        "startChar": 46,
        "endLine": 126,
        "endChar": 68
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03fdbbd7_8df3708a",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-03-12T13:20:50Z",
      "side": 1,
      "message": "\u003eIt can be anything, right ? How does the object path matter ?\nYes, It can be but if these objects is being used by the bmcweb to show the componnet integrity endpoints, we don\u0027t need to do define a new method in the bmcweb to give a meaningful name to the componnet integrity endpoints",
      "parentUuid": "13ca5b51_79a30f19",
      "range": {
        "startLine": 126,
        "startChar": 46,
        "endLine": 126,
        "endChar": 68
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54bac5a8_4982e7bd",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-03-12T14:34:07Z",
      "side": 1,
      "message": "\u003e \u003eIt can be anything, right ? How does the object path matter ?\n\u003e Yes, It can be but if these objects is being used by the bmcweb to show the componnet integrity endpoints, we don\u0027t need to do define a new method in the bmcweb to give a meaningful name to the componnet integrity endpoints\n\nWell, there is no code in bmcweb as of today to show any of this. Not sure which method are you talking about. But it does seem like an implementation detail. Can we figure that out when we get to the implementation ?",
      "parentUuid": "03fdbbd7_8df3708a",
      "range": {
        "startLine": 126,
        "startChar": 46,
        "endLine": 126,
        "endChar": 68
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6e4e9a3_86e85db1",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-03-14T14:48:43Z",
      "side": 1,
      "message": "\u003eWell, there is no code in bmcweb as of today to show any of this\n\nIt needs to be written, Please look at the redfish component Integrity schema.\n\nAs part of component integrity schema, you need to show all the devices whose mesaurement needs to be fetched.Now we need the meaningful redfish endpoints.\n\nDbus object : /xyz/openbmc_project/ComponentIntegrity/{ComponentIntegrityId}\nRf Endpoint: /redfish/v1/ComponentIntegrity/\u003cComponentIntegrityId\u003e\n\nsomething like BMC_O, BMC_1, We need to populate these identifier either in the D-bus or in the bmcweb, and hence I asked the D-Bus objet Identifier.\n\nbut looks like you are not bothered as in your case bmc is fetching the measurement from other BMC throuh SPDM over TCP.\n\nWould it be a good idea to enhance this design?\n\n- How the SPDM Dbus object tree looks like?\n- associations which is being built in the SPDM D-bus object",
      "parentUuid": "54bac5a8_4982e7bd",
      "range": {
        "startLine": 126,
        "startChar": 46,
        "endLine": 126,
        "endChar": 68
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e6a3157_d64a4a72",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-03-06T08:37:25Z",
      "side": 1,
      "message": "No\n\nspdm over TCP is about communication with an arbitrary remote anywhere on the network.   I didn\u0027t see any mention of physical adjacency.\n\nthe Neighbor interface referenced is about exposing the ARP table translating and IP address to the next hop (router or local subnet) Ethernet (or maybe other technologies) MAC address.   this is evident from both the interface for the entry and the possible states enumerated.\n\nedit: you recognized it as the ARP table but not the implications below.",
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "daade89f_cf725f80",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-03-10T13:12:48Z",
      "side": 1,
      "message": "Yes, that makes sense milton, In the latest patch i have migrated the logic to rely on EM (Satellite controller interface) instead of phosphor-networkd. That should solve the problem you stated above.",
      "parentUuid": "9e6a3157_d64a4a72",
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85c51fbc_f19a55db",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-03-04T19:57:39Z",
      "side": 1,
      "message": "This isn\u0027t clear to me how this works.  Do we have documents from phosphor-network already?\n\nI don\u0027t think we should be doing SPDM-over-TCP generically over any network interface.  You likely want this constrained to internal USB-network connections, correct?  (Or at least I think most people would).  I suspect we need some explicit configuration here.\n\nIf you are going to allow generic SPDM-over-TCP, without a known hardware connection, how do you ensure there is no man-in-the-middle and/or emulation of SPDM?  Having the ability to be tricked by some raspberrypi sitting on your network seems undesirable.",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 171,
        "endChar": 74
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db351a65_fd2a7302",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-03-05T14:55:52Z",
      "side": 1,
      "message": "\u003e This isn\u0027t clear to me how this works.  Do we have documents from phosphor-network already?\n\nI don\u0027t think we have any documentation as such apart from the dbus interfaces \u0026 code , a bit more information about this interface can be found at\nhttps://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/16427\nhttps://github.com/openbmc/phosphor-networkd/blob/master/src/rtnetlink_server.cpp#L73\n\nphosphor-networkd has all the infrastructure to host neighbor information. It uses rtnetlink messages RTM_NEWNEIGH to discover neighbor table entries (i.e the ARP entry).\n\n\u003e \n\u003e I don\u0027t think we should be doing SPDM-over-TCP generically over any network interface.  You likely want this constrained to internal USB-network connections, correct?  (Or at least I think most people would).  I suspect we need some explicit configuration here.\n\u003e \n\nYes that\u0027s right, we don\u0027t plan on running it on any arbitrary ethernet interface. We plan on using an internal ethernet interface which is not exposed to the outside world. But that configuration need not be present in spdm daemon itself right? The neighbor interface can be selectively added for a specific interface of interest by phosphor-networkd (or) someone can use CreateStatic interface https://github.com/openbmc/phosphor-networkd/blob/master/yaml/xyz/openbmc_project/Network/Neighbor/CreateStatic.interface.yaml to configure the neighbor on a desired network interface.\n\n\n\u003e If you are going to allow generic SPDM-over-TCP, without a known hardware connection, how do you ensure there is no man-in-the-middle and/or emulation of SPDM?  Having the ability to be tricked by some raspberrypi sitting on your network seems undesirable.\n\nYes, I agree with you that we should not be running SPDM on unknown hardware in general. But even if we run, the protocol itself has all the safety incorporated in its design. SPDM is a protocol that allows devices to establish trust by validating the measurements \u0026 certificate related information that w passed. Even if someone could emulate SPDM packets, the attestation would fail because the certificates presented by Raspberry Pi fails the verification against a known CA.",
      "parentUuid": "85c51fbc_f19a55db",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 171,
        "endChar": 74
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32a97727_8db25bf3",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-03-06T08:37:25Z",
      "side": 1,
      "message": "\u003e RTM_NEWNEIGH to discover neighbor table entries (i.e the ARP entry).\n\nthe ARP table is not a generic IP address registry.\n\nARP is used to identify the physical address of the next hop in the IP network layer.   it\u0027s about translating router IP address to the local media address.\n\nDPZdM over TCP is not restricted to physically adjacent endpoints in the local subnet.\n\nFind another place to discover your endpoints.   maybe it\u0027s a DNS.  or a hostname file.  Even a or a DHCP server would be preferred.\n\nbut not the kernel ARP table.  registering we to static entries will have other negative side effects in addition to limiting the spdm partners.",
      "parentUuid": "db351a65_fd2a7302",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 171,
        "endChar": 74
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8f78723_949fb11c",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-03-06T09:11:24Z",
      "side": 1,
      "message": "Actually back up.   The redfish model is about representing physical and logical components of a data center as objects be manipulated through rest.\n\nThis means you should be starting your discovery with inventory objects not random reachable network endpoints just because they are reachable.\n\nIf you are trying to attest other BMCs they should start as managers and have network interfaces.  get the IP from that object.  you can decide how my much of the network switches cables and ports and switches you model before establishing the spdm session.\n\nYou don\u0027t want to identify them by MAC.  you want to ask them for their MAC address.  that\u0027s the point of IP.",
      "parentUuid": "32a97727_8db25bf3",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 171,
        "endChar": 74
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00bfaae6_6ea68256",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-03-10T13:12:48Z",
      "side": 1,
      "message": "Yeah, I understand your design point and that makes sense.\n\nI have made changes in my latest patchset to look at entity-manager - satellite controller interface (https://github.com/openbmc/entity-manager/blob/master/schemas/satellite_controller.json) rather than phosphor-networkd neighbor interface. That way SPDM does not have to bother if the remote IP provided is a neighbor or not. As long as it is pingable over the network, we should be able to run SPDM protocol to get the measurement \u0026 certificate data from it.",
      "parentUuid": "c8f78723_949fb11c",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 171,
        "endChar": 74
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efbeacf1_df0c0983",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-03-04T19:57:39Z",
      "side": 1,
      "message": "I\u0027m missing the context for this change (the whole section).  Is this a new feature?  Is it missing documentation that already existed?  It isn\u0027t clear to me.\n\nWhat does this have to do with SPDM?  Why are we putting it in the SPDM daemon rather than one specific for the local TPM?  It seems strange to me that we have a proposed SPDM daemon (which is its own protocol) and then we bolt on the side this \"oh, and it will do its own TPM too\".",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 78
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1bf2591_4a9b226f",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-03-05T14:55:52Z",
      "side": 1,
      "message": "\u003e I\u0027m missing the context for this change (the whole section).  Is this a new feature?  Is it missing documentation that already existed?  It isn\u0027t clear to me.\n\u003e \n\u003e What does this have to do with SPDM?  Why are we putting it in the SPDM daemon rather than one specific for the local TPM?  It seems strange to me that we have a proposed SPDM daemon (which is its own protocol) and then we bolt on the side this \"oh, and it will do its own TPM too\".\n\n\nThe design that we have as of today - is that SPDM daemon only works as a requester, it requests other MCTP endpoints for measurements \u0026 certificates and hosts them on dbus for external entities to do the attestation. The measurements are coming out a RoT device like TPM on the remote devices. \n\nBut what the current design lacks is that it does not consider that a BMC is also a device in itself \u0026 it has its own measurements too, which is what I tried to cover in this section. I don\u0027t have any objection if we want to move that logic to another app that just handles all the talking to local TPM and host things on dbus \u0026 spdm app getting those measurements via dbus. But i don\u0027t think any other apps in openbmc as of today are interested in that data, hence incorporated that in spdm daemon itself.\n\nI did mention it earlier in this review that, My goal is to enhance the SPDM daemon so that the BMC can perform attestation independently (something like a BMC attesting another BMC over TCP). I plan to document the design for SPDM to function as both a requester and responder separately, as this document specifically focuses on Redfish.",
      "parentUuid": "efbeacf1_df0c0983",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 78
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfa38c65_cf741c32",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-03-06T09:11:24Z",
      "side": 1,
      "message": "so you are talking about how to implement Attestation.MeasurementSet as a responder?\n\nreading below you skipped certificate handling.\n\ndoes/should the BMC require trust in others for it\u0027s own integrity?  \n\nshould this be a separate design?  not sure but seems to need additional focus.",
      "parentUuid": "a1bf2591_4a9b226f",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 78
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eae99fc5_2563591d",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-03-06T14:04:33Z",
      "side": 1,
      "message": "Who is the verifier in this scenario? Typically, the BMC serves as the verifier, collecting measurements from devices and validating them.\n\nIn the use case you described, where is the verifier located? How does the BMC interact with the TPM, and which protocol is used for this communication?\n\nI am trying to understand where SPDM communication fits into your use case. The only scenario I see is if the BMC supports another mechanism or if the RF SPDM transcript is shared.\n\nAdditionally, I haven’t thoroghly reviewed the SPDM over TCP specification but looks like you want to support SPDM over 4194 if BMC acts as SPDM Reponder.",
      "parentUuid": "dfa38c65_cf741c32",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 78
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb519b7d_8e4ff954",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-03-10T13:12:48Z",
      "side": 1,
      "message": "\u003e so you are talking about how to implement Attestation.MeasurementSet as a responder?\n\nYes, that\u0027s correct.\n\n\u003ereading below you skipped certificate handling.\n\nResponded below.\n\n\u003e does/should the BMC require trust in others for it\u0027s own integrity?\n\nIts not for its own integrity - it requires trust on others for platform integrity.  \n\n\n\u003e Who is the verifier in this scenario? Typically, the BMC serves as the verifier, collecting measurements from devices and validating them.\n\u003e \nIn our use-case BMC is the verifier. But, In the context of security - we should not be designing something for \"a typical verifier, right\" ? Because any device can do attestation for any other device - `that it needs to trust`. Who acts as a verifier completely depends on \"which device wants to trust which device\".\n\nIt can be a HMC verifying an adapter plugging into a motherboard (or) a HMC verifying the measurements of a BMC (or) a BMC verifying the measurements of another BMC.\n\n\u003e In the use case you described, where is the verifier located? How does the BMC interact with the TPM, and which protocol is used for this communication?\n\u003e \n\nBMC talks to TPM using the tpm2-tss library. The TPM Software Stack (TSS) is a software specification that provides a standard API for accessing the functions of the TPM.\nMore details on the specification: https://trustedcomputinggroup.org/wp-content/uploads/TSS_Version_1.2_Level_1_FINAL.pdf\nMore details on the library : https://github.com/tpm2-software/tpm2-tss?tab\u003dreadme-ov-file#overview\n\n\u003e I am trying to understand where SPDM communication fits into your use case. The only scenario I see is if the BMC supports another mechanism or if the RF SPDM transcript is shared.\n\u003e \n\u003e Additionally, I haven’t thoroghly reviewed the SPDM over TCP specification but looks like you want to support SPDM over 4194 if BMC acts as SPDM Reponder.\n\nYes , we plan to use SPDM over TCP to attest another BMC over 4194 as stated in the spec.",
      "parentUuid": "eae99fc5_2563591d",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 78
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "024863d1_70a9fdd3",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-03-12T07:39:11Z",
      "side": 1,
      "message": "\u003eIn our use-case BMC is the verifier. But, In the context of security - we should not be designing something for \"a typical verifier, right\" ? Because any device can do attestation for any other device - that it needs to trust. Who acts as a verifier completely depends on \"which device wants to trust which device\".\n\nIt can be a HMC verifying an adapter plugging into a motherboard (or) a HMC verifying the measurements of a BMC (or) a BMC verifying the measurements of another BMC.\n\nManoj, my ask is: which device acts as the PA-ROT/Verifier responsible for attesting all other devices? Typically, a platform should have a single PA-ROT.\n\nIn your use case, which MC (BMC/HMC) is exposed for management? Are all satellite management controllers and the BMC accessible externally via IP? Or is only the BMC exposed externally while the satellite management controllers communicate with the BMC over a private network?\n\nIf it\u0027s the latter, then the BMC collects measurement data over SPDM/TCP and verifies it. In this case, the BMC would act as the SPDM requester, while all other devices and satellite management controllers would function as SPDM responders. Is that correct?",
      "parentUuid": "cb519b7d_8e4ff954",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 78
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f073f206_4ada17a2",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-03-12T09:02:21Z",
      "side": 1,
      "message": "Yes ratan, in our usecase - we have two BMC\u0027s in the system. Where one BMC can attest another BMC over SPDM over TCP. (you can assume one BMC as a requester and another BMC would be acting as responder - and both acts as satellites for each other)\n\nmore information on our redundant bmc design : https://gerrit.openbmc.org/c/openbmc/docs/+/70233",
      "parentUuid": "024863d1_70a9fdd3",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 78
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8710f3ed_f699d3f3",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-03-12T13:20:50Z",
      "side": 1,
      "message": "Thanks for sharing the design!\n\nSo, there are two BMCs—one active and one passive.\n\nHMC (IBM-Hardware Management Console) → Active BMC:\n\nHow does the HMC obtain attestation data from the active BMC? Is it via SPDM over TCP or Redfish?\n\nActive BMC → Passive BMC:\nYou confirmed that this communication happens over SPDM via TCP.\n\nSince both BMCs have network connectivity to the HMC, I have a few questions:\n\nCan the HMC directly retrieve attestation data from either the active or passive BMC? \n\nOr is it solely the responsibility of the active BMC to provide attestation data for the passive BMC?\n\nUltimately, I want to understand where the D-Bus interface is required in your use case. If both BMCs are accessible from the HMC, wouldn\u0027t it be possible for the HMC to run the SPDM client and directly fetch the data from both the BMC?\n\nor is HMC ---\u003e RF API ---\u003eActive BMC ----\u003e(SPDM over TCP)PassiveBMC?",
      "parentUuid": "f073f206_4ada17a2",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 78
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40efee99_682b8480",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-03-12T14:34:07Z",
      "side": 1,
      "message": "\u003e Thanks for sharing the design!\n\u003e \n\u003e So, there are two BMCs—one active and one passive.\n\u003e \n\u003e HMC (IBM-Hardware Management Console) → Active BMC:\n\u003e \n\u003e How does the HMC obtain attestation data from the active BMC? Is it via SPDM over TCP or Redfish?\n\u003e \n\u003e Active BMC → Passive BMC:\n\u003e You confirmed that this communication happens over SPDM via TCP.\n\u003e \n\u003e Since both BMCs have network connectivity to the HMC, I have a few questions:\n\u003e \n\u003e Can the HMC directly retrieve attestation data from either the active or passive BMC? \n\u003e \nYes it could via redfish. But the requirement for us is *not* HMC attesting BMC\u0027s. Its BMC attesting another BMC.\n\n\u003e Or is it solely the responsibility of the active BMC to provide attestation data for the passive BMC?\n\u003e \nYes, We want the BMC to establish trust on another BMC.\n\n\u003e Ultimately, I want to understand where the D-Bus interface is required in your use case. If both BMCs are accessible from the HMC, wouldn\u0027t it be possible for the HMC to run the SPDM client and directly fetch the data from both the BMC?\n\u003e \n\u003e or is HMC ---\u003e RF API ---\u003eActive BMC ----\u003e(SPDM over TCP)PassiveBMC?\n\nWe are talking two separate things, ratan. \"HMC trusting BMC\u0027s\" is a different thing than \"BMC trusting another BMC\". They both can ideally coexist.\n\nAlthough HMC can do attestation that will be needed if HMC wants to establish trust with the BMC\u0027s , but that\u0027s not what we want, On our platforms at the moment it\u0027s the BMC that needs to establish trust with another BMC. So HMC is out of the picture.",
      "parentUuid": "8710f3ed_f699d3f3",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 78
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ca77f7e_026b0437",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-03-14T14:48:43Z",
      "side": 1,
      "message": "\u003eYes it could via redfish. But the requirement for us is not HMC attesting BMC\u0027s. Its BMC attesting another BMC\n\nOk, in that case BMC is attesting to other BMC over SPDM over TCP.\n\nIn your use case, you don\u0027t need RF support, Was confused with the diagram which you added where you had shown the redfish interaction. I thought that this was your use case.",
      "parentUuid": "40efee99_682b8480",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 78
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab8b3db6_75cfa08f",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 278,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-03-06T09:11:24Z",
      "side": 1,
      "message": "this doesn\u0027t apply to the cert for the BMC itself.  need to adjust.",
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ab6e04a_b4de55eb",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 278,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-03-10T13:12:48Z",
      "side": 1,
      "message": "No, The certificates are that are provisioned in to the BMC connected TPM and the ones that SPDM uses are not https server/client certificates. They are the device certificates \u0026 the existing design does not have to change. SPDM daemon would talk to the TPM to get the certificates \u0026 measurements via tpm2-tss and send that over SPDM protocol to the remote entity.",
      "parentUuid": "ab8b3db6_75cfa08f",
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f777ff68_96680b27",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 330,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-03-06T09:11:24Z",
      "side": 1,
      "message": "do you plan to code PCIe DOE? missing TCP.",
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57898b8c_ee096e24",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 330,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-03-10T13:12:48Z",
      "side": 1,
      "message": "I plan to write infrastructure in such a way that the framework would scale up for mctp , pcie and TCP. But I plan on implementing the TCP backend.",
      "parentUuid": "f777ff68_96680b27",
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}