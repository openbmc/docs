{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4c1a180b_2ca96ebc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-02-26T07:42:09Z",
      "side": 1,
      "message": "@zhichuang - Thanks for the review. Asking it here since I have not got a response on the mailing list. I have sent out a note for you here:  https://lore.kernel.org/openbmc/e674332a-6956-4184-b077-39a0cc0e624d@gmail.com/T/#u\n\nIt\u0027s quite a while since the original design document was merged - but till now there is no code-drop. Do you still have plans to work on the spdm code ? Can you please take a look at my email and reply back ?",
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e6a3157_d64a4a72",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-03-06T08:37:25Z",
      "side": 1,
      "message": "No\n\nspdm over TCP is about communication with an arbitrary remote anywhere on the network.   I didn\u0027t see any mention of physical adjacency.\n\nthe Neighbor interface referenced is about exposing the ARP table translating and IP address to the next hop (router or local subnet) Ethernet (or maybe other technologies) MAC address.   this is evident from both the interface for the entry and the possible states enumerated.\n\nedit: you recognized it as the ARP table but not the implications below.",
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85c51fbc_f19a55db",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-03-04T19:57:39Z",
      "side": 1,
      "message": "This isn\u0027t clear to me how this works.  Do we have documents from phosphor-network already?\n\nI don\u0027t think we should be doing SPDM-over-TCP generically over any network interface.  You likely want this constrained to internal USB-network connections, correct?  (Or at least I think most people would).  I suspect we need some explicit configuration here.\n\nIf you are going to allow generic SPDM-over-TCP, without a known hardware connection, how do you ensure there is no man-in-the-middle and/or emulation of SPDM?  Having the ability to be tricked by some raspberrypi sitting on your network seems undesirable.",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 171,
        "endChar": 74
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db351a65_fd2a7302",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-03-05T14:55:52Z",
      "side": 1,
      "message": "\u003e This isn\u0027t clear to me how this works.  Do we have documents from phosphor-network already?\n\nI don\u0027t think we have any documentation as such apart from the dbus interfaces \u0026 code , a bit more information about this interface can be found at\nhttps://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/16427\nhttps://github.com/openbmc/phosphor-networkd/blob/master/src/rtnetlink_server.cpp#L73\n\nphosphor-networkd has all the infrastructure to host neighbor information. It uses rtnetlink messages RTM_NEWNEIGH to discover neighbor table entries (i.e the ARP entry).\n\n\u003e \n\u003e I don\u0027t think we should be doing SPDM-over-TCP generically over any network interface.  You likely want this constrained to internal USB-network connections, correct?  (Or at least I think most people would).  I suspect we need some explicit configuration here.\n\u003e \n\nYes that\u0027s right, we don\u0027t plan on running it on any arbitrary ethernet interface. We plan on using an internal ethernet interface which is not exposed to the outside world. But that configuration need not be present in spdm daemon itself right? The neighbor interface can be selectively added for a specific interface of interest by phosphor-networkd (or) someone can use CreateStatic interface https://github.com/openbmc/phosphor-networkd/blob/master/yaml/xyz/openbmc_project/Network/Neighbor/CreateStatic.interface.yaml to configure the neighbor on a desired network interface.\n\n\n\u003e If you are going to allow generic SPDM-over-TCP, without a known hardware connection, how do you ensure there is no man-in-the-middle and/or emulation of SPDM?  Having the ability to be tricked by some raspberrypi sitting on your network seems undesirable.\n\nYes, I agree with you that we should not be running SPDM on unknown hardware in general. But even if we run, the protocol itself has all the safety incorporated in its design. SPDM is a protocol that allows devices to establish trust by validating the measurements \u0026 certificate related information that w passed. Even if someone could emulate SPDM packets, the attestation would fail because the certificates presented by Raspberry Pi fails the verification against a known CA.",
      "parentUuid": "85c51fbc_f19a55db",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 171,
        "endChar": 74
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32a97727_8db25bf3",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-03-06T08:37:25Z",
      "side": 1,
      "message": "\u003e RTM_NEWNEIGH to discover neighbor table entries (i.e the ARP entry).\n\nthe ARP table is not a generic IP address registry.\n\nARP is used to identify the physical address of the next hop in the IP network layer.   it\u0027s about translating router IP address to the local media address.\n\nDPZdM over TCP is not restricted to physically adjacent endpoints in the local subnet.\n\nFind another place to discover your endpoints.   maybe it\u0027s a DNS.  or a hostname file.  Even a or a DHCP server would be preferred.\n\nbut not the kernel ARP table.  registering we to static entries will have other negative side effects in addition to limiting the spdm partners.",
      "parentUuid": "db351a65_fd2a7302",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 171,
        "endChar": 74
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8f78723_949fb11c",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-03-06T09:11:24Z",
      "side": 1,
      "message": "Actually back up.   The redfish model is about representing physical and logical components of a data center as objects be manipulated through rest.\n\nThis means you should be starting your discovery with inventory objects not random reachable network endpoints just because they are reachable.\n\nIf you are trying to attest other BMCs they should start as managers and have network interfaces.  get the IP from that object.  you can decide how my much of the network switches cables and ports and switches you model before establishing the spdm session.\n\nYou don\u0027t want to identify them by MAC.  you want to ask them for their MAC address.  that\u0027s the point of IP.",
      "parentUuid": "32a97727_8db25bf3",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 171,
        "endChar": 74
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efbeacf1_df0c0983",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-03-04T19:57:39Z",
      "side": 1,
      "message": "I\u0027m missing the context for this change (the whole section).  Is this a new feature?  Is it missing documentation that already existed?  It isn\u0027t clear to me.\n\nWhat does this have to do with SPDM?  Why are we putting it in the SPDM daemon rather than one specific for the local TPM?  It seems strange to me that we have a proposed SPDM daemon (which is its own protocol) and then we bolt on the side this \"oh, and it will do its own TPM too\".",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 78
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1bf2591_4a9b226f",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-03-05T14:55:52Z",
      "side": 1,
      "message": "\u003e I\u0027m missing the context for this change (the whole section).  Is this a new feature?  Is it missing documentation that already existed?  It isn\u0027t clear to me.\n\u003e \n\u003e What does this have to do with SPDM?  Why are we putting it in the SPDM daemon rather than one specific for the local TPM?  It seems strange to me that we have a proposed SPDM daemon (which is its own protocol) and then we bolt on the side this \"oh, and it will do its own TPM too\".\n\n\nThe design that we have as of today - is that SPDM daemon only works as a requester, it requests other MCTP endpoints for measurements \u0026 certificates and hosts them on dbus for external entities to do the attestation. The measurements are coming out a RoT device like TPM on the remote devices. \n\nBut what the current design lacks is that it does not consider that a BMC is also a device in itself \u0026 it has its own measurements too, which is what I tried to cover in this section. I don\u0027t have any objection if we want to move that logic to another app that just handles all the talking to local TPM and host things on dbus \u0026 spdm app getting those measurements via dbus. But i don\u0027t think any other apps in openbmc as of today are interested in that data, hence incorporated that in spdm daemon itself.\n\nI did mention it earlier in this review that, My goal is to enhance the SPDM daemon so that the BMC can perform attestation independently (something like a BMC attesting another BMC over TCP). I plan to document the design for SPDM to function as both a requester and responder separately, as this document specifically focuses on Redfish.",
      "parentUuid": "efbeacf1_df0c0983",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 78
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfa38c65_cf741c32",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-03-06T09:11:24Z",
      "side": 1,
      "message": "so you are talking about how to implement Attestation.MeasurementSet as a responder?\n\nreading below you skipped certificate handling.\n\ndoes/should the BMC require trust in others for it\u0027s own integrity?  \n\nshould this be a separate design?  not sure but seems to need additional focus.",
      "parentUuid": "a1bf2591_4a9b226f",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 250,
        "endChar": 78
      },
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab8b3db6_75cfa08f",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 278,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-03-06T09:11:24Z",
      "side": 1,
      "message": "this doesn\u0027t apply to the cert for the BMC itself.  need to adjust.",
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f777ff68_96680b27",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 3
      },
      "lineNbr": 330,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-03-06T09:11:24Z",
      "side": 1,
      "message": "do you plan to code PCIe DOE? missing TCP.",
      "revId": "3ed77852a247b178d2eede5ed7494b3203d632db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}