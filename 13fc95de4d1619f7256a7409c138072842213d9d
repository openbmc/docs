{
  "comments": [
    {
      "key": {
        "uuid": "8bcc96c9_6738021a",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2019-11-18T05:32:00Z",
      "side": 1,
      "message": "You\u0027re the expert, lets settle on the language. We\u0027ve been calling it Secure and Trusted Boot so far, would you prefer Verified and Trusted boot?",
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83022afc_ed70b178",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1000452
      },
      "writtenOn": "2019-12-09T17:20:11Z",
      "side": 1,
      "message": "We usually use the term secure boot however U-boot uses verified boot that is why I had both.  My preference would be Secure and Trusted Boot",
      "parentUuid": "8bcc96c9_6738021a",
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdcc7609_e669bee6",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2019-11-18T05:32:00Z",
      "side": 1,
      "message": "You can be the assignee. I can be a coauthor. My IRC nick is shenki.",
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3498b152_d6fcdb62",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1000561
      },
      "writtenOn": "2019-12-06T20:23:00Z",
      "side": 1,
      "message": "Is this BMC dedicated TPM?",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 40
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42dda376_a19200e9",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1000452
      },
      "writtenOn": "2019-12-09T17:20:11Z",
      "side": 1,
      "message": "Yes the BMC will have it\u0027s own dedicated TPM which is not tied to the host TPM",
      "parentUuid": "3498b152_d6fcdb62",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 40
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cb6d4a5_c2b7b63e",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1000561
      },
      "writtenOn": "2019-12-09T20:18:24Z",
      "side": 1,
      "message": "Two TPM chips on the single board may not work for everyone. Should we think about possibility of using the host TPM for both BMC and CPU/SoC?",
      "parentUuid": "42dda376_a19200e9",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 40
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "872a9b25_8d50ef47",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2019-12-04T23:08:19Z",
      "side": 1,
      "message": "This opens up a potential TOCTOU-like situation - usually you\u0027d want your previous boot stage to measure the next one, to make sure this \"self-reporting\" isn\u0027t prone to manipulation (e.g. there may be a bug in the U-Boot, that would allow an attacker to take control over loaded code and then make it report whatever the \"right\" value is). That would require ROM support however.",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 61
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96883116_9d578fb5",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1000561
      },
      "writtenOn": "2019-12-06T20:23:00Z",
      "side": 1,
      "message": "At this boot stage, it can be a valid approach. The U-Boot SPL is loaded by the ROM firmware which is intended to be as small as possible. Any bugs in the ROM firmware may lead to re-spin the actual silicon and it\u0027s quite expensive. Adding the TPM driver to the ROM firmware is possible but may not be desirable. It is also possible that the ROM firmware measures the U-Boot SPL image and passes the measurement to the U-Boot SPL but the U-Boot SPL code still can manipulate with it. I guess we can trust U-Boot SPL as it\u0027s been already verified by ROM firmware.",
      "parentUuid": "872a9b25_8d50ef47",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 61
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ce1ff42_3fab5c72",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2019-12-09T11:35:01Z",
      "side": 1,
      "message": "\u003e \u003c...\u003e I guess we can trust U-Boot SPL as it\u0027s been already verified by ROM firmware.\n\nWell, ideally we shouldn\u0027t, as there may be ways to compromise it (if there are bugs as I mentioned in my previous comment). But I agree the ROM limitations may prevent this from happening. Do we have any communicaton or IO interfaces (except naturally flash) that SPL opens up or services? If there\u0027s no option of ROM measurements, we could limit those to the bare minimum and harden those that left, to have better assurance.\n\nAnd yes, I agree passing the value measured by ROM is no better than just self-measurement, so not worth it. Unless we devise some scheme with keyed MAC, for which only ROM and the measurement consumer would have the key, but that would rather be unrealistically complex.",
      "parentUuid": "96883116_9d578fb5",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 61
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47358b45_1c83f53f",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1000452
      },
      "writtenOn": "2019-12-09T17:20:11Z",
      "side": 1,
      "message": "Ideally we would go with the path of having the ROM measure the SPL into the TPM as mentioned above.  The current AST2600 ROM doesn\u0027t support that but it is definitely something we would like to investigate in the future.  My feeling is that this current design does have limitation from a security standpoint if there was a way to compromise the self-measurement but if there are less severe vulnerabilities to the SPL (which has been validated by the ROM) for example a compromise to the verification of U-Boot but no ability to compromise the self-measurement you would be able to detect you are running this vulnerable level of SPL.",
      "parentUuid": "6ce1ff42_3fab5c72",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 61
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b695f770_9a09bc63",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2019-12-04T23:08:19Z",
      "side": 1,
      "message": "I\u0027m not 100% sure, but I think 2600 may not have the SPL-level Verified Boot enabled, have you by chance checked that?\n\nI\u0027d also suggest to explicitly mention that the use of \"signed configuration\" (as opposed to \"signed image\") way of configuring the Verified Boot is to be used, to prevent image swapping attacks.",
      "range": {
        "startLine": 81,
        "startChar": 2,
        "endLine": 82,
        "endChar": 31
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34b619b5_816b477d",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2019-12-04T23:08:19Z",
      "side": 1,
      "message": "Probably a Device Tree binary could be added here as well?",
      "range": {
        "startLine": 84,
        "startChar": 26,
        "endLine": 84,
        "endChar": 39
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e28220fa_72e9601b",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1000452
      },
      "writtenOn": "2019-12-09T17:20:11Z",
      "side": 1,
      "message": "I\u0027m not familiar with all the components that make up a full OpenBMC image.  I\u0027m assuming by this statement that the dev tree is static and not built up via U-boot ?",
      "parentUuid": "34b619b5_816b477d",
      "range": {
        "startLine": 84,
        "startChar": 26,
        "endLine": 84,
        "endChar": 39
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fa528f6_ce8daca1",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1000561
      },
      "writtenOn": "2019-12-06T20:23:00Z",
      "side": 1,
      "message": "Will the BMC platform chain of trust be based on public key stored in OTP and public key(s) in EEProm will be signed by the private part of the OTP public key?",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 94,
        "endChar": 74
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78e2db68_7b1bcaae",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1000452
      },
      "writtenOn": "2019-12-09T17:20:11Z",
      "side": 1,
      "message": "That wasn\u0027t part of the design but is a very interesting idea.  With the current design there is a break in the key chain here.  A compromised EEProm key can only be detected through attestation of the TPM.  One issue with your idea is the fact that in our development flows we always have to main sets of keys (production and development).  The AST2600 allows for production and development (low security) keys but since the keys are in OTP memory they can\u0027t be changed.  At some point during our development process we will have to disable the development key in OTP memory at which point we can only use production signed SPL images.  However this point is way too soon in our development cycle such that we can\u0027t run the entire U-Boot/Linux stack with production keys.  My plan is that we will start running with production signed SPL with the remainder of the stack development signed.  So the BMC will have only production keys enabled in OTP and then development keys in the EEProm.  So to enable that with your idea of signed keys in EEPRom I would have to sign the well known development keys with the production OTP key.  As soon as that happens you essentially break the chain as anyone could put these keys into EEProm and flash development signed U-boot.  Which takes you back to verification of the keys through attestation.",
      "parentUuid": "5fa528f6_ce8daca1",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 94,
        "endChar": 74
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "185997d6_2f46b2be",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1000561
      },
      "writtenOn": "2019-12-09T20:18:24Z",
      "side": 1,
      "message": "If you still have control on the U-Boot SPL code during the late development stage, you may have a SPL development mode that bypasses the signature check error for EEProm development public keys (and may warn you about bad key signatures) but this bypass will be removed from the SPL code for the production build. In this case you need to properly sign EEProm production public keys only.",
      "parentUuid": "78e2db68_7b1bcaae",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 94,
        "endChar": 74
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3712171_d7746a2f",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2019-12-04T23:08:19Z",
      "side": 1,
      "message": "If implemented literally, this would lead to TOCTOU-like situation with the jumper measurement time vs the \"use value for the decision\" time and the attacker could try to use that to force the GPIO value just at the right time to disable Verified boot without admin\u0027s knowledge. I\u0027d suggest to spell this out in more detail (decision time vs TPM extension time) to avoid this.",
      "range": {
        "startLine": 97,
        "startChar": 4,
        "endLine": 97,
        "endChar": 77
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "189b8697_e1902964",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 1000561
      },
      "writtenOn": "2019-12-09T20:18:24Z",
      "side": 1,
      "message": "What will happen if verification fails at any of the boot steps above?",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 99,
        "endChar": 12
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05a2c95d_9ca5a985",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1000235
      },
      "writtenOn": "2019-11-07T16:43:16Z",
      "side": 1,
      "message": "It seems like the design should have workflows for how to provision and configure the BMC.  Something like:\n1. Create key pair.\n2. Burn public key into the BMC OTP memory.  (Using what tools?)\n3. Set secure jumper.\n4. Sign firmware image with private key.\n5. Load signed firmware.\n6. Reboot the BMC.",
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c235092_bfe18f56",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2019-11-18T05:32:00Z",
      "side": 1,
      "message": "I think the design document captures the software that will be involved, and how it works to provide secure boot.\n\nWhat you\u0027re describing is a way to provision the machine in manufacturing, which is useful, but it is not part of this design document.",
      "parentUuid": "05a2c95d_9ca5a985",
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcedf4a7_b9afced6",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2019-12-04T23:08:19Z",
      "side": 1,
      "message": "There could be some external, platform-level RoT entity securing the BMC FW, like Google\u0027s Titan, Apple\u0027s T2, Microsoft\u0027s Cerberus or Intel\u0027s PFR, to name a few. I think it would be too much to describe the interaction with such entities in this document (I think it should focus on using AST2600+U-Boot\u0027s Verified Boot as it is right now), but I think it\u0027s worth mentioning as an alternative.",
      "range": {
        "startLine": 105,
        "startChar": 0,
        "endLine": 105,
        "endChar": 4
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "119eb0a0_6552417a",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1000452
      },
      "writtenOn": "2019-12-09T17:20:11Z",
      "side": 1,
      "message": "Added a snippet on Google Titan which we have looked at for various use cases.",
      "parentUuid": "dcedf4a7_b9afced6",
      "range": {
        "startLine": 105,
        "startChar": 0,
        "endLine": 105,
        "endChar": 4
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "715c1a0b_089e6a78",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2019-12-04T23:08:19Z",
      "side": 1,
      "message": "I think this needs some elaboration in this design document as it\u0027s currently unclear how those development and production keys would co-exist (if that\u0027s what is being suggested here) and what logic will be used to boot using dev vs. prod.",
      "range": {
        "startLine": 112,
        "startChar": 2,
        "endLine": 115,
        "endChar": 23
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80daaedc_02533bf5",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2019-12-04T23:08:19Z",
      "side": 1,
      "message": "I\u0027d suggest to add a \"swapped image\" attack test (if you agree with adding the \"signed configuration\" as the recommended way to configure U-Boot), where a properly signed, but different than the one listed in the FIT config, image is used.",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 120,
        "endChar": 15
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6c51834_e2088ce3",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2019-12-04T23:08:19Z",
      "side": 1,
      "message": "Is this an existing feature? I don\u0027t think U-Boot\u0027s Verified Boot has anything like that, does it?",
      "range": {
        "startLine": 123,
        "startChar": 32,
        "endLine": 123,
        "endChar": 66
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7faa2495_22a4433e",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2019-12-04T23:08:19Z",
      "side": 1,
      "message": "I\u0027d suggest to add:\n\n\u003e \"and values extended to the TPM registers must be different from the normal secure boot with this jumper set to \u0027enable security\u0027\"\n\nto make sure this is tested and the admin can distinguish those situations and act accordingly.",
      "range": {
        "startLine": 124,
        "startChar": 52,
        "endLine": 124,
        "endChar": 78
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "838fca1e_43a4311b",
        "filename": "security/OpenBMCSecureBoot.md",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 1000443
      },
      "writtenOn": "2019-12-04T23:08:19Z",
      "side": 1,
      "message": "\"Kernel/initrd (initramfs)/Device Tree\" would be more explicit, to make sure all three main components are tested.",
      "range": {
        "startLine": 125,
        "startChar": 10,
        "endLine": 125,
        "endChar": 16
      },
      "revId": "13fc95de4d1619f7256a7409c138072842213d9d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}