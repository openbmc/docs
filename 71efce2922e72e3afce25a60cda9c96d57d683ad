{
  "comments": [
    {
      "key": {
        "uuid": "45f6c9ba_f63e3a38",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T18:26:07Z",
      "side": 1,
      "message": "I would prefer we refrain from doing dbus things in this example.  Can we just make it a “hello world”.\n\n* We already have examples on how to make a dbus application in the sdbus repository.\n* I don’t particularly want to encourage manually creating dbus interfaces, as shown here.  (I know we have some differences of opinion on asio, etc. and I’m working on resolving some of that with co-routines support).",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f68782b3_eabd0d11",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T18:58:45Z",
      "side": 1,
      "message": "\u003e I would prefer we refrain from doing dbus things in this example.  Can we just make it a “hello world”.\n\u003e \n\u003e * We already have examples on how to make a dbus application in the sdbus repository.\n\nIf I moved the existing code here, would that help?  (thinking out loud for a second).\n\nI really want this to be a \"here\u0027s all the boilerplate you need to create a well behaving openbmc app\".  Part of being well behaved involves connecting to dbus, and writing unit tests for dbus methods, so I want to provide good examples of doing that, even if we have multiple ways to do it.\n\nThe existing examples are pretty complex, and are really good reference for \"here\u0027s every way you could want to do this\".  IMO, this wants something different, \"here\u0027s the boilerplate you need to do the basics\".\n\n\u003e * I don’t particularly want to encourage manually creating dbus interfaces, as shown here.  (I know we have some differences of opinion on asio, etc. and I’m working on resolving some of that with co-routines support).\n\nDon\u0027t we already support asio coroutines?  I swear that support was already in the asio bindings, and you could register methods that accept a yield_context if you wanted the coroutine version.  I\u0027m not against it if you want to move to c++20 style coroutines, but we probably need to have a path forward for those already using them, although that\u0027s a discussion for a different patchset.\n\n\n\nBack to the issue at hand, I\u0027m not sure how to reconcile what you\u0027ve asked with the goals here.  The goal is to provide the current \"state of the art\", and doesn\u0027t need to cross reference 8 different examples to do what it needs for a basic, no frills dbus interface, with unit tests.\n\nWhat if this contained two examples?  An asio one, and a phosphor-dbus-interfaces one, that way, at least we could have something, then as we converge on a single solution, the two examples simply turn into one that meets both needs.  In the meantime, we\u0027d at least be pointing out that there are multiple ways to do these things, and that there are pros and cons to each.\n\nWould a path like that alleviate your concerns?",
      "parentUuid": "45f6c9ba_f63e3a38",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7fae836_c60ef4a0",
        "filename": "template_app/.gitignore",
        "patchSetId": 1
      },
      "lineNbr": 3,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T18:26:07Z",
      "side": 1,
      "message": "Why ‘windows’, ‘linux’, ‘osx’?\n\nIn most of our meson-based repositories we haven’t even done the ‘meson’ one.  We just do something like ‘/build*/‘ and ‘/subprojects/*/‘.\n\nI’d propose we do ‘/build*/‘ + ‘meson’ only.  The C/C++ ones aren’t needed with ‘meson’ either.",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4166dca4_cb784bed",
        "filename": "template_app/.gitignore",
        "patchSetId": 1
      },
      "lineNbr": 3,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T18:58:45Z",
      "side": 1,
      "message": "\u003e Why ‘windows’, ‘linux’, ‘osx’?\n\u003e \n\u003e In most of our meson-based repositories we haven’t even done the ‘meson’ one.  We just do something like ‘/build*/‘ and ‘/subprojects/*/‘.\n\u003e \n\u003e I’d propose we do ‘/build*/‘ + ‘meson’ only.  The C/C++ ones aren’t needed with ‘meson’ either.\n\nSure, this is just my usual default for new projects.  With that said, I\u0027m not super worried about it, I can move it to just build* and subprojects*.",
      "parentUuid": "a7fae836_c60ef4a0",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4534dd37_bce700fa",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T18:26:07Z",
      "side": 1,
      "message": "I don’t think we should put this in the template.  It is not a general optimization we’ve done.",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "266b3af2_0b80f66b",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T18:58:45Z",
      "side": 1,
      "message": "We do it in some places, and it reduces the binary size with seemingly no downsides.  Is there a reason we shouldn\u0027t do this everywhere?\n\nWith that said, I\u0027m happy to move this to another patchset and have that discussion there, no need to hold this patchset up for something like that.",
      "parentUuid": "4534dd37_bce700fa",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4aa1063_47323cdd",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T18:26:07Z",
      "side": 1,
      "message": "I’ve seen this dependency in a few meson files I’ve reviewed lately and I don’t know why.  Unless an application is doing direct systemd calls (and not using sdbusplus / sdevent) this should not be necessary.\n\nI guess it is because of the ‘systemdsystemunitdir’ below?",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2d347e5_6bfdf0ce",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T18:58:45Z",
      "side": 1,
      "message": "I didn\u0027t write the meson file I stole this boilerplate out of, but your guess seems reasonable.  I\u0027m really not sure why we made the systemd install path configurable, but maybe someone else has more context than I do.",
      "parentUuid": "e4aa1063_47323cdd",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f174f8de_fb74951e",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T18:26:07Z",
      "side": 1,
      "message": "Do we want to encourage splitting applications up into a shared library like this?  I’m not sure why we should, unless you’re thinking it is easier for testing purposes.",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a336f05d_3d1b2be5",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T18:58:45Z",
      "side": 1,
      "message": "\u003e Do we want to encourage splitting applications up into a shared library like this?\n\u003e  I’m not sure why we should, unless you’re thinking it is easier for testing purposes.\n\nYou got it write, it\u0027s because the library links against both the main method and the tests.  We could add the compile units to both the application and the unit tests, but that seems like it would be worse.",
      "parentUuid": "f174f8de_fb74951e",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c3df540_c84cb58b",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T18:26:07Z",
      "side": 1,
      "message": "tab. ;)",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1658150_d07291f5",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T18:58:45Z",
      "side": 1,
      "message": "Some day I\u0027ll learn how vim works.   Today is apparently not that day.\n\nWill fix.",
      "parentUuid": "7c3df540_c84cb58b",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea35e51f_ae3d9466",
        "filename": "template_app/src/TemplateApp.cpp",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-03-05T19:17:06Z",
      "side": 1,
      "message": "This filename disagrees with https://github.com/openbmc/docs/blob/master/cpp-style-and-conventions.md#files.\n\nMay as well update the conventions doc to match this if this is the official approach.",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "781c4b44_72ff55a7",
        "filename": "template_app/test/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T18:26:07Z",
      "side": 1,
      "message": "tab.",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71f153cb_474b01fe",
        "filename": "template_app/test/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T18:58:45Z",
      "side": 1,
      "message": "Will fix.",
      "parentUuid": "781c4b44_72ff55a7",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}