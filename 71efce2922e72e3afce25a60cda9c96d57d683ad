{
  "comments": [
    {
      "key": {
        "uuid": "45f6c9ba_f63e3a38",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T18:26:07Z",
      "side": 1,
      "message": "I would prefer we refrain from doing dbus things in this example.  Can we just make it a “hello world”.\n\n* We already have examples on how to make a dbus application in the sdbus repository.\n* I don’t particularly want to encourage manually creating dbus interfaces, as shown here.  (I know we have some differences of opinion on asio, etc. and I’m working on resolving some of that with co-routines support).",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f68782b3_eabd0d11",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T18:58:45Z",
      "side": 1,
      "message": "\u003e I would prefer we refrain from doing dbus things in this example.  Can we just make it a “hello world”.\n\u003e \n\u003e * We already have examples on how to make a dbus application in the sdbus repository.\n\nIf I moved the existing code here, would that help?  (thinking out loud for a second).\n\nI really want this to be a \"here\u0027s all the boilerplate you need to create a well behaving openbmc app\".  Part of being well behaved involves connecting to dbus, and writing unit tests for dbus methods, so I want to provide good examples of doing that, even if we have multiple ways to do it.\n\nThe existing examples are pretty complex, and are really good reference for \"here\u0027s every way you could want to do this\".  IMO, this wants something different, \"here\u0027s the boilerplate you need to do the basics\".\n\n\u003e * I don’t particularly want to encourage manually creating dbus interfaces, as shown here.  (I know we have some differences of opinion on asio, etc. and I’m working on resolving some of that with co-routines support).\n\nDon\u0027t we already support asio coroutines?  I swear that support was already in the asio bindings, and you could register methods that accept a yield_context if you wanted the coroutine version.  I\u0027m not against it if you want to move to c++20 style coroutines, but we probably need to have a path forward for those already using them, although that\u0027s a discussion for a different patchset.\n\n\n\nBack to the issue at hand, I\u0027m not sure how to reconcile what you\u0027ve asked with the goals here.  The goal is to provide the current \"state of the art\", and doesn\u0027t need to cross reference 8 different examples to do what it needs for a basic, no frills dbus interface, with unit tests.\n\nWhat if this contained two examples?  An asio one, and a phosphor-dbus-interfaces one, that way, at least we could have something, then as we converge on a single solution, the two examples simply turn into one that meets both needs.  In the meantime, we\u0027d at least be pointing out that there are multiple ways to do these things, and that there are pros and cons to each.\n\nWould a path like that alleviate your concerns?",
      "parentUuid": "45f6c9ba_f63e3a38",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c097edf3_03c43b0b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2021-03-05T19:40:40Z",
      "side": 1,
      "message": "\u003e What if this contained two examples?\nYeah, +1 to including a PDI example as well.",
      "parentUuid": "f68782b3_eabd0d11",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45dfc229_b58d723c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T19:41:10Z",
      "side": 1,
      "message": "\u003e I really want this to be a \"here\u0027s all the boilerplate you need to create a well behaving openbmc app\"\n\nOk.  I didn’t get that from the original email chain.  I thought this was going to be a “how do I set up my repository”.  I don’t have a big concern with it, but there seems to be a bit of an assumption that all new repositories are dbus servers and that isn’t necessarily the case.\n\n\u003e What if this contained two examples?  An asio one, and a phosphor-dbus-interfaces one, that way, at least we could have something, then as we converge on a single solution, the two examples simply turn into one that meets both needs.\n\nI’d be ok with that, I guess, if your intention is to create a fully formed dbus daemon.",
      "parentUuid": "f68782b3_eabd0d11",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fad411f5_0a610af4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T21:12:22Z",
      "side": 1,
      "message": "\u003e \u003e I really want this to be a \"here\u0027s all the boilerplate you need to create a well behaving openbmc app\"\n\u003e \n\u003e Ok.  I didn’t get that from the original email chain.  I thought this was going to be a “how do I set up my repository”.  I don’t have a big concern with it, but there seems to be a bit of an assumption that all new repositories are dbus servers and that isn’t necessarily the case.\n\nI think building something that\u0027s a dbus client or dbus server is the 90+% case (I haven\u0027t actually run numbers) and if you\u0027re in that last percent that don\u0027t, it\u0027s easy enough to delete that code from main when you start the repo.\n\n\u003e \n\u003e \u003e What if this contained two examples?  An asio one, and a phosphor-dbus-interfaces one, that way, at least we could have something, then as we converge on a single solution, the two examples simply turn into one that meets both needs.\n\u003e \n\u003e I’d be ok with that, I guess, if your intention is to create a fully formed dbus daemon.\n\nCan do.",
      "parentUuid": "45dfc229_b58d723c",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7fae836_c60ef4a0",
        "filename": "template_app/.gitignore",
        "patchSetId": 1
      },
      "lineNbr": 3,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T18:26:07Z",
      "side": 1,
      "message": "Why ‘windows’, ‘linux’, ‘osx’?\n\nIn most of our meson-based repositories we haven’t even done the ‘meson’ one.  We just do something like ‘/build*/‘ and ‘/subprojects/*/‘.\n\nI’d propose we do ‘/build*/‘ + ‘meson’ only.  The C/C++ ones aren’t needed with ‘meson’ either.",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4166dca4_cb784bed",
        "filename": "template_app/.gitignore",
        "patchSetId": 1
      },
      "lineNbr": 3,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T18:58:45Z",
      "side": 1,
      "message": "\u003e Why ‘windows’, ‘linux’, ‘osx’?\n\u003e \n\u003e In most of our meson-based repositories we haven’t even done the ‘meson’ one.  We just do something like ‘/build*/‘ and ‘/subprojects/*/‘.\n\u003e \n\u003e I’d propose we do ‘/build*/‘ + ‘meson’ only.  The C/C++ ones aren’t needed with ‘meson’ either.\n\nSure, this is just my usual default for new projects.  With that said, I\u0027m not super worried about it, I can move it to just build* and subprojects*.",
      "parentUuid": "a7fae836_c60ef4a0",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "341d763f_b1089254",
        "filename": "template_app/.gitignore",
        "patchSetId": 1
      },
      "lineNbr": 3,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T19:41:10Z",
      "side": 1,
      "message": "I do like pointing people to the template generator though.  Up to you on what you want to do here.  Either a hand-build build+subprojects or build+’meson’-template (which gives you subprojects) would be reasonable to me.",
      "parentUuid": "4166dca4_cb784bed",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6018efcb_928fea32",
        "filename": "template_app/.gitignore",
        "patchSetId": 1
      },
      "lineNbr": 3,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T21:12:22Z",
      "side": 1,
      "message": "Ah, I gotcha.  I can get behind the second option.",
      "parentUuid": "341d763f_b1089254",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d6eaa01_12f46b76",
        "filename": "template_app/MAINTAINERS",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2021-03-05T20:09:19Z",
      "side": 1,
      "message": "I\u0027m a big fan of https://gerrit.openbmc-project.xyz/c/openbmc/docs/+/41073/1/OWNERS and getting rid of the MAINTAINERS file",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b88df1a_4c5935b6",
        "filename": "template_app/MAINTAINERS",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T21:12:22Z",
      "side": 1,
      "message": "Yep, I am too, but for the moment, \"state of the art\" on master is MAINTAINERS files.  This patchset is about documenting what we currently do, not about what we could do.  When and if we deploy changes to delete the MAINTAINERS files, this file will be deleted at the same time.\n\nIf that patch lands ahead of this one, I will remove this file.",
      "parentUuid": "6d6eaa01_12f46b76",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58148668_d3d8fdde",
        "filename": "template_app/MAINTAINERS",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2021-03-05T19:40:40Z",
      "side": 1,
      "message": "discord?",
      "range": {
        "startLine": 17,
        "startChar": 37,
        "endLine": 17,
        "endChar": 52
      },
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3c51bc8_667a56e3",
        "filename": "template_app/MAINTAINERS",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T21:12:22Z",
      "side": 1,
      "message": "I copied this out of one of the other repos here: https://github.com/openbmc/phosphor-pid-control/blob/master/MAINTAINERS\n\nDid we change this definition without going through and making all the sub projects consistent?\n\nI can change it in this commit, but whomever proposed changing this to discord seems to have missed some spots, and I\u0027d hope would go through and open up some new reviews.",
      "parentUuid": "58148668_d3d8fdde",
      "range": {
        "startLine": 17,
        "startChar": 37,
        "endLine": 17,
        "endChar": 52
      },
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4534dd37_bce700fa",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T18:26:07Z",
      "side": 1,
      "message": "I don’t think we should put this in the template.  It is not a general optimization we’ve done.",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "266b3af2_0b80f66b",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T18:58:45Z",
      "side": 1,
      "message": "We do it in some places, and it reduces the binary size with seemingly no downsides.  Is there a reason we shouldn\u0027t do this everywhere?\n\nWith that said, I\u0027m happy to move this to another patchset and have that discussion there, no need to hold this patchset up for something like that.",
      "parentUuid": "4534dd37_bce700fa",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7695ae7f_ba1d3f19",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T19:41:10Z",
      "side": 1,
      "message": "It is less contentious to me than dropping exceptions, but both of those (widely available compiler flags) aren’t exactly supported by the standard committee.  RTTI should generally be used rarely / sparingly.  My concern is that there are places where it is the best tool to the problem and the alternative usually involves someone spinning their own reimplementation of RTTI (I had to -1 some commits recently in phosphor-virtual-sensor for exactly this reason; RTTI faked with enums).",
      "parentUuid": "266b3af2_0b80f66b",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "308b21c8_90d1d61b",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T21:12:22Z",
      "side": 1,
      "message": "\u003e It is less contentious to me than dropping exceptions, but both of those (widely available compiler flags) aren’t exactly supported by the standard committee.\n\nDo we care about committee compliance?  They\u0027re supported by GCC, and it seems unlikely we\u0027re going to switch to non-gcc compatible compilers.... ever.  If certain portions of the codebase need to compile against MSVC, that\u0027s a whole other can of worms.\n\n\u003e  RTTI should generally be used rarely / sparingly.  My concern is that there are places where it is the best tool to the problem and the alternative usually involves someone spinning their own reimplementation of RTTI (I had to -1 some commits recently in phosphor-virtual-sensor for exactly this reason; RTTI faked with enums).\n\nhmmmm.  I didn\u0027t know we had any real usages of rtti.  I would\u0027ve assumed something like that had never come up, but I really want to keep the binary size wins that come along with this for the majority of applications that don\u0027t use or need rtti.\n\nMaybe we disable it here, with a comment about \"might be used in certain instances, but is disabled here to improve binary size\" just to make clear that it isn\u0027t against the coding standard, but if you don\u0027t use it, there are benefits to completely disabling it, and it should be that way unless you have a good reason not to.",
      "parentUuid": "7695ae7f_ba1d3f19",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4aa1063_47323cdd",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T18:26:07Z",
      "side": 1,
      "message": "I’ve seen this dependency in a few meson files I’ve reviewed lately and I don’t know why.  Unless an application is doing direct systemd calls (and not using sdbusplus / sdevent) this should not be necessary.\n\nI guess it is because of the ‘systemdsystemunitdir’ below?",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2d347e5_6bfdf0ce",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T18:58:45Z",
      "side": 1,
      "message": "I didn\u0027t write the meson file I stole this boilerplate out of, but your guess seems reasonable.  I\u0027m really not sure why we made the systemd install path configurable, but maybe someone else has more context than I do.",
      "parentUuid": "e4aa1063_47323cdd",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f174f8de_fb74951e",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T18:26:07Z",
      "side": 1,
      "message": "Do we want to encourage splitting applications up into a shared library like this?  I’m not sure why we should, unless you’re thinking it is easier for testing purposes.",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a336f05d_3d1b2be5",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T18:58:45Z",
      "side": 1,
      "message": "\u003e Do we want to encourage splitting applications up into a shared library like this?\n\u003e  I’m not sure why we should, unless you’re thinking it is easier for testing purposes.\n\nYou got it write, it\u0027s because the library links against both the main method and the tests.  We could add the compile units to both the application and the unit tests, but that seems like it would be worse.",
      "parentUuid": "f174f8de_fb74951e",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1173dac_4fbc4b2e",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T19:41:10Z",
      "side": 1,
      "message": "Based on the above discussion, I’d recommend removing ‘systemd’ from here.",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54a633fc_ba6af583",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T21:12:22Z",
      "side": 1,
      "message": "Can do.",
      "parentUuid": "e1173dac_4fbc4b2e",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c3df540_c84cb58b",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T18:26:07Z",
      "side": 1,
      "message": "tab. ;)",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1658150_d07291f5",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T18:58:45Z",
      "side": 1,
      "message": "Some day I\u0027ll learn how vim works.   Today is apparently not that day.\n\nWill fix.",
      "parentUuid": "7c3df540_c84cb58b",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9659ab40_40b7fd15",
        "filename": "template_app/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T19:41:10Z",
      "side": 1,
      "message": "https://github.com/williamspatrick/dotfiles/blob/master/files/20_all/.vimrc#L17\n\nI have shortcuts that switch from “normal indentation mode” and “kernel mode” as well that switch from 4\u0026spaces to 8\u0026tabs (See \u003cLeader\u003ekm).",
      "parentUuid": "e1658150_d07291f5",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea35e51f_ae3d9466",
        "filename": "template_app/src/TemplateApp.cpp",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-03-05T19:17:06Z",
      "side": 1,
      "message": "This filename disagrees with https://github.com/openbmc/docs/blob/master/cpp-style-and-conventions.md#files.\n\nMay as well update the conventions doc to match this if this is the official approach.",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58f185b8_50968806",
        "filename": "template_app/src/TemplateApp.cpp",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T19:41:10Z",
      "side": 1,
      "message": "I missed this; thanks Matt.  I prefer we just follow the conventions.",
      "parentUuid": "ea35e51f_ae3d9466",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b09c6522_00b76aef",
        "filename": "template_app/src/TemplateApp.cpp",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-09T20:36:04Z",
      "side": 1,
      "message": "Fair point.  I\u0027m not sure what I was smoking when I did this, but you\u0027re right, it\u0027s wrong.",
      "parentUuid": "58f185b8_50968806",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5626047_29ca9f9c",
        "filename": "template_app/test/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2021-03-05T19:40:40Z",
      "side": 1,
      "message": "This will prevent code coverage due to https://github.com/mesonbuild/meson/issues/6747. I\u0027ve tended to do the workaround and define the tests in the main directory to get the coverage reports. Putting a workaround into a best practices example isn\u0027t all that desired either. Maybe just a note on it in a comment?",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c5e42e9_87c567ff",
        "filename": "template_app/test/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T19:47:07Z",
      "side": 1,
      "message": "It would be good if we could get someone that understands the problem to poke on this issue upstream again.  The single piece of discussion seemed like someone was confused on the request about lcov vs gcov or something, but that isn’t the problem you’re reporting.\n\nI would prefer we do not do this workaround because it makes the meson-files longer and noisier.  Ideally someone would figure out what is broken and fix it.",
      "parentUuid": "c5626047_29ca9f9c",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f4ee45f_e945f717",
        "filename": "template_app/test/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T21:12:22Z",
      "side": 1,
      "message": "I was unaware that was an issue, although I did notice we as a project were inconsistent when I wrote this, and went to this folder model without realizing it had implications.  For the moment, unless someone is willing to chase down the \"real\" solution with meson, I can just put this stuff in the root meson.build, and if we get that fixed, I\u0027m happy to write the patch to go back to the test subfolder approach.\n\nThis kind of tribal information is EXACTLY the kind of thing I was hoping to tease out of this template repo, so this is great.\n\n\u003e I would prefer we do not do this workaround\n\nIn the scope of this discussion, which is \"what is the current way to accomplish setting up a new application.\" I think we need to have the workaround for the moment, as it\u0027s arguably required, and we want new repos to have code coverage.  I think the tradeoff for code coverage is worth the main meson.build being messier than we\u0027d like it to be.\n\nWith that said, if and when someone pushes for the real fix in meson, we can always iterate on this stuff and go back to what\u0027s here.",
      "parentUuid": "9c5e42e9_87c567ff",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "781c4b44_72ff55a7",
        "filename": "template_app/test/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-05T18:26:07Z",
      "side": 1,
      "message": "tab.",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71f153cb_474b01fe",
        "filename": "template_app/test/meson.build",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-05T18:58:45Z",
      "side": 1,
      "message": "Will fix.",
      "parentUuid": "781c4b44_72ff55a7",
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b903dbb9_c9efbed4",
        "filename": "template_app/xyz.openbmc_project.templateapp.service.in",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2021-03-05T19:40:40Z",
      "side": 1,
      "message": "Not familiar with this. I thought our best practice was to hard code the path? https://github.com/openbmc/docs/blob/master/anti-patterns.md#use-of-usrbinenv-in-systemd-service-files",
      "range": {
        "startLine": 8,
        "startChar": 11,
        "endLine": 8,
        "endChar": 31
      },
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "567848cb_5a1d1d9b",
        "filename": "template_app/xyz.openbmc_project.templateapp.service.in",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-03-09T18:01:44Z",
      "side": 1,
      "message": "This is meson substitution so that the deployed app has an absolute path, but adapts for /usr merged.\n\nThat said, there was discussion of keeping or removing the systemd package dependency in the meson build.",
      "parentUuid": "b903dbb9_c9efbed4",
      "range": {
        "startLine": 8,
        "startChar": 11,
        "endLine": 8,
        "endChar": 31
      },
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "740037a6_eb39ff91",
        "filename": "template_app/xyz.openbmc_project.templateapp.service.in",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-03-09T20:32:03Z",
      "side": 1,
      "message": "I copied this out of bmcweb.  I for sure would\u0027ve preferred a hardcoded path, as it seems simpler, but I was going off what was already there, and I didn\u0027t understand if there were reprocussions from doing that.  I think in theory the install prefix makes us more \"multi distro friendly\" but I\u0027m not sure that actually matters\n\nI can move this back to an absolute path and drop the systemd dependency if nobody sees any issue with it.",
      "parentUuid": "567848cb_5a1d1d9b",
      "range": {
        "startLine": 8,
        "startChar": 11,
        "endLine": 8,
        "endChar": 31
      },
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6d21763_6034639a",
        "filename": "template_app/xyz.openbmc_project.templateapp.service.in",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-03-10T13:43:21Z",
      "side": 1,
      "message": "I\u0027m indifferent on the MESON_INSTALL_PATH aspect.  It is kind of annoying to have a full \u0027.in\u0027 target just to switch from \u0027/usr\u0027 to \u0027/usr/local\u0027 (or just \u0027/\u0027) in some cases, but it is probably more correct.\n\nIf the systemd dependency is just to get a specific install path variable, seems like we can drop that one and hard-code it.  I don\u0027t know of any distros that move that.",
      "parentUuid": "740037a6_eb39ff91",
      "range": {
        "startLine": 8,
        "startChar": 11,
        "endLine": 8,
        "endChar": 31
      },
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ec7bb37_f4d054d6",
        "filename": "template_app/xyz.openbmc_project.templateapp.service.in",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-03-10T15:08:55Z",
      "side": 1,
      "message": "In meson the difference between .in and file copy is minimal, just a little more in the same stanza not a separate step.",
      "parentUuid": "c6d21763_6034639a",
      "range": {
        "startLine": 8,
        "startChar": 11,
        "endLine": 8,
        "endChar": 31
      },
      "revId": "71efce2922e72e3afce25a60cda9c96d57d683ad",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}