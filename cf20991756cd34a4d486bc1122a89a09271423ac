{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3295e784_446ce74f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-05T14:43:30Z",
      "side": 1,
      "message": "Please don\u0027t add this sort of thing to commit messages.  We know you sent it to Gerrit and hence you are looking for review.  We don\u0027t keep history of unmerged content in the commit message.",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bfd4383_8637608a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000927
      },
      "writtenOn": "2022-10-12T16:45:21Z",
      "side": 1,
      "message": "Noted.",
      "parentUuid": "3295e784_446ce74f",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d5baf88_bed57674",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2022-09-14T02:32:05Z",
      "side": 1,
      "message": "Looks good so far, just a query on the EFI requirement.",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bf97352_2b4257cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001065
      },
      "writtenOn": "2022-09-14T05:22:52Z",
      "side": 1,
      "message": "Is there any proposal about measurement of HW specific details, e.g. OTP fuse state?",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44fc99fd_659d97da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000576
      },
      "writtenOn": "2022-09-14T21:24:46Z",
      "side": 1,
      "message": "As you may already know, META(a.k.a Facebook) designed OCP servers are using another OpenBMC (https://github.com/facebook/openbmc), instead of this Linux Foundation sponsored OpenBMC. To avoid confusing, I referred them explicitly as FB-OpenBMC and LF-OpenBMC accordingly in all of my comments. \n\nMETA has a long term goal to make LF-OpenBMC another valid choice for BMC s/w when design META\u0027s OCP servers. So porting FB-OpenBMC\u0027s specific features (i.e. measured boot) to LF-OpenBMC is the step stone to achieve this goal. \n\nAs the design is proposing a same feature that I want to port to LF-OpenBMC, I think it is a good idea to leverage the discussion of this design proposal to introduce FB-OpenBMC\u0027s measured boot to the community and collects comments regarding porting FB-OpenBMC measured boot to LF-OpenBMC.\n\nSo,I comments inline providing the design/implementation information of FB-OpenBMC measured boot for your reference only.\n\n\n \n\n\n",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b10c21b_ebdd99dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001608
      },
      "writtenOn": "2022-10-05T13:51:41Z",
      "side": 1,
      "message": "So we share a goal :) thank you for all the comments you made. FB was enabled to make decisions about u-boot-spl and drivers because you are working on specific HW. This proposal attempts to be a bit more general, although in fairness our \"real\" test systems are AST2600 EVBs with I2C attached TPMs.\n\nWe will have to deal with u-boot-spl eventually -- I think this proposal merely intends to cement the state of the art with u-boot, and have this accepted as a starting point.\n\nBut to reiterate, we are on the same wavelength with you and with other commenters about eventually pushing down the CRTM as deep into hardware as we can.",
      "parentUuid": "44fc99fd_659d97da",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37228eda_324c74bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001608
      },
      "writtenOn": "2022-10-05T13:51:41Z",
      "side": 1,
      "message": "I think we want to avoid that in this first iteration of the proposal. We have made the choice to avoid hardware related issues just to get going, because there are sufficient other problems to deal with just to get MB going.\n\nBut to actually answer your question, OTP fuses should be lined up together with the other HW specific details (like identity of the CRTM) to be dealt with in future iterations of MB implementation, even if that means a vendor specific approach.",
      "parentUuid": "7bf97352_2b4257cb",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96ce8a9c_77eddff5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-05T14:43:30Z",
      "side": 1,
      "message": "I have no read this whole document.  Seems like there is already a good amount of feedback to be incorporated.",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c4cae33_440dd297",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000927
      },
      "writtenOn": "2022-10-12T16:45:21Z",
      "side": 1,
      "message": "Thank you Dan for your feedback and pointers. Since we are all on the same page here we are interested to understand how we can work together on this more efficiently. \n- Is FB planning to upstream any of their design to OpenBMC?\n- Our team is planning to use this project (https://github.com/keylime/keylime) for remote attestation of a cluster of BMCs. Would you be interested to contribute?",
      "parentUuid": "2b10c21b_ebdd99dd",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c5afbe0_4e8a56be",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1001322
      },
      "writtenOn": "2022-09-15T07:28:13Z",
      "side": 1,
      "message": "Isn\u0027t it redundant to secure boot? AFAK, RoT and chain of trust is followed in secure boot also. Correct me if  I am wrong, Measured boot is verifying the logs after boot. But what is the purpose of this verification?",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85dd5dd2_33e8f885",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1001608
      },
      "writtenOn": "2022-10-12T14:25:52Z",
      "side": 1,
      "message": "There is a very long answer to this question, that I will spare you :) the short form is, secure boot and measured boot are done for different purposes. Secure boot is more paranoid and immediate; measured boot is done *for the record* post facto, and can be verified with confidence any time after the system has booted. \n\nE.g. measured boot is useful when there is a large fleet of BMCs around and one needs to know *exactly* what is booted on each of them.",
      "parentUuid": "1c5afbe0_4e8a56be",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a796abc2_028c3d4e",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1000576
      },
      "writtenOn": "2022-09-14T21:24:46Z",
      "side": 1,
      "message": "for measured boot, make sure \"the PCR will get cleared(reset) when it shall should be\" is critical. i.e. we don\u0027t want allow the malicious s/w can reset the TPM to clear the PCR (clear the real measurement) and execute a faked measurement by itself. \nFB-OpenBMC design an TPM and BMC reset bounding circuit to make sure\n* can NOT reset TPM w/o reset BMC\n* whenever BMC reset, TPM reset also.",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8dcf2e6_5999e4c8",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1000927
      },
      "writtenOn": "2022-10-12T16:45:21Z",
      "side": 1,
      "message": "Thanks. If the malicious sw tries to reset the TPM it will be recorded by the TPM reset counter. So it should not be as serious of a concern.",
      "parentUuid": "a796abc2_028c3d4e",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffe625e4_ab21e76f",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1000576
      },
      "writtenOn": "2022-09-14T21:24:46Z",
      "side": 1,
      "message": "FB-OpenBMC measured boot event log implementation on AST25xx and AST26xx BMC.\nhttps://github.com/facebook/openbmc/blob/helium/Documentation/verifiedboot/tpm-event-log.md",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84a880d6_bd009709",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1000927
      },
      "writtenOn": "2022-10-12T16:45:21Z",
      "side": 1,
      "message": "Do we need a fixed memory location to store the event log? Since this is anyway temporary (once u-boot boots up it will be copied over) can we not use the stack? By allocating a fixed memory we would lose it forever.",
      "parentUuid": "ffe625e4_ab21e76f",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76526539_2effa89f",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1000576
      },
      "writtenOn": "2022-09-14T21:24:46Z",
      "side": 1,
      "message": "FB-OpenBMC measured boot\u0027s CRTM is the immutable u-boot-SPL, which was locked in flash (SPI flash hardware write protected) and eXecute-In-Place as the first s/w component from SPI flash during boot up.\n\nhttps://github.com/facebook/openbmc-uboot/tree/openbmc/helium/v2019.04/board/fb-obmc/ast\n\nVboot-spl.c::vboot_spl_do_measures() ⇒ measurement do by SPL\nvboot.c::vboot_uboot_do_measures() ⇒ measurement do by u-boot",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae4f3497_c4cdb8f6",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1000927
      },
      "writtenOn": "2022-10-12T16:45:21Z",
      "side": 1,
      "message": "Is the SPI flash hardware protected using OTP? What if updates need to be performed on u-boot-SPL?",
      "parentUuid": "76526539_2effa89f",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c0179b9_f41b6481",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1000576
      },
      "writtenOn": "2022-09-14T21:24:46Z",
      "side": 1,
      "message": "Technically measurement is calculate the hash of measurement targets (i.e. u-boot, kernel). U-boot verified boot already calculate and put the hash value within FIT during sign time. And verified boot checks the hash value during boot time. If the verify success means the hash is matching with the binary. \n\nSo after verified boot verifying success, we can reuse this hash for our measurement to avoid expensive recalculating.\n\nFB-OpenBMC\u0027s design is double hash: \ni.e. u-boot-measurement \u003d hash_measure( hash_sign(u-boot) )\nthe hash algorithm: hash_measure and hash_sign can be different hash_measure is sha256 and hash_sign can be sha384.",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75587a6a_20435c41",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1000927
      },
      "writtenOn": "2022-10-12T16:45:21Z",
      "side": 1,
      "message": "We are following the TCG specification in our design and believe this is not part of the specification.",
      "parentUuid": "7c0179b9_f41b6481",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09a17000_7d217fb2",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1000576
      },
      "writtenOn": "2022-09-14T21:24:46Z",
      "side": 1,
      "message": "FB-OpenBMC support SPI-TIS interfaced TPM2.0 device. \nTpm2_tis_spi.c ⇒ u-boot TPM2.0 TIS SPI driver\ntpm-v2.c ⇒ TPM 2.0 API\ntpm2-spl.c::ast_tpm_extend() ⇒ measure boot API\n\nBTW, we use spi-bitbang driver to workaround SPI controller only support half-duplex issue. TPM-TIS wait state require SPI controller full-duplex.",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "735402c5_964c4b4f",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1000927
      },
      "writtenOn": "2022-10-12T16:45:21Z",
      "side": 1,
      "message": "We were under the impression that AST2600 can only support a I2C based TPM but this seems to be a workaround to use the SPI TPM.",
      "parentUuid": "09a17000_7d217fb2",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74cbeb3b_0e179acd",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1001065
      },
      "writtenOn": "2022-09-14T05:22:52Z",
      "side": 1,
      "message": "As long as u-boot-spl is authenticating next stage, is this a problem?",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19179264_ed8c4336",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1001608
      },
      "writtenOn": "2022-10-05T13:51:41Z",
      "side": 1,
      "message": "Hi Dhananjay. I believe the issue here is that we would like to push back the *measured* part of the software stack as far as possible. Ideally that would include boot-spl and even before that. However, this is really difficult to accomplish because the software to talk to TPM chips and do the necessary crypto operations is substantial.\n\nThis is *also* an actual problem in the Tianocore reference implementation of UEFI BIOS -- the initial parts of the firmware are quite small. But not as restricted as u-boot-spl.\n\nThe paragraph below explains that the current implementation of measured boot starts with u-boot because of the size reason.",
      "parentUuid": "74cbeb3b_0e179acd",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11f53d5b_74157ce5",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2022-09-14T02:32:05Z",
      "side": 1,
      "message": "I feel like requiring an EFI interface for this is quite a change; is it possible to have a measured boot without the EFI requirement?",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e40c554b_9f727abb",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 1001608
      },
      "writtenOn": "2022-10-05T13:51:41Z",
      "side": 1,
      "message": "Yes ... and no ... it\u0027s not a straight answer. \n\n1. Measured boot does not specifically depend on the kernel being an EFI enabled kernel. So that would be \"yes\".\n\n2. *However*, higher level software expects to *see* the boot log in the linux kernel (that\u0027s where it is being used from).\n\n3. The kernel EFI stub includes a mechanism to close off and transmit the measured boot log from UEFI BIOS to the kernel. \n\n4. The current u-boot implementation of measured boot is compatible with this scheme, and therefore booting an EFI enabled kernel automatically transmits the MB log. This allows us to accomplish our objective without writing new code. Worth the price, methinks? the alternative would be pushing through a kernel change ...",
      "parentUuid": "11f53d5b_74157ce5",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e8e7779_8cf284d7",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-05T14:43:30Z",
      "side": 1,
      "message": "Does arm32 allow us to switch to EFI and still do device trees?  I know arm64 supports EFI, but I don\u0027t think it allows device trees in that mode.  There are a lot of technical aspects of switching to EFI that I don\u0027t think are adequately documented here.",
      "parentUuid": "e40c554b_9f727abb",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59714ec1_d962989d",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 1001608
      },
      "writtenOn": "2022-10-12T14:25:52Z",
      "side": 1,
      "message": "I think I need some clarification on this. Are you saying that the use of the EFI stub precludes using device trees? FWIW we have booted the AST2600 with the EFI stub on and the boot uses device trees. We have not seen any issues.",
      "parentUuid": "4e8e7779_8cf284d7",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3970954_030c6250",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-12T15:06:25Z",
      "side": 1,
      "message": "It is possible I am wrong on that, hence why I asked it as a question.  Hoping someone that understands the kernel/EFI-stub relationship better can answer that.",
      "parentUuid": "59714ec1_d962989d",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0f57a30_b490c750",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 1001605
      },
      "writtenOn": "2022-10-13T14:03:59Z",
      "side": 1,
      "message": "Hi Patrick. Just to clarify, yes, EFI mode is compatible with armv7, and yes, you can use device trees with EFI (look at kernel config parameter `CONFIG_EFI_ARMSTUB_DTB_LOADER`)",
      "parentUuid": "f3970954_030c6250",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1727352_c1eb5b1b",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-13T17:36:34Z",
      "side": 1,
      "message": "👍 (I\u0027m not going to marked resolved since this was originally @jk\u0027s comment.)",
      "parentUuid": "d0f57a30_b490c750",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80976c6f_f17214c3",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1001065
      },
      "writtenOn": "2022-09-14T05:55:49Z",
      "side": 1,
      "message": "Is this in reference to Nuvoton? It will be in upstream TF-A at some point, but better to elaborate this or omit for now?",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 153,
        "endChar": 24
      },
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5a5fcbc_1f94b0c8",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1000927
      },
      "writtenOn": "2022-10-12T16:45:21Z",
      "side": 1,
      "message": "Will be removed in the next patchset.",
      "parentUuid": "80976c6f_f17214c3",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 153,
        "endChar": 24
      },
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7f72054_51a3ad62",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1001065
      },
      "writtenOn": "2022-09-14T05:55:49Z",
      "side": 1,
      "message": "Should include link to TF-A measured boot driver and not gerrit reviews?\nI shared this link in WG, to share WIP.",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 157,
        "endChar": 0
      },
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1ffc3e3_bb58cb8b",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1000927
      },
      "writtenOn": "2022-10-12T16:45:21Z",
      "side": 1,
      "message": "Will be removed in next patchset.",
      "parentUuid": "b7f72054_51a3ad62",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 157,
        "endChar": 0
      },
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "baf5838f_c6e97922",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1000576
      },
      "writtenOn": "2022-09-14T21:24:46Z",
      "side": 1,
      "message": "FB-OpenBMC mboot testing tool which can test the measurement is as expected via execute the whole measurement by the testing script.\nhttps://github.com/facebook/openbmc/tree/helium/common/recipes-utils/vboot-utils/files\n\nmeasure.py, measure_func.py and tpm_event_log.py",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f861604e_3417656e",
        "filename": "designs/measured-boot.md",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1000927
      },
      "writtenOn": "2022-10-12T16:45:21Z",
      "side": 1,
      "message": "We are using keylime which is an open source project and provides the necessary tools for verification of measurement. We will describe the integration of keylime and rest of the attestation infrastructure in a different design document.",
      "parentUuid": "baf5838f_c6e97922",
      "revId": "cf20991756cd34a4d486bc1122a89a09271423ac",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}