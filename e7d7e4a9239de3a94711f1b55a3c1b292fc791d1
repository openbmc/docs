{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "45c658d6_d3387dfc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-07-21T02:13:29Z",
      "side": 1,
      "message": "Hao, can you please wrap all the lines so the document is more easily read?",
      "revId": "e7d7e4a9239de3a94711f1b55a3c1b292fc791d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b7c017e_6a8cdf01",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-21T02:54:45Z",
      "side": 1,
      "message": "One thing I didn\u0027t realize is that arj had completely removed the MCTP stuff from the existing nvme daemon.  That weakens my argument a little, but considering both protocols are:\n1. Targeting the same specification.\n2. Targeting the same devices (with nvme-basic being possibly optional)\n3. Likely exposing the same interfaces.\n\nI still think it makes sense for them to be in the same daemon implementation.  To be clear, I don\u0027t have a need to maintain it (although I\u0027ll continue if I have to), and nvme-sensor doesn\u0027t have to stay in dbus-sensors, but there are a number of things that I don\u0027t think we should step backwards on, and there are other people that use the existing code, of which there isn\u0027t much code for nvme-sensor itself.  Moving it to wherever we decide put the new daemon and with whatever seasoned maintainer wants to maintain it is fine with me if that\u0027s the result, but whomever it is needs to take over nvme as a whole (including the existing reactor) and not just start over from scratch unless there\u0027s a good coding architectural reason to do so.  (good reasons might include a different language, major changes to IO model, ect).  Wanting more features isn\u0027t a good reason IMO, those can always be added to the already maintained daemon, where we\u0027ve worked through all the boilerplate, \"how to build a reactor\" stuff.",
      "revId": "e7d7e4a9239de3a94711f1b55a3c1b292fc791d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "904eb856_eeffe90d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2022-07-21T03:39:01Z",
      "side": 1,
      "message": "Just doing a bit of a summary here, just to check that I\u0027m on the same page with the discussions so far:\n\n\u003e I still think it makes sense for them to be in the same daemon implementation.\n\nI definitely think that\u0027s reasonable, and we should get a little design overview for that approach.\n\nHao, correct me if I\u0027m wrong, but at a rough overview: your goal here is expose functionality available from the management side of a NVMe device. The initial proposal is a fairly direct mapping of the NVMe-MI facilities to a dbus interface.\n\nSince then, it\u0027s become apparently that we really should be exposing these in a more general \"OpenBMC object model\"; for example, instead of exposing a NVM Subsystem Health Status Data Structure on d-bus, we should just be extracting the relevant bits out of that (composite temperature, drive life used, etc), as regular OpenBMC sensors. That achieves a more \"BMC-like\" access to the MI data.\n\n[whether we still expose the NSHDS in addition to the actual sensors is another question perhaps...]\n\nWe also have a future set of requirements on more NVMe-specific (or at least storage-device-specific) functionality, like namespace/volume management, secure erase, etc. The direction here would be to support a Swordfish-standardised API for off-BMC management agents. This would allow the control that Hao is looking to provide for DC integration.\n\nFor that latter requirement, we\u0027d be looking to expose the MI functions as closely as possible to the Redfish/Swordfish schema; this might be a shift from the existing proposal, where it\u0027s closer to the MI spec than the eventual REST API (ie, Swordfish) data layout.\n\nOverall though, it makes sense to have a single daemon for both of those requirements. To me, the design point of having one daemon as a single point of communication with the NVMe-MI endpoint is the important one here.\n\nWe could consider the NVMe-Basic and NVMe-MI protocols as separate endpoints, but there\u0027s probably enough overlap in the supporting infrastructure (VPD discovery etc) to warrant putting both into one codebase.\n\nTBH, I\u0027m OK with either approach, as long as:\n\n- we have sensible representations of the core inventory/sensor data; and\n- adding the richer set of NVMe-MI control functionality doesn\u0027t mean we end up out-of-scope for a dbus-sensors component",
      "parentUuid": "4b7c017e_6a8cdf01",
      "revId": "e7d7e4a9239de3a94711f1b55a3c1b292fc791d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f75edf4d_0c7d5095",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-07-22T01:15:56Z",
      "side": 1,
      "message": "\u003e One thing I didn\u0027t realize is that arj had completely removed the MCTP stuff from the existing nvme daemon.  That weakens my argument a little\n\nHonestly, I think you\u0027re putting too much weight on me ripping out the MCTP support. I did that because it was unbuildable, and being unable to even build it prevented me from refactoring other parts of the code.\n\nTo be clear, I did not rip it out because I don\u0027t want to support MCTP in nvmesensor, I ripped it out because the _specific_ _implementation_ was unmaintainable.\n\nNow we have kernel support for MCTP and NVMe-MI support in libnvme, I see no reason not to add it back in.\n\nAs such, I don\u0027t think the current state of the code changes the argument at all.\n\n\u003e I still think it makes sense for them to be in the same daemon implementation.  \n\nAs do I, and Jeremy too.\n\n\u003e Wanting more features isn\u0027t a good reason IMO, those can always be added to the already maintained daemon, where we\u0027ve worked through all the boilerplate, \"how to build a reactor\" stuff.\n\nPrecisely. I don\u0027t se any reason why we can\u0027t grow extra NVMe management features here. Calling the repo \"dbus-sensors\" was a mistake I think, in that it constrains peoples\u0027 understanding of its content to sensors. A better name is something like \"entity-reactors\" IMO.",
      "parentUuid": "904eb856_eeffe90d",
      "revId": "e7d7e4a9239de3a94711f1b55a3c1b292fc791d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7ab0d93_fa08bf0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-23T17:48:04Z",
      "side": 1,
      "message": "\u003e \u003e One thing I didn\u0027t realize is that arj had completely removed the MCTP stuff from the existing nvme daemon.  That weakens my argument a little\n\u003e \n\u003e Honestly, I think you\u0027re putting too much weight on me ripping out the MCTP support. I did that because it was unbuildable, and being unable to even build it prevented me from refactoring other parts of the code.\n\nSure, maybe I overemphasized it, and I didn\u0027t mean to call you out directly if that\u0027s how you felt (you did the right thing).  I mostly did it to call out that I had made a mistake which had caused confusion in the design.  I think we\u0027re in agreement on the overall direction here regardless.\n\n\u003e As do I, and Jeremy too.\n\u003e \n\u003e \u003e Wanting more features isn\u0027t a good reason IMO, those can always be added to the already maintained daemon, where we\u0027ve worked through all the boilerplate, \"how to build a reactor\" stuff.\n\u003e \n\u003e Precisely. I don\u0027t se any reason why we can\u0027t grow extra NVMe management features here. Calling the repo \"dbus-sensors\" was a mistake I think, in that it constrains peoples\u0027 understanding of its content to sensors. A better name is something like \"entity-reactors\" IMO.\n\nI\u0027ve been meaning to propose changing it to dbus-reactors, but I kinda like your name better now that I think about it.  I should really get on that....\n\n\n\n\n\nAgree with everything in Jeremy\u0027s overview here.\n\n\u003e we\u0027d be looking to expose the MI functions as closely as possible to the Redfish/Swordfish schema\n\nFWIW, most of the phosphor-dbus-interfaces added in recent years have been \"redfish inspired\" in their wording and enum choices.  \"Redfish does it this way\" isn\u0027t a complete justification for most interface additions (we still have to apply dbus best practices and naming) but lots of interfaces have been added specifically to help redfish, so it\u0027s pretty doable to get stuff in to fulfill a well formed dbus interface.",
      "parentUuid": "f75edf4d_0c7d5095",
      "revId": "e7d7e4a9239de3a94711f1b55a3c1b292fc791d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e49dc0a0_5b9c67bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2022-08-01T22:57:46Z",
      "side": 1,
      "message": "\u003e \u003e \u003e One thing I didn\u0027t realize is that arj had completely removed the MCTP stuff from the existing nvme daemon.  That weakens my argument a little\n\u003e \u003e \n\u003e \u003e Honestly, I think you\u0027re putting too much weight on me ripping out the MCTP support. I did that because it was unbuildable, and being unable to even build it prevented me from refactoring other parts of the code.\n\u003e \n\u003e Sure, maybe I overemphasized it, and I didn\u0027t mean to call you out directly if that\u0027s how you felt (you did the right thing).  I mostly did it to call out that I had made a mistake which had caused confusion in the design.  I think we\u0027re in agreement on the overall direction here regardless.\n\nThanks for clarify the history of MCTP changes in nvme sensor. Yes, given the currently status of support on MCTP, we can recreate the thermal interface on top of the NVMe-MI spec in addition to NVMe basic command. \n  \n\u003e \n\u003e \u003e As do I, and Jeremy too.\n\u003e \u003e \n\u003e \u003e \u003e Wanting more features isn\u0027t a good reason IMO, those can always be added to the already maintained daemon, where we\u0027ve worked through all the boilerplate, \"how to build a reactor\" stuff.\n\u003e \u003e \n\u003e \u003e Precisely. I don\u0027t se any reason why we can\u0027t grow extra NVMe management features here. Calling the repo \"dbus-sensors\" was a mistake I think, in that it constrains peoples\u0027 understanding of its content to sensors. A better name is something like \"entity-reactors\" IMO.\n\u003e \n\u003e I\u0027ve been meaning to propose changing it to dbus-reactors, but I kinda like your name better now that I think about it.  I should really get on that....\n\u003e \n\u003e \nGiven the intention of nvme sensor(reactor) stated here, I think we can make consensus there, as Ed, Andrew, and Jeremy have suggested, to extend the current nvme sensor to support NVMe-MI functions. \n\nWe still need to decide the format of DBus interface through for all NVMe specifics. I will stress them in the modification of this doc. \n\n\u003e \n\u003e \n\u003e \n\u003e Agree with everything in Jeremy\u0027s overview here.\n\u003e \n\u003e \u003e we\u0027d be looking to expose the MI functions as closely as possible to the Redfish/Swordfish schema\n\u003e \n\u003e FWIW, most of the phosphor-dbus-interfaces added in recent years have been \"redfish inspired\" in their wording and enum choices.  \"Redfish does it this way\" isn\u0027t a complete justification for most interface additions (we still have to apply dbus best practices and naming) but lots of interfaces have been added specifically to help redfish, so it\u0027s pretty doable to get stuff in to fulfill a well formed dbus interface.\n\nWe also need to strike the none-redfish domain. As Redfish/Swordfish is still on its way updating the schemas and lack of some crucial components, we are going to rely on some NVMe raw data and routing to BMCWeb google root. The data path will be eliminated after the attributes/methods are accepted and published by DMTF Redfish.",
      "parentUuid": "b7ab0d93_fa08bf0f",
      "revId": "e7d7e4a9239de3a94711f1b55a3c1b292fc791d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f720ac82_344fa7df",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2022-08-02T00:11:03Z",
      "side": 1,
      "message": "Sure. Will do.",
      "parentUuid": "45c658d6_d3387dfc",
      "revId": "e7d7e4a9239de3a94711f1b55a3c1b292fc791d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c94b4e0b_772a4660",
        "filename": "designs/nvmed.md",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-07-21T02:41:17Z",
      "side": 1,
      "message": "whitespace error.",
      "range": {
        "startLine": 25,
        "startChar": 1,
        "endLine": 25,
        "endChar": 2
      },
      "revId": "e7d7e4a9239de3a94711f1b55a3c1b292fc791d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b50a62b9_29d9ee8d",
        "filename": "designs/nvmed.md",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1000857
      },
      "writtenOn": "2022-08-01T22:57:46Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c94b4e0b_772a4660",
      "range": {
        "startLine": 25,
        "startChar": 1,
        "endLine": 25,
        "endChar": 2
      },
      "revId": "e7d7e4a9239de3a94711f1b55a3c1b292fc791d1",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}