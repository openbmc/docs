{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "35c6ebeb_e47bae84",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-01-19T23:14:13Z",
      "side": 1,
      "message": "Hi Justin,\n\nI have concerns along the same lines as Patrick. I\u0027ve made my own comments where I\u0027ve seen fit.",
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca272c7b_845994a4",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-19T21:39:23Z",
      "side": 1,
      "message": "Please use \u0027i2c\u0027.  This makes it really annoying to grep for.",
      "range": {
        "startLine": 9,
        "startChar": 28,
        "endLine": 9,
        "endChar": 31
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb1c8132_f7a88c4a",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-01-19T23:14:13Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "ca272c7b_845994a4",
      "range": {
        "startLine": 9,
        "startChar": 28,
        "endLine": 9,
        "endChar": 31
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4e991bb_b6b3b9ab",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-01-19T23:14:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca272c7b_845994a4",
      "range": {
        "startLine": 9,
        "startChar": 28,
        "endLine": 9,
        "endChar": 31
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c60b1a2a_824ef846",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-19T21:39:23Z",
      "side": 1,
      "message": "I\u0027ll read further but \"a single daemon for everything i2c\" doesn\u0027t really sound great to me.  Can we / should we scope this a little bit?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 58
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78fd301b_caf67f78",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-01-19T23:14:13Z",
      "side": 1,
      "message": "+1\n\nI don\u0027t see what\u0027s written as a problem description. As it stands it\u0027s more of a solution description, which isn\u0027t what we\u0027re after?\n\nWhy do we need a single daemon for this? The \"Problem Description\" section is where you should provide motivating use-cases that expose bad or missing behaviour in OpenBMC. It shouldn\u0027t mention solutions.\n\nOtherwise it sounds like your problem is that what you\u0027ve already implemented needs to be accepted by the community, which isn\u0027t how this works.",
      "parentUuid": "c60b1a2a_824ef846",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 58
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f70247ce_1ab39b47",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-01-19T23:14:40Z",
      "side": 1,
      "message": "It\u0027s not really a daemon for everything i2c, but for devices that require more than just telemetry so that all access to that device is encapsulated in a single application. I reworded the description to reflect this.",
      "parentUuid": "c60b1a2a_824ef846",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 58
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b387747f_973399bc",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-01-20T00:03:49Z",
      "side": 1,
      "message": "Good point, I reworded the problem description to be an actual problem description.",
      "parentUuid": "f70247ce_1ab39b47",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 58
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94e08d40_8d7e782b",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-01-19T23:14:13Z",
      "side": 1,
      "message": "I\u0027m not sold on this. No matter what, it requires some orchestration of userspace. Having a single daemon do multiple things doesn\u0027t prevent me swinging in and running some random `i2cset -f`s on the device while the daemon is running.\n\nWhat level of assurance are we trying to achieve with this proposal?",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 60
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bc04850_4eacd43c",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-01-20T00:03:49Z",
      "side": 1,
      "message": "This daemon would act as a kind of gatekeeper for i2c access to a device to try and reduce the issues described. Of course anyone could start running raw i2c commands and interfere with everything, but the motivation of this daemon is to encapsulate any access required and manage the coordination away from the user. So if the user needs to perform a firmware upgrade, that user doesn\u0027t need to worry about disabling telemetry, etc, it all happens under the hood of this application.",
      "parentUuid": "94e08d40_8d7e782b",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 60
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60e890e3_993e7c51",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2022-01-20T00:06:29Z",
      "side": 1,
      "message": "Suppose we decided to go with two daemons. Existing dbus-sensors daemon and add another daemon to manage firmware upgrades and possibly other things (e.g black box record retrieval)\nNow the firmware upgrade daemon must coordinate with the sensor daemon to pause telemetry to do upgrades and then resume the sensor daemon when done.\n\nInstead the decision was made to package this together into a single daemon to eliminate this coordination.\n\nAs far as other applications coming in and forcing i2c transactions on that device.. I\u0027m not aware of anything that can prevent that scenario.",
      "parentUuid": "94e08d40_8d7e782b",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 60
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6fd24bfc_d377fe5a",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-01-20T00:41:41Z",
      "side": 1,
      "message": "\u003e As far as other applications coming in and forcing i2c transactions on that device.. I\u0027m not aware of anything that can prevent that scenario.\n\nRight, it was an extreme example and a bit unhelpful. I\u0027ll move on :)",
      "parentUuid": "60e890e3_993e7c51",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 60
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fc0ef5a_9a0640b7",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-01-19T23:14:13Z",
      "side": 1,
      "message": "What does this look like from a practical, implementation standpoint? I2C devices don\u0027t have to have any particular command interfaces, though there are some popular ones (PMBus). How is this expected to work if there\u0027s a kernel driver bound to the device?",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 31,
        "endChar": 46
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22a17241_9ff4cad0",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-01-20T00:03:49Z",
      "side": 1,
      "message": "This daemon would potentially unbind any hwmon drivers before writing firmware, and then rebind them after the firmware is written.",
      "parentUuid": "7fc0ef5a_9a0640b7",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 31,
        "endChar": 46
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe897bd0_1b873ca7",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2022-01-20T00:06:29Z",
      "side": 1,
      "message": "The Dbus interface here are the generic ItemUpdater/ItemManager interfaces found in phosphor-dbus-interfaces (https://github.com/openbmc/phosphor-dbus-interfaces/tree/master/yaml/xyz/openbmc_project/Software)\n\nThis daemon\u0027s intent is to allow users to update pmbus devices just like they would update BMCs.\n\nAs far as accessing the i2c devices.. There are a few approaches but mostly leaving this as an implementation detail.\n1.) IIRC, you can force i2c transactions even if there is a driver bound to the device.\n2.) You can always userspace unbind the driver and then rebind it when done\n3.) Just do everything in userspace and forget about the hwmon sysfs interface.\n4.) painstakingly go through every pmbus driver and add device upgrade features..but first standardize it as part of hwmon and get maintainer buy-in.\nWe\u0027ve tried this in the past and it was rejected.",
      "parentUuid": "7fc0ef5a_9a0640b7",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 31,
        "endChar": 46
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdd34058_cf962e73",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-01-20T00:55:20Z",
      "side": 1,
      "message": "\u003e As far as accessing the i2c devices.. There are a few approaches but mostly leaving this as an implementation detail.\n\u003e 1.) IIRC, you can force i2c transactions even if there is a driver bound to the device.\n\nYeah, but I expect we agree that this is a bad idea.\n\n\u003e 2.) You can always userspace unbind the driver and then rebind it when done\n\nOkay, so the intent is to do this when the kernel interface does provide all the necessary information?\n\n\u003e 3.) Just do everything in userspace and forget about the hwmon sysfs interface.\n\nIt\u0027s a big hammer, but sure. It\u0027s probably worthwhile looking at the phosphor-power repo as it sorta goes in the same direction. Maybe can even be generalised? Anyway, it at least already has a userspace implementation for handling PMBus devices.\n\n\u003e 4.) painstakingly go through every pmbus driver and add device upgrade features..but first standardize it as part of hwmon and get maintainer buy-in.\n\u003e We\u0027ve tried this in the past and it was rejected.\n\nRight, it\u0027d be good to link to this discussion in the proposal! It\u0027s certainly good fodder for the \"Alternatives Considered\" section that the design document template contains (but isn\u0027t present in this proposal).",
      "parentUuid": "fe897bd0_1b873ca7",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 31,
        "endChar": 46
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a98fd71e_ef39716e",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-01-20T19:06:02Z",
      "side": 1,
      "message": "\u003e Okay, so the intent is to do this when the kernel interface does provide all the necessary information?\nYes if an existing kernel interface provides telemetry, we can unbind the driver for accessing the device for other needs.\n\nI added an Alternatives Considered section with details on how we considered extending hwmon drivers and using phosphor-power.",
      "parentUuid": "bdd34058_cf962e73",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 31,
        "endChar": 46
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19e2eb5e_e7ba7fb4",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-01-20T20:49:12Z",
      "side": 1,
      "message": "Thanks",
      "parentUuid": "a98fd71e_ef39716e",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 31,
        "endChar": 46
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5284db7a_03eeee80",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-19T21:39:23Z",
      "side": 1,
      "message": "How does this interact with existing sensors presented by dbus-sensors / phosphor-hwmon?  We already have implementations for anything exported by the hwmon subsystem in the kernel and a large percentage of those are i2c.  Again, we probably want to scope the ambition here a little?",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 33,
        "endChar": 66
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1481f7e_8b51e7b0",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-01-19T23:14:13Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "5284db7a_03eeee80",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 33,
        "endChar": 66
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a70deeca_c9062b39",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-01-19T23:14:40Z",
      "side": 1,
      "message": "A device with sensors presented from this daemon shouldn\u0027t also have sensors reported by another daemon. This daemon could include implementations for reading from hwmon drivers, or in the device-specific code contained in this daemon. (added this to the doc)",
      "parentUuid": "5284db7a_03eeee80",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 33,
        "endChar": 66
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00191b5a_962cf4c8",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-19T21:39:23Z",
      "side": 1,
      "message": "Do we have any examples?",
      "range": {
        "startLine": 34,
        "startChar": 57,
        "endLine": 34,
        "endChar": 76
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cb0dcee_c50ce600",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-01-19T23:14:40Z",
      "side": 1,
      "message": "Yes, added one here.",
      "parentUuid": "00191b5a_962cf4c8",
      "range": {
        "startLine": 34,
        "startChar": 57,
        "endLine": 34,
        "endChar": 76
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b20c280_8c8c1b68",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-01-19T23:14:13Z",
      "side": 1,
      "message": "How do you provided a consistent interface to do this? This makes it sound like you\u0027re trying to insert an entire layer of indirection between applications and I2C devices, and it feels like a recipe for performance issues.",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 36,
        "endChar": 17
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "055ca8bd_bc7a4192",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-01-20T00:03:49Z",
      "side": 1,
      "message": "If another application is trying to report info from this device and is performance critical, its logic should probably belong in this daemon.",
      "parentUuid": "7b20c280_8c8c1b68",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 36,
        "endChar": 17
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "213f5032_ae825c32",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-01-20T00:55:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "055ca8bd_bc7a4192",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 36,
        "endChar": 17
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18df11d3_68cef62d",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-19T21:39:23Z",
      "side": 1,
      "message": "This seems self-contradictory.  Nothing, except BMCWeb, directly exposes Redfish anyhow, so what are you getting at?",
      "range": {
        "startLine": 40,
        "startChar": 55,
        "endLine": 44,
        "endChar": 27
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7137b5a7_c3b94566",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-01-19T23:14:40Z",
      "side": 1,
      "message": "Right, I just wanted to express that this daemon isn\u0027t exposing anything over Redfish. I removed this paragraph to avoid confusion.",
      "parentUuid": "18df11d3_68cef62d",
      "range": {
        "startLine": 40,
        "startChar": 55,
        "endLine": 44,
        "endChar": 27
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "177619d6_3135a83c",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-19T21:39:23Z",
      "side": 1,
      "message": "Is the daemon going to handle multi-slot updates (two devices of the same underlying hardware type) or is that handled by two different instances of the daemon?",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 49,
        "endChar": 41
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d3b68b3_ee35b2d2",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-01-19T23:14:13Z",
      "side": 1,
      "message": "Right, it\u0027s a little unclear whether the proposal is for a single instance of the daemon handling all I2C devices, or some other approach. I guess you could do one instance per bus? One instance per device?",
      "parentUuid": "177619d6_3135a83c",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 49,
        "endChar": 41
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8930bbf_2bc35692",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-01-19T23:14:40Z",
      "side": 1,
      "message": "Yes, it would handle multi-slot updates, but we would also want the ability to handle cases where there are multiple devices and those devices may require different firmware images. Added some details here.",
      "parentUuid": "177619d6_3135a83c",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 49,
        "endChar": 41
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "905ac7f6_f3a768c8",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-01-19T23:14:13Z",
      "side": 1,
      "message": "This sounds like a kernel patch rather than something we need a userspace daemon for?",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 65,
        "endChar": 40
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c43e1d0e_53497f99",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-01-20T00:03:49Z",
      "side": 1,
      "message": "Do you mean a patch to existing hwmon drivers? IIUC, hwmon drivers are very focused on telemetry, and other types of information wouldn\u0027t be suitable in those drivers.",
      "parentUuid": "905ac7f6_f3a768c8",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 65,
        "endChar": 40
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3040548f_5af4af50",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-01-20T00:55:20Z",
      "side": 1,
      "message": "Yeah I guess I\u0027m a bit frustrated with Guenter\u0027s stance that PMBus must only be used in the hwmon subsystem in the kernel, and then NACKs anything expanding the hwmon sysfs ABI.",
      "parentUuid": "c43e1d0e_53497f99",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 65,
        "endChar": 40
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2fa8c20_d0e75eb9",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-03T23:15:31Z",
      "side": 1,
      "message": "That stance unfortunately kind of makes this kind of \"do more stuff in userspace\" stuff required.  I don\u0027t really like it anymore than you do, but given Guenters position, I don\u0027t see another option than doing a lot more stuff in userspace.",
      "parentUuid": "3040548f_5af4af50",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 65,
        "endChar": 40
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "945a5e68_9012561e",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-19T21:39:23Z",
      "side": 1,
      "message": "This interface doesn\u0027t exist.  Are you going to define it?  Does this really just mean that the daemon could expose \"any other dbus interface not already identified above\"?\n\nWhat are we doing about Inventory?  Is there any inventory information we can only get over i2c?",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 75,
        "endChar": 3
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c05eee1_02a29a0d",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1001162
      },
      "writtenOn": "2022-01-19T23:14:40Z",
      "side": 1,
      "message": "Yes the daemon could expose a dbus interface for anything a particular device might need to expose. I believe the inventory information can still be handled by EntityManager.",
      "parentUuid": "945a5e68_9012561e",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 75,
        "endChar": 3
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d28e7c0_9eb70ef4",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-20T03:39:50Z",
      "side": 1,
      "message": "\u003e I believe the inventory information can still be handled by EntityManager.\n\nWhat happens when the inventory information is in the same i2c end-point?  For instance, how do you get the PMBus-based power supply serial number?",
      "parentUuid": "5c05eee1_02a29a0d",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 75,
        "endChar": 3
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10024e84_677d9ffa",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2022-01-20T18:07:49Z",
      "side": 1,
      "message": "AFAIK serial number from pmbus isn\u0027t being exposed today.. so this daemon isn\u0027t any less capable (it just doesn\u0027t handle ALL possible use cases on inception).\n\nAs far as being able to reflect new properties onto inventory objects that EM owns. I think there is a pattern for that. You can capture interfaces in the Probe and then reflect them into Exposed objects.\nEd can correct me if I\u0027m wrong on this, a similar pattern was suggested for another gpio presence daemon that is currently in review as well.\n\n(I have no issue with this daemon owning the inventory item but this was discouraged in another review..instead preferring to delegate ownership to EM - and so that\u0027s the pattern we followed here)",
      "parentUuid": "2d28e7c0_9eb70ef4",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 75,
        "endChar": 3
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed9f0c54_ed1724ad",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-03T23:15:31Z",
      "side": 1,
      "message": "Can we make this example actually include all the properties you plan on using?  I think that\u0027ll help when we actually build the interface to specify what this actually implements.  As a matter of design, we probably want to implement this property using this API:\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml\ngiven that it already exists.\n\n\u003e What happens when the inventory information is in the same i2c end-point? \nFor Pmbus devices, do we have a use case for this?  PMbus based power supplies are generally covered by an eeprom FRU, I wasn\u0027t aware that the pmbus spec supported serial numbers.  If it does, that\u0027s a pain architecturally and needs me to give some brainpower to how to do a \"dual detect\" of a pmbus device in EM.\n\n\u003eAs far as being able to reflect new properties onto inventory objects that EM owns.\n\nThis would be backward reflection, which EM can\u0027t do today, you have to get all your inventory properties from the eeprom/probe interface you want to pass through.\n\n\u003e Ed can correct me if I\u0027m wrong on this, a similar pattern was suggested for another gpio presence daemon that is currently in review as well.\n\nIn that case, it goes\nPresence -\u003e Em probe for device -\u003e SlotPresence -\u003e Device\n\n\nIn this case, it goes something like\nEeprom Frudevice -\u003e em probe for baseboard -\u003e i2c device finds serial number -\u003e  ????????\n\nThere\u0027s no backward path to attach the serial from step 3 into the object created on step 2.  Again, if this is required, it\u0027s going to need some brainpower to make it sane.  This stuff is too complicated enough as-is.",
      "parentUuid": "10024e84_677d9ffa",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 75,
        "endChar": 3
      },
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "433db23f_689cc147",
        "filename": "designs/i2c-device-mgmt.md",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-01-19T23:14:13Z",
      "side": 1,
      "message": "It\u0027s not clear to me what we can\u0027t achieve with in-kernel support for the I2C devices. For example, there\u0027s a hwmon PMBus driver for the adm1266. The kernel won\u0027t do firmware update, but are there specific issues you have with the existing kernel uapi for hwmon? I think these issues would do well to be described in the \"Problem Description\" section.",
      "revId": "1dd6a7dc3c0185fd1111013778db57a88949e8bd",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}