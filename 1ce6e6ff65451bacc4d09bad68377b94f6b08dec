{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "02fd6a31_0a8cd8b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-12T21:48:42Z",
      "side": 1,
      "message": "Based on the fact that this design exists, I\u0027m assuming that the Meta certificate authority doesn\u0027t support using User Principal Name in the extended field?  That seems like the other \"right\" way to do this.",
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22dc54b9_47f7fc52",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2024-04-15T15:34:54Z",
      "side": 1,
      "message": "Will escalate this internally to our certs team, I\u0027m assuming not from what I see in `openssl x509 -in $client_cert -text`\u0027s output",
      "parentUuid": "02fd6a31_0a8cd8b5",
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6e916f5_276b218f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-15T15:59:23Z",
      "side": 1,
      "message": "User Principal name looks like it\u0027s in one of the formats\n\nusername, domain/username, or username@domain.\n\nWhich is awkwardly close to what you guys have.  All good if it can\u0027t work, but it\u0027s so close it\u0027s at least worth asking.",
      "parentUuid": "02fd6a31_0a8cd8b5",
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a38ef70c_d6ce2a3e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-15T16:18:11Z",
      "side": 1,
      "message": "At a design-level, I\u0027d like us to explore options that don\u0027t involve bmcweb doing any kind of special logic.  Bmcweb ideally should be a DBus to Redfish translator, and ideally shouldn\u0027t be decoding any special string patterns on its own, but should be relying on other things on DBus that can do the job.  When CommonName matching was a single \"read the username string string and compare to a dbus path\", that\u0027s easy and not business logic.  When we\u0027re parsing complex semantics from it and doing transforms, that\u0027s business logic that should be done in a daemon somewhere.",
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba85f5a0_e5f51ec7",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-15T15:59:23Z",
      "side": 1,
      "message": "Missing all background on the fact that Redfish has a full stack of in-specification solutions for this stuff.  CommonName matching, UPN, etc.",
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3b13b11_3e96370f",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2024-04-16T16:08:16Z",
      "side": 1,
      "message": "Fair, will add üëç",
      "parentUuid": "ba85f5a0_e5f51ec7",
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81000a8a_62d8c1a8",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-15T15:59:23Z",
      "side": 1,
      "message": "Given that Redfish has a standard for CertificateMappingAttribute that, how do you see us handling that parameter when we\u0027re in \"meta mode\"?\n\nToday, we the code essentially would just put CommonName, because that\u0027s what it does.  If we\u0027re not mapping to a common name, I\u0027m not sure what we should expose in Redfish to denote that this system supports Metas certificate encoding scheme.",
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1069ba1_2a0a05e1",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-10T18:35:53Z",
      "side": 1,
      "message": "https://gerrit.openbmc.org/c/openbmc/bmcweb/+/71910\n\nThis is now coming up and is going to cause some blocking compatibility issues.  Would appreciate input there.",
      "parentUuid": "81000a8a_62d8c1a8",
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c307053_9b88fbc8",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-12T21:43:51Z",
      "side": 1,
      "message": "Presumably there\u0027s requirements around mapping a user to a Redfish role?  Otherwise what\u0027s the point in identifying the user as more than just \"meta-user\"",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 71,
        "endChar": 38
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef0bc593_adb4f384",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2024-04-15T15:34:54Z",
      "side": 1,
      "message": "Yes, e.g. services that only need to query sensor endpoints have users with the `ReadOnly` role.",
      "parentUuid": "2c307053_9b88fbc8",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 71,
        "endChar": 38
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d504ff8a_e1edee10",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-12T21:43:51Z",
      "side": 1,
      "message": "How will these users get created?  Redfish?",
      "range": {
        "startLine": 81,
        "startChar": 3,
        "endLine": 82,
        "endChar": 47
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "099ef0da_f28ce842",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2024-04-15T15:34:54Z",
      "side": 1,
      "message": "Yes, through `POST /redfish/v1/AccountService/Accounts`",
      "parentUuid": "d504ff8a_e1edee10",
      "range": {
        "startLine": 81,
        "startChar": 3,
        "endLine": 82,
        "endChar": 47
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "959930aa_a198daaa",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-10T18:35:53Z",
      "side": 1,
      "message": "Sorry, missed this response, my key is around what the structure will look like.  ManagerAccount has a CertificateCollection, but this doesn\u0027t talk to that, or how that per-user certificate collection would be managed (is that a phosphor certificate manager thing, phosphor-user-manager thing?  both?)\n\nWe should document at least a start of an intent there.",
      "parentUuid": "099ef0da_f28ce842",
      "range": {
        "startLine": 81,
        "startChar": 3,
        "endLine": 82,
        "endChar": 47
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1792495_253c48d6",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-12T21:43:51Z",
      "side": 1,
      "message": "Why abbreviate?  service_zeus seems like it makes more sense in terms of an actual user?\n\nThis question kinda pokes a little at this is just trying to enforce Metas existing certificate naming semantics on /etc/password.\n\nCould we do something more generic like, \"We replace colons in the CommonName field with underscores and try to match the user\"\n\nThe change functionally in that approach would be a minimal difference, but doesn\u0027t require documenting or supporting metas internal cert structure in code.  In the odd case that meta decided to add \"external user\", \"Domain\", or any other new prefixes, OpenBMC doesn\u0027t have to care, that\u0027s your companies business, we just try to match common name.  In terms of result, the only thing that I think changes would be that host:/hostname would change to two underscores host__hostname, which in code we could either make the change (which would look a little weird in pam), or we could make the rule collapse multiple sequential escaped tokens into one, so the result is identical.\n\nThis also avoids questions like \"How are domain names escaped\", \"Do we enforce the 255 character domain name limit for service names?\" and all manner of other questions that I would rather NOT ask, just to keep this simple.",
      "range": {
        "startLine": 84,
        "startChar": 57,
        "endLine": 84,
        "endChar": 60
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd65829c_70d4ca84",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2024-04-15T15:34:54Z",
      "side": 1,
      "message": "\u003e Could we do something more generic like, \"We replace colons in the CommonName field with underscores and try to match the user\"\n\nUnfortunately it\u0027s common to have Subject CNs like \"user:kawajiri/hostname.facebook.com` (where the hostname part is irrelevant and would produce sth like \"user_kawmarco_hostname_facebook.com\").\n\nAlso trying to keep the code explicit and avoid character replacements as much as possible given it\u0027s security-sensitive code (e.g. escaping/collapsing characters can give margin to identity collisions)\n\n\u003e In the odd case that meta decided to add \"external user\", \"Domain\", or any other new prefixes, OpenBMC doesn\u0027t have to care, that\u0027s your companies business, we just try to match common name\n\nI can make the code generic to any `\u003ctype\u003e` field, but not sure if it\u0027s much of a code complexity win (e.g. we\u0027d still need to handle the `type\u003d\"host\"` special case).\n\nIf it\u0027s any help on avoiding taking too much community attention on this, Meta is very conservative on any changes on its client certificates (the subject name field has been using this scheme since I started five years ago), I doubt you\u0027ll see many change requests to the meta subject CN parsing code in the long term, if at all.",
      "parentUuid": "c1792495_253c48d6",
      "range": {
        "startLine": 84,
        "startChar": 57,
        "endLine": 84,
        "endChar": 60
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f26854b_85289451",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-15T15:59:23Z",
      "side": 1,
      "message": "\u003e \u003e Could we do something more generic like, \"We replace colons in the CommonName field with underscores and try to match the user\"\n\u003e \n\u003e Unfortunately it\u0027s common to have Subject CNs like \"user:kawajiri/hostname.facebook.com` (where the hostname part is irrelevant and would produce sth like \"user_kawmarco_hostname_facebook.com\").\n\nWhy is this a problem?\n\n\u003e \n\u003e Also trying to keep the code explicit and avoid character replacements as much as possible given it\u0027s security-sensitive code (e.g. escaping/collapsing characters can give margin to identity collisions)\n\nThis is fair.  The other thing I realized is that linux usernames actually have very few limits on what characters are allowed, so I\u0027m more confused what we\u0027re trying to accomplish here.  Based on my reading (which could be wrong), you could just create a username of\n\nuser:kawmarco/dev123.facebook.com\n\nAnd require no changes to anything, including bmcweb, considering that unix allows colons, forward slashes and periods in their names.\n\nWas this considered?\n\n\u003e \n\u003e \u003e In the odd case that meta decided to add \"external user\", \"Domain\", or any other new prefixes, OpenBMC doesn\u0027t have to care, that\u0027s your companies business, we just try to match common name\n\u003e \n\u003e I can make the code generic to any `\u003ctype\u003e` field, but not sure if it\u0027s much of a code complexity win (e.g. we\u0027d still need to handle the `type\u003d\"host\"` special case).\n\u003e \n\u003e If it\u0027s any help on avoiding taking too much community attention on this, Meta is very conservative on any changes on its client certificates (the subject name field has been using this scheme since I started five years ago), I doubt you\u0027ll see many change requests to the meta subject CN parsing code in the long term, if at all.\n\nThat\u0027s not what I\u0027m asking for, I\u0027m asking for us to consider implementations that don\u0027t require special handling of CommonName that might be different, because we have to maintain an option, a separate set of tests, and it makes that path incompatible with other paths.  It implies that every company is putting in their own \"flavor\" of certificates in at compile time, which given there are standards for this kind of thing, and this is Redfish, there\u0027s 3 CommonName modes already supported by Redfish as a standard, it isn\u0027t great to be adding a company specific OEM path that isn\u0027t documented.  If we can avoid it, we should.  If we can\u0027t avoid it, so be it, but I\u0027d like to at least discuss options that don\u0027t involve needing bmcweb to maintain special knowledge of how meta certificates are structured.",
      "parentUuid": "bd65829c_70d4ca84",
      "range": {
        "startLine": 84,
        "startChar": 57,
        "endLine": 84,
        "endChar": 60
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca980b3a_e04fde58",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2024-04-16T16:08:16Z",
      "side": 1,
      "message": "\u003e \u003e Unfortunately it\u0027s common to have Subject CNs like \"user:kawajiri/hostname.facebook.com` (where the hostname part is irrelevant and would produce sth like \"user_kawmarco_hostname_facebook.com\").\n\u003e\n\u003e Why is this a problem?\n\nFor example, an user identity can be in a number of hosts (I tend to have 2 to 3 development servers running, so three distinct hostnames), which means we\u0027d have several system users for the same logical identity and have to install users for each user+host combination (so the total number of users would multiply accordingly)\n\n\n\u003e And require no changes to anything, including bmcweb, considering that unix allows colons, forward slashes and periods in their names.\n\nThe slash and colon characters are the troublesome ones, e.g. from a test bletchley unit:\n```\n# useradd \u0027user:with/special.characters\u0027\nuseradd: invalid user name \u0027user:with/special.characters\u0027: use --badname to ignore\n# useradd \u0027user_with/special.characters\u0027\nuseradd: invalid user name \u0027user_with/special.characters\u0027: use --badname to ignore\n# useradd \u0027user_with_special.characters\u0027 # succeeds\n```\n\n\n\u003e I\u0027m asking for us to consider implementations that don\u0027t require special handling of CommonName that might be different\n\nThat\u0027s a fair point, our \"the identity we care about is a substring of the Subject CN according to this set of rules\" use case doesn\u0027t fit existing  `CertificateMappingAttribute` matching modes.\n\nI don\u0027t have context on proposing redfish standard changes, but I suppose we can try proposing a redfish standard change so `CertificateMappingAttribute` has a regex pattern matching mode or a configurable `sed`-like preprocessing step as a long-term effort.",
      "parentUuid": "0f26854b_85289451",
      "range": {
        "startLine": 84,
        "startChar": 57,
        "endLine": 84,
        "endChar": 60
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "106fdf40_01321bb6",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-16T16:42:35Z",
      "side": 1,
      "message": "\u003e \u003e \u003e Unfortunately it\u0027s common to have Subject CNs like \"user:kawajiri/hostname.facebook.com` (where the hostname part is irrelevant and would produce sth like \"user_kawmarco_hostname_facebook.com\").\n\u003e \u003e\n\u003e \u003e Why is this a problem?\n\u003e \n\u003e For example, an user identity can be in a number of hosts (I tend to have 2 to 3 development servers running, so three distinct hostnames), which means we\u0027d have several system users for the same logical identity and have to install users for each user+host combination (so the total number of users would multiply accordingly)\n\n\"the hostname part is irrelevant\" worries me a little from a security perspective;  In that case, shouldn\u0027t we be matching that \"hostname.facebook.com\" matches THIS bmcs hostname?  Otherwise a certificate issued against any BMC could be used to log into any machine that has your user on it, not just the one the CA intended?\n\n\u003e \n\u003e \n\u003e \u003e And require no changes to anything, including bmcweb, considering that unix allows colons, forward slashes and periods in their names.\n\u003e \n\u003e The slash and colon characters are the troublesome ones, e.g. from a test bletchley unit:\n\u003e ```\n\u003e # useradd \u0027user:with/special.characters\u0027\n\u003e useradd: invalid user name \u0027user:with/special.characters\u0027: use --badname to ignore\n\u003e # useradd \u0027user_with/special.characters\u0027\n\u003e useradd: invalid user name \u0027user_with/special.characters\u0027: use --badname to ignore\n\u003e # useradd \u0027user_with_special.characters\u0027 # succeeds\n\u003e ```\n\nWhat happens when you use --badname?  I was looking at the unix documentation, not the docs for useradd.\n\n\u003e \n\u003e \n\u003e \u003e I\u0027m asking for us to consider implementations that don\u0027t require special handling of CommonName that might be different\n\u003e \n\u003e That\u0027s a fair point, our \"the identity we care about is a substring of the Subject CN according to this set of rules\" use case doesn\u0027t fit existing  `CertificateMappingAttribute` matching modes.\n\u003e \n\u003e I don\u0027t have context on proposing redfish standard changes, but I suppose we can try proposing a redfish standard change so `CertificateMappingAttribute` has a regex pattern matching mode or a configurable `sed`-like preprocessing step as a long-term effort.\n\nThat seems like overkill, especially when UPN already exists.  I doubt anyone but facebook is going to use this unique scheme.",
      "parentUuid": "ca980b3a_e04fde58",
      "range": {
        "startLine": 84,
        "startChar": 57,
        "endLine": 84,
        "endChar": 60
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6564f49_89334703",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2024-04-16T17:57:28Z",
      "side": 1,
      "message": "\u003e What happens when you use --badname? I was looking at the unix documentation, not the docs for useradd.\n\nStill fails for the same cases, but with a different error message:\n```\n# useradd \u0027user:with_special.characters\u0027 --badname\nuseradd: failure while writing changes to /etc/passwd\n```",
      "parentUuid": "106fdf40_01321bb6",
      "range": {
        "startLine": 84,
        "startChar": 57,
        "endLine": 84,
        "endChar": 60
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de0d5eb1_73b214a1",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2024-04-16T18:20:54Z",
      "side": 1,
      "message": "\u003e \"the hostname part is irrelevant\" worries me a little from a security perspective; In that case, shouldn\u0027t we be matching that \"hostname.facebook.com\" matches THIS bmcs hostname?\n\nNot sure I understood the question, the `hostname.facebook.com` bit is in the client certificate (e.g. the one from my development server). \n\nUsing the `user_kawmarco` as a user with Administrator role as an example, the BMC should only grant access to a privileged endpoint/action if:\n\n1. The provided client certificate is valid and trusted (using the Meta CAs installed in the BMC)\n2. The user (`user_kawajiri`) parsed from the Subject CN in the client certificate (`user:kawajiri/hostname.facebook.com`, `hostname.facebook.com` is the client hostname) is an Administrator user in the BMC\n\n\u003e Otherwise a certificate issued against any BMC could be used to log into any machine that has your user on it, not just the one the CA intended?\n\nWe only deploy host client certificates to BMCs, so they would only be able to identify as a BMC host (e.g. `Subject CN\u003dhost:/a_bmc.facebook.com`) to other systems.\n\nRegular `user:` client certificates in servers have `400` permissions attached to them (so an attacker would have to escalate privileges to be able to use e.g. my user certificate to impersonate me).",
      "parentUuid": "c6564f49_89334703",
      "range": {
        "startLine": 84,
        "startChar": 57,
        "endLine": 84,
        "endChar": 60
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9844bfa5_f214d911",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-06-10T18:35:53Z",
      "side": 1,
      "message": "\u003e \u003e \"the hostname part is irrelevant\" worries me a little from a security perspective; In that case, shouldn\u0027t we be matching that \"hostname.facebook.com\" matches THIS bmcs hostname?\n\u003e \n\u003e Not sure I understood the question, the `hostname.facebook.com` bit is in the client certificate (e.g. the one from my development server). \n\u003e \n\u003e Using the `user_kawmarco` as a user with Administrator role as an example, the BMC should only grant access to a privileged endpoint/action if:\n\u003e \n\u003e 1. The provided client certificate is valid and trusted (using the Meta CAs installed in the BMC)\n\u003e 2. The user (`user_kawajiri`) parsed from the Subject CN in the client certificate (`user:kawajiri/hostname.facebook.com`, `hostname.facebook.com` is the client hostname) is an Administrator user in the BMC\n\u003e \n\nRight, so what if the certificate says \"user:kawajiri/hostname.mydomainname.com\"?\n\nThis is some of the awkward part about this stuff that I\u0027d really like to get to the bottom of, I don\u0027t particularly want to own code that\u0027s doing security checks that doesn\u0027t have intent documented, or have assigned reviewers for when the code needs to change.  I get what you\u0027re trying to accomplish is to just connect existing security certs that follow their own format, but I\u0027m struggling a little bit with the responsibility breakdown here, as I don\u0027t see anyone from meta set up as a bmcweb reviewer;  I\u0027m happy to own the simple \"parse a string and pull out a user that\u0027s then posted to pam\", because that\u0027s simple enough and I understand it.\nI\u0027m worried about owning something more complex where we\u0027re doing actual manipulation of the string between the common name and pam in bmcweb.\n\nAny thoughts on how we should approach maintainership of that?\n\n\u003e \u003e Otherwise a certificate issued against any BMC could be used to log into any machine that has your user on it, not just the one the CA intended?\n\u003e \n\u003e We only deploy host client certificates to BMCs, so they would only be able to identify as a BMC host (e.g. `Subject CN\u003dhost:/a_bmc.facebook.com`) to other systems.\n\nRight, but as written, any bmc cert can now talk to any other bmc, because we\u0027re effectively ignoring the hostname.  That\u0027s not a common security model, but if we get that part explicitly written into the design that we don\u0027t care about hostname, and that any issued certificate can log into any system, then I\u0027m fine with it, I just want to make sure that intent is written down.\n\n\u003e \n\u003e Regular `user:` client certificates in servers have `400` permissions attached to them (so an attacker would have to escalate privileges to be able to use e.g. my user certificate to impersonate me).\n\nIn the implementation you\u0027re proposing they don\u0027t have 400 set.  bmcweb runs as root, and I don\u0027t think there\u0027s anything like what you describe in this doc.",
      "parentUuid": "de0d5eb1_73b214a1",
      "range": {
        "startLine": 84,
        "startChar": 57,
        "endLine": 84,
        "endChar": 60
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2fd32c2_2de2140f",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-04T23:49:41Z",
      "side": 1,
      "message": "@Ed I don\u0027t know what unix documentation you were looking at, but  `:` is the primary separaor of the passwd family of files and three is no provision to escape it.  It\u0027s implicitly documented in `passwd(5)` `shadow(5)` and family in the Linux man pages.   Beyond this, it\u0027s recommended to not contain capital letters likely because of historical login logic to set TTY mode for case translation for uppercase only terminals. (and yes I have used one of these 6 bit terminals).\n\nLooking at the PAM man pages, I found the `PAM_RHOST` field, and this seems ideal to represent this part of the identity.\n\nlooking further, I realized that any PAM module is allowed to change the PAM context including the `PAM_USER` and applications are explicitly required to query each time they are called.   this means that the decision to strip this host from the user can tin a the PAM stack instead of bmcweb and allows the stack to determine if or when to strip such data.  This could also be extended to substitute the forbidden `:` character.\n\n(I actually was looking if pam_unix allowed an alternative passwd file but this is not the case :( )",
      "parentUuid": "9844bfa5_f214d911",
      "range": {
        "startLine": 84,
        "startChar": 57,
        "endLine": 84,
        "endChar": 60
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3e59763_3e5d42a4",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-07T00:31:11Z",
      "side": 1,
      "message": "\u003e @Ed I don\u0027t know what unix documentation you were looking at, but  `:` is the primary separaor of the passwd family of files and three is no provision to escape it.  It\u0027s implicitly documented in `passwd(5)` `shadow(5)` and family in the Linux man pages.\n\nyep, you\u0027re right, the : would need some level of escaping, but the thought is that\u0027s something we could document more generally, which shifts the responsibility of creating correct users onto an individual system, rather than having to explicitly parse a custom cert.\n\n\n\u003e Beyond this, it\u0027s recommended to not contain capital letters likely because of historical login logic to set TTY mode for case translation for uppercase only terminals. (and yes I have used one of these 6 bit terminals).\n\nbmc doesn\u0027t have \"historical logic logic\", so I think we\u0027re safe there.\n\n\n\u003e \n\u003e Looking at the PAM man pages, I found the `PAM_RHOST` field, and this seems ideal to represent this part of the identity.\n\u003e \n\u003e looking further, I realized that any PAM module is allowed to change the PAM context including the `PAM_USER` and applications are explicitly required to query each time they are called.   this means that the decision to strip this host from the user can tin a the PAM stack instead of bmcweb and allows the stack to determine if or when to strip such data.  This could also be extended to substitute the forbidden `:` character.\n\u003e \n\u003e (I actually was looking if pam_unix allowed an alternative passwd file but this is not the case :( )\n\nI suspect the part you\u0027re missing in the above is that there\u0027s no connection between MTLS auth and pam.  MTLS authenticates using root certs.  PAM authenticates via a username/password.  In theory we could treat the common name as a \"password\", but that seems complex and error prone.",
      "parentUuid": "d2fd32c2_2de2140f",
      "range": {
        "startLine": 84,
        "startChar": 57,
        "endLine": 84,
        "endChar": 60
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33f9d699_06a7d5cb",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-17T00:50:28Z",
      "side": 1,
      "message": "Agree that historical restrictions on case are not relevant just giving background for justification of the man page note.\n\nI have not studied how we obtain the account information from the \nfiles PAM supports but ignore the password.   I would have thought a sufficient rule before checking the password would have worked but if mTLS is already going directly to dbua then this makes less sense.\n\nIf we continue to parse the CN into type, user, and hostname it seems like validation or ignoring if any should be outside the core parsing (without studying the implications.\n\nRegarding how domain is escaped, DNS has a well established mapping from alpha num underscore to utf, so it\u0027s just separators.  I have no idea if their DNS would include such names, and if not expect the escaped vs human name in the CN (or scan a scam for limit until support is added).",
      "parentUuid": "f3e59763_3e5d42a4",
      "range": {
        "startLine": 84,
        "startChar": 57,
        "endLine": 84,
        "endChar": 60
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d010504f_6403b0b1",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-04T23:49:41Z",
      "side": 1,
      "message": "the standard redfish administrator role can modify these, right?   do you plan to only give administrator to these service users and restrict the role with an alternative recommended administrator?",
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27af00d7_feb870d3",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-07T00:31:11Z",
      "side": 1,
      "message": "What you\u0027re asking for is essentially a modifyable and flexible privilege registry, which we don\u0027t have today, and I don\u0027t believe this design is planning on changing.  Today we grab the DMTF one out of maintainers just not having the bandwidth to audit the various privilege types, and the lack of use in practice.\n\nI would expect this design to use the DMTF privilege registry.",
      "parentUuid": "d010504f_6403b0b1",
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99469292_5e5b5b88",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-15T15:59:23Z",
      "side": 1,
      "message": "?  Usernames are passed to pam as is.  There\u0027s no need to translate at all.",
      "range": {
        "startLine": 106,
        "startChar": 4,
        "endLine": 106,
        "endChar": 64
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2502fc7c_9a77f94f",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2024-04-16T16:08:16Z",
      "side": 1,
      "message": "I don\u0027t have much context on PAM, but what I meant here was doing the username translation (e.g. `user:kawmarco/dev123.facebook.com` -\u003e `user_kawmarco`) fully in PAM instead of maintaining logic in `bmcweb`",
      "parentUuid": "99469292_5e5b5b88",
      "range": {
        "startLine": 106,
        "startChar": 4,
        "endLine": 106,
        "endChar": 64
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3697800a_b004f352",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-16T16:42:35Z",
      "side": 1,
      "message": "Ah, gotcha.",
      "parentUuid": "2502fc7c_9a77f94f",
      "range": {
        "startLine": 106,
        "startChar": 4,
        "endLine": 106,
        "endChar": 64
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "343ab08c_20d90170",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2024-04-16T18:20:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3697800a_b004f352",
      "range": {
        "startLine": 106,
        "startChar": 4,
        "endLine": 106,
        "endChar": 64
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "559c51b5_9e7b082c",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-04T23:49:41Z",
      "side": 1,
      "message": "why not?   it\u0027s a generic C string, and the memory is statically shared,(do not free do not overwrite notes on all API)",
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de2a20d5_facc2dcf",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-04-15T15:59:23Z",
      "side": 1,
      "message": "Can we add:\n\nEscaping common name using a fixed set of rules (what we talked about and discounted above).\n\nMatching common name based on exact username matches (including special characters passed to DBus).\n\nAdding a \"CertificateName\" or \"CommonName\" parameter to user creation in phosphor-user-manager that bmcweb can use to match a certificate to a user.  In theory this means that folks can just encode \"this is what my CA calls this user\" and we don\u0027t have to worry about any implementation specific details.\n\nEnforcing Redfish as a standard, and just not allowing code upstream that implements non-standard conforming Redfish implementations.  (At a design level, this is something we should at least discuss, why this is different than the other OEM redfish stuff we normally would say \"Talk to DMTF first\").  I do think this is different, but we should at least write it down.",
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e24ebd4_cd3834b3",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2024-04-16T16:08:16Z",
      "side": 1,
      "message": "Fair, will add üëç",
      "parentUuid": "de2a20d5_facc2dcf",
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cd6d28c_e25d8b63",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-04T23:49:41Z",
      "side": 1,
      "message": "another option is to generate an oauth token pinned to the mtls certificate but this would require client changes in addition to additional infrastructure, but each renewal could verify the permissions in the DB.  it would not require the account service in the machine instead roles or permissions are communicated in the token.  I also haven\u0027t explored the redfish forum updates and guidance since the add of oauth and sessions are not available imo.\n\nI don\u0027t know if this meets your local validation rules the machine could rekey its trust with the ca.\n\n\nhttps://gerrit.openbmc.org/c/openbmc/docs/+/58313",
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acc72118_d5dae047",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-07T00:31:11Z",
      "side": 1,
      "message": "\u003e another option is to generate an oauth token pinned to the mtls certificate but this would require client changes in addition to additional infrastructure, but each renewal could verify the permissions in the DB.  \n\nHaving a centralized global DB would someone defeat the purpose of MTLS, which is generally implemented as distributed.\n\n\u003e it would not require the account service in the machine instead roles or permissions are communicated in the token.  I also haven\u0027t explored the redfish forum updates and guidance since the add of oauth and sessions are not available imo.\n\u003e \n\u003e I don\u0027t know if this meets your local validation rules the machine could rekey its trust with the ca.\n\u003e \n\u003e \n\u003e https://gerrit.openbmc.org/c/openbmc/docs/+/58313",
      "parentUuid": "3cd6d28c_e25d8b63",
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf7cb0a1_e4622038",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-08-17T00:50:28Z",
      "side": 1,
      "message": "the text said their source of truth was a DB (see line 90-91 of PS 3)",
      "parentUuid": "acc72118_d5dae047",
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0da2fdf4_03bdc223",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-04-12T16:01:57Z",
      "side": 1,
      "message": "nit: spelling? organizational\n\n(Unless this is a British English spelling I\u0027m not familiar with ;) )",
      "range": {
        "startLine": 119,
        "startChar": 4,
        "endLine": 119,
        "endChar": 19
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c4277a5_1d4a2437",
        "filename": "designs/oem/meta/meta-inc-mtls-on-bmcweb.md",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1001910
      },
      "writtenOn": "2024-04-15T15:34:54Z",
      "side": 1,
      "message": "Undecided Gdocs-Markdown-Export spelling, will fix :-P",
      "parentUuid": "0da2fdf4_03bdc223",
      "range": {
        "startLine": 119,
        "startChar": 4,
        "endLine": 119,
        "endChar": 19
      },
      "revId": "1ce6e6ff65451bacc4d09bad68377b94f6b08dec",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}