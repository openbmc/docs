{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3f4a7605_740e1923",
        "filename": "designs/pim-to-entity-manager.md",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1000331
      },
      "writtenOn": "2022-09-15T14:28:23Z",
      "side": 1,
      "message": "What is the difference between a FRU D-Bus object and in inventory D-Bus object?  Were these the same object under PIM?",
      "range": {
        "startLine": 66,
        "startChar": 1,
        "endLine": 67,
        "endChar": 53
      },
      "revId": "c9f40b99d8b68a81e7cf14766d0d45ffcc82698b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43f982ef_6462cb11",
        "filename": "designs/pim-to-entity-manager.md",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1000338
      },
      "writtenOn": "2022-09-19T10:06:32Z",
      "side": 1,
      "message": "Yes, they were the same object under PIM. From my viewpoint, a FRU D-Bus object contains data that EM can probe against - For ex: CCIN. In case of the VPD collection app, this object would contain the VPD data interface and properties that reflect the real VPD data.",
      "parentUuid": "3f4a7605_740e1923",
      "range": {
        "startLine": 66,
        "startChar": 1,
        "endLine": 67,
        "endChar": 53
      },
      "revId": "c9f40b99d8b68a81e7cf14766d0d45ffcc82698b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f519231e_99578182",
        "filename": "designs/pim-to-entity-manager.md",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1000331
      },
      "writtenOn": "2022-09-15T14:28:23Z",
      "side": 1,
      "message": "Can you provide more info on this, or is there some documentation we could look at?\n\nI appreciate you mentioning the PSU app, but I don\u0027t understand the proposed design.",
      "range": {
        "startLine": 92,
        "startChar": 13,
        "endLine": 94,
        "endChar": 23
      },
      "revId": "c9f40b99d8b68a81e7cf14766d0d45ffcc82698b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d6b4ad0_e92d6e13",
        "filename": "designs/pim-to-entity-manager.md",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1000338
      },
      "writtenOn": "2022-09-19T10:06:32Z",
      "side": 1,
      "message": "Something like the \"detection daemon\" that is described here: https://github.com/openbmc/entity-manager/#implementation. This daemon would be, say the vpd-manager for FRUs detected via their EEPROMs.\n\nI guess in cases where multiple daemons do this detection, it would get tricky to keep them in \"sync\"",
      "parentUuid": "f519231e_99578182",
      "range": {
        "startLine": 92,
        "startChar": 13,
        "endLine": 94,
        "endChar": 23
      },
      "revId": "c9f40b99d8b68a81e7cf14766d0d45ffcc82698b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd1f45e5_7b90f44d",
        "filename": "designs/pim-to-entity-manager.md",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1000331
      },
      "writtenOn": "2022-09-15T14:28:23Z",
      "side": 1,
      "message": "The phosphor-regulators application has system-specific JSON files that contain D-Bus object paths to inventory items.\n\nThese object paths are required for:\n* Obtaining VPD from a specific inventory item, such as the VDD VRM, CPU0, a Flett card, or the backplane containing the BMC.\n* Obtaining the presence of a specific inventory item, such as the VIO VRM, CPU3, a Flett card, etc.\n* Calling out the correct FRU for errors.  The \"CALLOUT_INVENTORY_PATH\" additional day keyword is set to the inventory path of the failing inventory item/FRU.\n\nThere is no requirement for a particular format of the object paths, such as hierarchical or how PIM defined them.\n\nHowever, the object paths need to be static.  The D-Bus object path to a specific VRM, CPU, or backplane needs to stay the same after a system has been brought up.  Otherwise they cannot be specified in the regulators JSON file.\n\nMatt Spinler mentioned that in some cases EM paths have some sort of \u0027$index\u0027 in them.  So the path to the FRU would be dynamic depending on the order JSON is parsed in or something.  However, he mentioned for some work he did he used the location code instead of the index so that the inventory path was static.\n\nIf this is not possible, then how can applications get VPD and presence for a known entity, like the VDD VRM or CPU3?  It is not sufficient to do a mapper query to find all VRM objects; we need to know which one it is.",
      "range": {
        "startLine": 119,
        "startChar": 2,
        "endLine": 121,
        "endChar": 24
      },
      "revId": "c9f40b99d8b68a81e7cf14766d0d45ffcc82698b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca118dc7_618f8035",
        "filename": "designs/pim-to-entity-manager.md",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-09-15T14:30:47Z",
      "side": 1,
      "message": "what if you used the unexpanded location code instead, like P1-C0?",
      "parentUuid": "cd1f45e5_7b90f44d",
      "range": {
        "startLine": 119,
        "startChar": 2,
        "endLine": 121,
        "endChar": 24
      },
      "revId": "c9f40b99d8b68a81e7cf14766d0d45ffcc82698b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "818bcfd6_f3b3c911",
        "filename": "designs/pim-to-entity-manager.md",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-09-15T22:09:27Z",
      "side": 1,
      "message": "\u003e If this is not possible, then how can applications get VPD and presence for a known entity, like the VDD VRM or CPU3?  It is not sufficient to do a mapper query to find all VRM objects; we need to know which one it is.\n\nThe information needs to be structured such that the objects at each end of the association tell you how each is addressed relative to the other. This same information is necessary to construct deterministic paths, so there\u0027s no loss of functionality. With this the specific topology can be constructed by traversing the association graph. The mapper APIs need some more work to make this efficient, but there has already been discussion (at least in the TOF) about this.\n\nThis design document is relevant: https://gerrit.openbmc.org/c/openbmc/docs/+/54205",
      "parentUuid": "ca118dc7_618f8035",
      "range": {
        "startLine": 119,
        "startChar": 2,
        "endLine": 121,
        "endChar": 24
      },
      "revId": "c9f40b99d8b68a81e7cf14766d0d45ffcc82698b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9be7fe38_d8f3932e",
        "filename": "designs/pim-to-entity-manager.md",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1000338
      },
      "writtenOn": "2022-09-19T10:06:32Z",
      "side": 1,
      "message": "I\u0027m with Matt on this one, we need to use \"something\" to uniquely identify object instances. For IBM systems, using the location code makes most sense (to me).",
      "parentUuid": "818bcfd6_f3b3c911",
      "range": {
        "startLine": 119,
        "startChar": 2,
        "endLine": 121,
        "endChar": 24
      },
      "revId": "c9f40b99d8b68a81e7cf14766d0d45ffcc82698b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "407abdbd_e03fd40b",
        "filename": "designs/pim-to-entity-manager.md",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-09-19T10:52:36Z",
      "side": 1,
      "message": "How is the location code determined?",
      "parentUuid": "9be7fe38_d8f3932e",
      "range": {
        "startLine": 119,
        "startChar": 2,
        "endLine": 121,
        "endChar": 24
      },
      "revId": "c9f40b99d8b68a81e7cf14766d0d45ffcc82698b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecbe8c4e_0397c718",
        "filename": "designs/pim-to-entity-manager.md",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1000338
      },
      "writtenOn": "2022-09-20T04:59:22Z",
      "side": 1,
      "message": "That does not come from the VPD, unfortunately (it is attached to an instance of a part by system design). Some code would need to know this inherently based on the system type, probably the FRU detection daemon.\n\nHaving EM directly determine location code would not work, IMO. The same part can exist at different locations on two different systems.\n\nAs an alternative:\n\nIs there a way to tie two EM configs together somehow? Here\u0027s a case I\u0027m thinking about:\n\npart P exists on two different backplanes B1 and B2, but at different location code. Can the EM config for B1 and B2 expose a different \"slot\" location for the part? And can the config for P pick up that location code and then expose the location as its own? Hopefully that made sense ðŸ˜Š",
      "parentUuid": "407abdbd_e03fd40b",
      "range": {
        "startLine": 119,
        "startChar": 2,
        "endLine": 121,
        "endChar": 24
      },
      "revId": "c9f40b99d8b68a81e7cf14766d0d45ffcc82698b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "122006a4_f77da45c",
        "filename": "designs/pim-to-entity-manager.md",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2022-09-20T13:53:28Z",
      "side": 1,
      "message": "EM does have a concept of Connectors, used now for some sort of fan stuff. Kinda like in the MRW, aren\u0027t location codes within the card a  constant, so maybe we could do the same, using the connectors to hold location codes?\n\nFor example if a card has T0 and T1 location codes on it, and plugs into one parent connector with a location of C0, and another with a parent of C3, then they could be assembled into C0-T0 and C3-T0 depending on what its plugged into?",
      "parentUuid": "ecbe8c4e_0397c718",
      "range": {
        "startLine": 119,
        "startChar": 2,
        "endLine": 121,
        "endChar": 24
      },
      "revId": "c9f40b99d8b68a81e7cf14766d0d45ffcc82698b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68a88e19_5bd6c13a",
        "filename": "designs/pim-to-entity-manager.md",
        "patchSetId": 2
      },
      "lineNbr": 130,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2022-09-20T07:38:10Z",
      "side": 1,
      "message": "Could you expain what are the disadvantages of PIM?",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 130,
        "endChar": 65
      },
      "revId": "c9f40b99d8b68a81e7cf14766d0d45ffcc82698b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}