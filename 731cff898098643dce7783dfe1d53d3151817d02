{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8e100638_ec4876cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-08T00:35:49Z",
      "side": 1,
      "message": "Inspired by discussion on https://gerrit.openbmc.org/c/openbmc/phosphor-led-sysfs/+/60665",
      "revId": "731cff898098643dce7783dfe1d53d3151817d02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebca63a8_aabc7e7e",
        "filename": "style/cpp/.clang-format",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-02-08T04:05:05Z",
      "side": 1,
      "message": "I would definitely prefer Signature here.  The readability on OuterScope is rather poor in my opinion.",
      "revId": "731cff898098643dce7783dfe1d53d3151817d02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e807c34d_d6577839",
        "filename": "style/cpp/.clang-format",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-02-13T19:23:22Z",
      "side": 1,
      "message": "In this case, in my opinion, the direct readability takes a lower precedence to code reviews and diffs.  For long lambdas, with Signature set on this, any change to the lambda signature would cause a large diff, as the code below it got re-wrapped in odd ways, which would show up as many lines of change for what amounted to a minor change.  This more than once caused bugs, because we couldn\u0027t effectively review what had changed.\n\nIt should also be noted that the clang-format documentation specifically calls out \"callback-heavy code\" of which I think most asio daemons would qualify.\n\nIdeally there would be an \"OuterScope + 1\" setting, which would give both readability through indent, as well as clean diffs, but so far as I know, that doesn\u0027t exist.\n\nI\u0027m in support of this patchset as it\u0027s written.",
      "parentUuid": "ebca63a8_aabc7e7e",
      "revId": "731cff898098643dce7783dfe1d53d3151817d02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57e74b2f_605b0fc9",
        "filename": "style/cpp/.clang-format",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-02-14T01:54:59Z",
      "side": 1,
      "message": "\u003e For long lambdas, with Signature set on this, any change to the lambda signature would cause a large diff, as the code below it got re-wrapped in odd ways, which would show up as many lines of change for what amounted to a minor change.\n\nI\u0027m trying to reconcile this with the how the documentation suggests it works.  Why does a signature change cause the whole lambda to be re-wrapped?  The indentation level of the code itself doesn\u0027t seem like it should change based on this:\n\n\u003e Signature (the default) causes the lambda body to be indented one additional level relative to the indentation level of the signature.  OuterScope forces the lambda body to be indented one additional level relative to the parent scope containing the lambda signature.\n\nIt seems like the question is only about if the body gets indented 2 levels or 1.",
      "parentUuid": "e807c34d_d6577839",
      "revId": "731cff898098643dce7783dfe1d53d3151817d02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8964149e_bffe97e8",
        "filename": "style/cpp/.clang-format",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-02-14T01:59:19Z",
      "side": 1,
      "message": "Alright, I found an example by changing the behavior in bmcweb:\n\n```\n--- a/http/http_connection.hpp\n+++ b/http/http_connection.hpp\n@@ -166,12 +166,12 @@ class Connection :\n             adaptor.async_handshake(boost::asio::ssl::stream_base::server,\n                                     [this, self(shared_from_this())](\n                                         const boost::system::error_code\u0026 ec) {\n-                if (ec)\n-                {\n-                    return;\n-                }\n-                doReadHeaders();\n-            });\n+                                        if (ec)\n+                                        {\n+                                            return;\n+                                        }\n+                                        doReadHeaders();\n+                                    });\n```\n\nIt isn\u0027t as simple as 1 vs 2 indentation levels.  I still think it is really ugly to read, but I also understand about the indentation being over-indented and causing high diff churn.",
      "parentUuid": "57e74b2f_605b0fc9",
      "revId": "731cff898098643dce7783dfe1d53d3151817d02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdc515dc_51992503",
        "filename": "style/cpp/.clang-format",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-02-14T02:07:33Z",
      "side": 1,
      "message": "I applied this to sdbusplus to see how bad it looks and it isn\u0027t totally awful even though I don\u0027t like it.  There are a number of cases though where you can\u0027t even differentiate the body of the lambda from other code because there ends up being no indentation level.  It mostly affects the ASIO code there as well.",
      "parentUuid": "8964149e_bffe97e8",
      "revId": "731cff898098643dce7783dfe1d53d3151817d02",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}