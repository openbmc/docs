{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0ec28142_3a3dcb63",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 241,
      "author": {
        "id": 1001516
      },
      "writtenOn": "2025-05-13T10:31:02Z",
      "side": 1,
      "message": "Are we planning to use TPM objects hosted by smbios-mdr to read the device info like version?. Or it needs to be fetched from software.version from device inventory?\n\nWe need to update the version in component integrity, for devices which supports SPDM protocol it\u0027s based on requester and responder version.\n\nhttps://github.com/openbmc/smbios-mdr/commit/5af42bbf374907888c09d7aaf2cbf74d74c7707d",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8d2ba1d_8322f0de",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 241,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-05-29T10:20:45Z",
      "side": 1,
      "message": "Nope, IBM systems don\u0027t use SMBIOS. Our BMC has the capability to detect it and host it as Inventory object.Thje version can be read by vpd collecting daemons like openpower-vpd-parser. Usually the inventory objects are hosted by phosphor-inventory-manager or entity-manager.",
      "parentUuid": "0ec28142_3a3dcb63",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3704a4e7_d14336f3",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 248,
      "author": {
        "id": 1001516
      },
      "writtenOn": "2025-05-13T10:31:02Z",
      "side": 1,
      "message": "DMTF libspdm has support for mctp, PCIe DOE, TCP(https://github.com/DMTF/libspdm/issues/3018), are we going to add new bindings for TPM in dmtf libspdm?",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "974e7888_f28be778",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 248,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-05-29T10:20:45Z",
      "side": 1,
      "message": "Nope, we don\u0027t need a transport binding for TPM in libspdm.\n\nDaemons can talk to TPM via TPM Software Stack (TSS) - its is a software specification that provides a standard API for accessing the functions of the TPM.",
      "parentUuid": "3704a4e7_d14336f3",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d7faab4_1f70bfd8",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 252,
      "author": {
        "id": 1001516
      },
      "writtenOn": "2025-05-13T10:31:02Z",
      "side": 1,
      "message": "Similar as above, Since design will use spdm messages for other transports, if we are planning to use raw APIs directly i think we will not be able to leverage lot of stuff provided by DMTF libspdm and we will have deviation and exceptions for TPM in the current design.",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a1ea04d_9636102d",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 252,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-05-29T10:20:45Z",
      "side": 1,
      "message": "\u003e Similar as above, Since design will use spdm messages for other transports, if we are planning to use raw APIs directly i think we will not be able to leverage lot of stuff provided by DMTF libspdm\n\nThat\u0027s not true, we  use the TSS api\u0027s to only get the self measurements of BMC. The remote endpoints measurements are still obtained using SPDM protocol over TCP (leveraging the transport bindings in libspdm).\n\n\u003e and we will have deviation and exceptions for TPM in the current design.\n\nI don\u0027t see this as a deviation, rather it is an enhancement that enables spdm clients to attest the BMC itself (not just the devices connected).",
      "parentUuid": "5d7faab4_1f70bfd8",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdd0e8bc_55ddbf26",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 252,
      "author": {
        "id": 1001516
      },
      "writtenOn": "2025-05-30T04:55:04Z",
      "side": 1,
      "message": "The current SPDM design in OpenBMC positions SPDM as the requester, with the responsibility for measurement response verification delegated to the client. All SPDM transactions are transport-agnostic and utilize the libspdm requester APIs directly which includes\n\n- Discover devices based on transport protocols (e.g., PCIe, MCTP) and create - corresponding D-Bus objects.\n- Register each transport and implement its specific functions, integrating them with DMTF libspdm callbacks.\n- Initialize the SPDM context and define requester capabilities.\nUse DMTF libspdm APIs to perform VCA negotiation, and retrieve certificates and measurements.\n- Update the D-Bus call with the certificate and measurement responses.\n\nMy question is: how do we plan to incorporate TSS APIs to support BMC self-measurement? Additionally, how will the BMC be represented as an SPDM endpoint in this architecture?",
      "parentUuid": "7a1ea04d_9636102d",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd2f718e_e3294825",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 252,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-06-04T02:43:10Z",
      "side": 1,
      "message": "I agree with Chinmay here.\n\n- How much code will be shared between SPDM and local-TPM paths?  It seems like low to me, so it probably should be in a separate daemon?  That separate daemon likely should be enabled with a different PACKAGECONFIG because there are going to be systems that will want TPM support but not have any SPDM devices.\n\n- It seems like the Redfish schemas here have a distinct reflection of SPDM vs TPM signatures.  See ComponentIntegrity schema for example.  Do we have the appropriate content in the dbus objects to allow bmcweb to appropriately populate the SPDM vs TPM fields in the response?  We should not confuse Redfish clients to thinking they\u0027re all SPDM since the standard treats them differently.",
      "parentUuid": "fdd0e8bc_55ddbf26",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7938f53d_990d81f1",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 252,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-06-04T08:56:58Z",
      "side": 1,
      "message": "\u003eHow much code will be shared between SPDM and local-TPM paths?\n\nI also think it will be very minimal between \n\nSPDM as a Requester\n\nSPDM as a Responder\n\nNote: The Requester and Responder handle completely different sets of messages.\nFor example:\n\nThe Requester sends commands like GET_VERSION and GET_MEASUREMENTS.\n\nThe Responder handles corresponding responses like VERSION and MEASUREMENTS.\n\nAdditionally, the TPM will be involved when SPDM operates in Responder mode, as it will be used to fetch and provide stored measurements.\n\nI agree that we should implement the SPDM Responder as a separate daemon. This separation makes sense because the Responder needs to interact with the TPM for measurements, and by using a plugin-based architecture, we maintain flexibility. We can easily support different methods of storing and retrieving measurement data in the future not just limiting ourselves to TPM.",
      "parentUuid": "dd2f718e_e3294825",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57c7c601_57fc7dc1",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 252,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-06-10T08:59:58Z",
      "side": 1,
      "message": "\u003e My question is: how do we plan to incorporate TSS APIs to support BMC self-measurement? Additionally, how will the BMC be represented as an SPDM endpoint in this architecture?\n\nThe idea is, that the SPDM TCP responder would be sending the measurements from its local TPM to the SPDM requester using the SPDM commands like Get certificates/ Get Measurements. SPDM requester would validate the measurements and certificates using its own measurements from its local TPM or a CoRIM file. I plan on writing a separate commit that adds the responder function to the spdm daemon.\n\n\u003e How much code will be shared between SPDM and local-TPM paths? It seems like low to me, so it probably should be in a separate daemon? That separate daemon likely should be enabled with a different PACKAGECONFIG because there are going to be systems that will want TPM support but not have any SPDM devices.\n\nSure, we can make it a PACKAGECONFIG. I am not sure if it needs to be in a different daemon, but we can debate about it in the other document that i am splitting this self measurements into.\n\nThe way that I was imagining this would work is - that Each SPDM end point, after initialization, will have it own measurements read from its local TPM\u0027s (this will be the part that cannot be re-used by companies) - I can make this as part of PACKAGECONFIG.\n\nAnd any endpoint can act as SPDM requester/ SPDM responder - based on who initiates the TCP connect decides who acts as requester/responder (This is based on the SPDM over TCP binding spec)\n\n```\nTPM1 -\u003e SPDM Endpoint(requester \u0026 responder) \u003c\u003c--SPDM Protocol over TCP--\u003e\u003e SPDM Endpoint(requester \u0026 respnder) \u003c- TPM2\n```\n\n\u003e It seems like the Redfish schemas here have a distinct reflection of SPDM vs TPM signatures. See ComponentIntegrity schema for example. Do we have the appropriate content in the dbus objects to allow bmcweb to appropriately populate the SPDM vs TPM fields in the response? We should not confuse Redfish clients to thinking they\u0027re all SPDM since the standard treats them differently.\n\nSPDM is an application layer protocol that only takes care of moving the measurements and certificates via standard sets of commands, and also provides standard ways to attest the measurements, but the SPDM spec does not really mention how those measurements are generated [Look at Root of trust section in the spec], as per the spec those measurements can be provided by any Root of Trust (it\u0027s a TPM in this case). we are not doing any sort of signing/signature generation with TPM, From the redfish point of view the remote measurements (binary data) are still obtained via SPDM protocol, so we would still rely on SPDM based measurements to push the data via redfish (SPDM WG committee thought that this is not illegal and we can do it, I can confirm this with the redfish folks as well if needed)\n\n\u003e Additionally, the TPM will be involved when SPDM operates in Responder mode, as it will be used to fetch and provide stored measurements.\n\n\u003e I agree that we should implement the SPDM Responder as a separate daemon. This separation makes sense because the Responder needs to interact with the TPM for measurements, and by using a plugin-based architecture, we maintain flexibility. We can easily support different methods of storing and retrieving measurement data in the future not just limiting ourselves to TPM.\n\nI agree with you ratan, a responder can be its own daemon - but we should not assume that it\u0027s only responder who would need the TPM interaction - A requester could use a CoRIM or even use its self measurements to complete the attestation. But yes, the parts that interact with the TPM\u0027s can be made to conditionally compile using a PACKAGECONFIG so that companies that does not require this feature can turn off that function.I am splitting the self measurements and responder parts into a new commit. we can talk more about this there.",
      "parentUuid": "7938f53d_990d81f1",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43824d09_df9e91b4",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 330,
      "author": {
        "id": 1001516
      },
      "writtenOn": "2025-05-13T10:31:02Z",
      "side": 1,
      "message": "I think we have to call out here as well if we plan to add SPDM measurement based on TPM for BMC.",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3efd3d03_345fc913",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 330,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-05-29T10:20:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43824d09_df9e91b4",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01601abc_ac4d7443",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 359,
      "author": {
        "id": 1001516
      },
      "writtenOn": "2025-05-13T10:31:02Z",
      "side": 1,
      "message": "Since TrustedComponents represented are collectively included in TrustedComponent schema in redfish, we will have TPMs for host which may not need any measurements /certs and TPMs for Managers which will those.\n\nTPM for BMC does not come from smbios-mdr in your platform design?\n\n\nI am referring to this MR.\nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/79157/comment/f6d641f6_3a90d3b8/",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d1cef74_18cc9ba1",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 359,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-05-29T10:20:45Z",
      "side": 1,
      "message": "\u003e Since TrustedComponents represented are collectively included in TrustedComponent schema in redfish, we will have TPMs for host which may not need any measurements /certs and TPMs for Managers which will those.\n\u003e \n\nI don\u0027t understand what this means ? TPM is a chip that can be attached to anything, *NOT* just the host. And Inventory can be populated in so many ways, not just using *SMBIOS* as stated above. \n\n\u003e TPM for BMC does not come from smbios-mdr in your platform design?\n\u003e \n\u003e \n\u003e I am referring to this MR.\n\u003e https://gerrit.openbmc.org/c/openbmc/bmcweb/+/79157/comment/f6d641f6_3a90d3b8/\n\nYes, my comments in the bmcweb patch were only making sure that, we don\u0027t have assumptions baked in on associating TPM to one particular redfish resource(like chassis), rather the infrastructure should be written in such a way that we would be able to reuse the framework to attach TPM for various redfish resources.",
      "parentUuid": "01601abc_ac4d7443",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8eeb8238_4c64a4d7",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 359,
      "author": {
        "id": 1001516
      },
      "writtenOn": "2025-05-30T04:55:04Z",
      "side": 1,
      "message": "How do we differentiate TPM which we need to self attest vs the ones which we not. Because both will be implementing Inventory.Item.Tpm.interface.yaml",
      "parentUuid": "5d1cef74_18cc9ba1",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30956384_1448d353",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 359,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-06-10T08:59:58Z",
      "side": 1,
      "message": "I think there was some confusion. I have never mentioned \"self attestation\" - I was talking about \"self measurements\". Who are \"we\" in your question ? From redfish perspective, we would see two component integrity resources (and each of them would be tied to its own trusted component) and redfish clients can\nchoose to decide which measurements they want by querying the respective resource. How clients choose the URI depends on various factors, pre-established facts (that can differ from company to company).\n\nAnyway, I plan on removing the self measurements section from this design document and make it a separate patch, since that is causing more confusion to the broader audience. we can talk more about the self measurements in that commit.",
      "parentUuid": "8eeb8238_4c64a4d7",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7cafbe13_480b83e7",
        "filename": "designs/redfish-spdm-attestation.md",
        "patchSetId": 6
      },
      "lineNbr": 359,
      "author": {
        "id": 1001516
      },
      "writtenOn": "2025-06-13T07:22:28Z",
      "side": 1,
      "message": "Ack, we can discuss more on that patch for self-measurement using TPM.",
      "parentUuid": "30956384_1448d353",
      "revId": "63230e92045daa5db966b0a0efecb25444bb9611",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}