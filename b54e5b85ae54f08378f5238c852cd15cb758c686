{
  "comments": [
    {
      "key": {
        "uuid": "18b10918_2c6e79ec",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "daemon (spelling)",
      "range": {
        "startLine": 37,
        "startChar": 53,
        "endLine": 37,
        "endChar": 59
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e87c05c7_bff31539",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-12T02:13:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18b10918_2c6e79ec",
      "range": {
        "startLine": 37,
        "startChar": 53,
        "endLine": 37,
        "endChar": 59
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1ecd111_0a72dce2",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 39,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "communication (spelling)",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 12
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7461984_dab773c5",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 39,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-12T02:13:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b1ecd111_0a72dce2",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 12
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16825c63_bbb51766",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 92,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "I\u0027m not sure if others agree, but I find the use of \"TWI\" throughout this document a bit jarring because it is so unusual.  Can we just call this i2c, since that is what it is?\n\n(I\u0027d prefer this document is more consumable for BMC engineers who are use to \u0027i2c\u0027 and not for \"CMIS Spec Experts\" which might use \"TWI\" for some odd reason.)",
      "range": {
        "startLine": 92,
        "startChar": 15,
        "endLine": 92,
        "endChar": 18
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a92f4dec_64b199da",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 92,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-12T02:13:24Z",
      "side": 1,
      "message": "Hi, Patrick,\n\nThey used the TWI to avoid trademark issue. But I agree with you that this design doc is for BMC community so it\u0027s okay to use I2C directly.\n\nDone.",
      "parentUuid": "16825c63_bbb51766",
      "range": {
        "startLine": 92,
        "startChar": 15,
        "endLine": 92,
        "endChar": 18
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b46ee74_da73106f",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 101,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "human (spelling)\n\nSuggest running `aspell` or similar over this document.  There are probably spelling mistakes that I missed.",
      "range": {
        "startLine": 101,
        "startChar": 52,
        "endLine": 101,
        "endChar": 58
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "043cb39a_d54ff8d4",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 101,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-12T02:13:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2b46ee74_da73106f",
      "range": {
        "startLine": 101,
        "startChar": 52,
        "endLine": 101,
        "endChar": 58
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b63bd2a_9b1aaf22",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "Can we just `systemctl stop ...` in this case?  Do we really need a special debug API?",
      "range": {
        "startLine": 102,
        "startChar": 53,
        "endLine": 106,
        "endChar": 0
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bebb26fa_456c3457",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-12T02:13:24Z",
      "side": 1,
      "message": "The `systemctl stop ...` would stop the entire daemon. Note that the daemon manages multiple modules and we may want to debug only one of them. The main purpose here is to keep the daemon managing other modules while we\u0027re debugging a specific module.\n\nI can certainly modify if this doesn\u0027t align with BMC\u0027s design methodology. What do you think?",
      "parentUuid": "0b63bd2a_9b1aaf22",
      "range": {
        "startLine": 102,
        "startChar": 53,
        "endLine": 106,
        "endChar": 0
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd04c58d_85c82b0d",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-30T19:13:08Z",
      "side": 1,
      "message": "I think it is reasonable to be able to ask the daemon to stop monitoring a particular module then (ie, not start/stop the whole daemon).\n\nDepending on how you detect the modules, you could potentially have a `cmis-monitor@\u003cdevice\u003e.service` who\u0027s \u0027start\u0027/\u0027stop\u0027 routines is something like \u0027cmis-cli start \u003cdevice\u003e\u0027/\u0027cmis-cli stop \u003cdevice\u003e\u0027.  (I\u0027m not suggesting cmis-monitor/cmis-cli is a good name or one you need to pick here; just using as an example).",
      "parentUuid": "bebb26fa_456c3457",
      "range": {
        "startLine": 102,
        "startChar": 53,
        "endLine": 106,
        "endChar": 0
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fa550d0_2eadded3",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-11-30T20:46:17Z",
      "side": 1,
      "message": "wouldn\u0027t the dbus path interface that allows enable/disable be suitable?\n\nsee\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Object/Enable.interface.yaml",
      "parentUuid": "fd04c58d_85c82b0d",
      "range": {
        "startLine": 102,
        "startChar": 53,
        "endLine": 106,
        "endChar": 0
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b7d4fd3_5f4d4c9d",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-01T00:56:33Z",
      "side": 1,
      "message": "Yeah, it seems that the \"xyz/openbmc_project/Object/Enable.interface.yaml\" will serve the purpose.\n\nMarking this as resolved now.",
      "parentUuid": "3fa550d0_2eadded3",
      "range": {
        "startLine": 102,
        "startChar": 53,
        "endLine": 106,
        "endChar": 0
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0dd29bf3_2c504704",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 130,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "I mentioned before concern about having CMIS-specific APIs.  Previously, I understood CMIS to be a specific spec and we don\u0027t usually want to expose specs at a dbus level.  We don\u0027t expose IPMI, PLDM, MCTP, etc.\n\nIt would be nice if we could come up with some kind of abstraction for the underlying device that CMIS is representing and frame this in term of those kind of devices.  The hope would be if some device comes along that exposes those same concepts over PLDM that they can still plug right into the dbus model without major changes.\n\nI\u0027ve reviewed the other properties on this interface but it seems like the only one that is unique is this \"Identifier\" property.  I have a few thoughts:\n\n- Is the way the module is connected to the board really all that interesting?  Is there a hard requirement to be able to expose it outside the BMC, and if so, what value does knowing it provide you?\n\n- This feels like maybe it belongs as a subclass of Inventory/Connector.\n\n- I wonder if we have some other Decorator already with a free-form string that could be used.  If we were talking about a 3-6 entry enumeration, then an enumeration seems fine, but I don\u0027t really like these enumerations where they are a carry forward of some 2 decade old spec with 25+ elements and only 1 or 2 of them are found in modern systems.  If you look at Inventory/Item/Cpu, what we did there in a similar problem, what we did is made them a free-form string where the string values are expected to come from \"DSP0134 Section x.y.z\".",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 130,
        "endChar": 68
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a894f95e_cf572dd4",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 130,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-12T02:13:24Z",
      "side": 1,
      "message": "Thanks very much for the detailed explanation, Patrick! It is a precious lesson for me to learn about BMC interface design.\n\nSince this comment requires quite some design refactoring, so I\u0027d like to confirm the reviewer\u0027s opinion before I change the interface content (which is easy to do but less effective because it\u0027s just a translation of design purpose)\n\n1. \"Is the way the module is connected to the board really all that interesting?\"\nThis doc aims at designing all CMIS-compliant modules, which covers a wide range of forms, e.g. QSFP Double Density (QSFP-DD), OSFP, COBO, QSFP, SFP-DD as well as future forms. The \"Identifier\" would be the major property to differentiate those different forms. It\u0027s register address is Lower Page 00h Byte 0 (the first register in the module EEPROM).\n\n2. \"This feels like maybe it belongs as a subclass of Inventory/Connector.\"\nI fully understand the BMC community\u0027s intention to avoid exposing any specific spec at a dbus level. A subclass of Inventory/Connector seems good to me. But the current Inventory/Connector only contains two interfaces: the Embedded shall not be used for field-replaceable, and the Slot represents a PCIe slot connection. Should I create a new interface under Inventory/Connector?\n\n3. \"...a free-form string that could be used\"\nAgree that a string is more extensible. Previously I used an integer type to represent the Identifier and another reviewer suggested me switching to an enumeration. I can see values from both reviewers\u0027 suggestions. If we want to avoid exposing CMIS specific information in the interface, a string would be the best solution.\n\n\nMarking this as unresolved.",
      "parentUuid": "0dd29bf3_2c504704",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 130,
        "endChar": 68
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52fe1330_9e7f1f45",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 130,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-30T19:13:08Z",
      "side": 1,
      "message": "\u003e 1. \"Is the way the module is connected to the board really all that interesting?\"\n\u003e This doc aims at designing all CMIS-compliant modules, which covers a wide range of forms, e.g. QSFP Double Density (QSFP-DD), OSFP, COBO, QSFP, SFP-DD as well as future forms. The \"Identifier\" would be the major property to differentiate those different forms. It\u0027s register address is Lower Page 00h Byte 0 (the first register in the module EEPROM).\n\nThis still doesn\u0027t tell me if the connection method is interesting.  Who cares about if it is a QSFP-DD or microQSFP form-factor?  I can\u0027t really conceive of cases where this is interesting information to expose to another daemon, unless there is something fundamental in the Redfish API that needs this information.\n\n\u003e Should I create a new interface under Inventory/Connector?\n\nYes, certainly we could add new interfaces under Connector if that\u0027s where it belongs.  Again, I think we\u0027d need to make sure we\u0027re not making something specific to CMIS unless that is really appropriate and necessary.",
      "parentUuid": "a894f95e_cf572dd4",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 130,
        "endChar": 68
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf216228_43ca0737",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 130,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-11-30T20:42:46Z",
      "side": 1,
      "message": "I can take a stab at the connector question. Feel free to chime in Jianqiao\n\n\u003e1. \"Is the way the module is connected to the board really all that interesting?\"\n\u003eThis still doesn\u0027t tell me if the connection method is interesting.  Who cares about if it is a QSFP-DD or microQSFP form-factor?  I can\u0027t really conceive of cases where this is interesting information to expose to another daemon, unless there is something fundamental in the Redfish API that needs this information.\n\nI think it\u0027s useful and there is a use case..  Cable v1.1.0 specifies the connector type (no OSFP yet but we plan on raising an issue to amend it)\nhttps://redfish.dmtf.org/schemas/v1/Cable.v1_1_0.json\n\nSo the driving use case here is that Cable schema specifies connector type and so we\u0027d like the dbus interface to provide enough information to more fully populate the cable resource.\n\nIf you\u0027re looking for a end-user use-case then a contrived example might be that your fleet may have a mixture of CMIS cable types. If there is a problem with a cable then your repair action might be different depending on the connector type.\ne.g we know that connector A is frequently seated incorrectly so the repair action would be to reseat the connector. Connector B never has this issue so maybe do something different.",
      "parentUuid": "52fe1330_9e7f1f45",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 130,
        "endChar": 68
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f662e03_b5940bb2",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 130,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-01T00:56:33Z",
      "side": 1,
      "message": "Agree with Jason.\n\nI\u0027ve already moved \"VendorOUI\" field to a new interface per reviewer\u0027s suggestion. I will also change the Identifier data type from enum to string and move it to \"Inventory/Connector\" once this discussion is closed.",
      "parentUuid": "bf216228_43ca0737",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 130,
        "endChar": 68
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1241d65d_a38bf5ba",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 137,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "Default should be \u0027Unknown\u0027, right?",
      "range": {
        "startLine": 137,
        "startChar": 6,
        "endLine": 137,
        "endChar": 17
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3fb2974_48dc5517",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 137,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-12T02:13:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1241d65d_a38bf5ba",
      "range": {
        "startLine": 137,
        "startChar": 6,
        "endLine": 137,
        "endChar": 17
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ad69923_b2bdff04",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 143,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "OUI sounds like a separate Decorator, not specific to CMIS?",
      "range": {
        "startLine": 140,
        "startChar": 0,
        "endLine": 143,
        "endChar": 53
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a959dcca_0144fbdc",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 143,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-12T02:13:24Z",
      "side": 1,
      "message": "Thanks for the suggestion! Just want to double check:\n\nThe current Decorator folder contains multiple interfaces:\n1. Asset: I can add a new property called \"VendorOUI\" here\n2. ManufacturerExt: I can (a) create a new property here, (2) use the existing ExtendedMFGData property, but it seems not designed for programmatic interrogation.\n3. VendorInformation: This seems applicable for vendor custom fields, so not a good fit for my case.\n4. Creating a new interface.\n\n\nPatrick, which one looks better to you? 1, 2(a) or 4?",
      "parentUuid": "4ad69923_b2bdff04",
      "range": {
        "startLine": 140,
        "startChar": 0,
        "endLine": 143,
        "endChar": 53
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "800f0f06_220c78da",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 143,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-30T19:13:08Z",
      "side": 1,
      "message": "1 or 4 most likely.  Since not every asset has an OUI (only networking ones do) it seems like 4 is best.",
      "parentUuid": "a959dcca_0144fbdc",
      "range": {
        "startLine": 140,
        "startChar": 0,
        "endLine": 143,
        "endChar": 53
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ea144a8_c5a2255e",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 143,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-01T00:56:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "800f0f06_220c78da",
      "range": {
        "startLine": 140,
        "startChar": 0,
        "endLine": 143,
        "endChar": 53
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "571504ee_4d9a2adc",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 146,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "I doubt you really have hardware designs for all of these.  Can we limit to the ones as you implement them?  It doesn\u0027t seem especially interesting to have this many of them, especially if many of them are obsolete technologies.",
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57897f2b_6c908969",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 146,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-12T02:13:24Z",
      "side": 1,
      "message": "This is a good point. Thanks for the suggestion!\n\nI can compress the number of enumeration values to 7~9. But please take a look at my reply to another comments -- probably a string is more suitable for this case.",
      "parentUuid": "571504ee_4d9a2adc",
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6fbda53f_7c27619c",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 153,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "Something clobbered this name.",
      "range": {
        "startLine": 153,
        "startChar": 16,
        "endLine": 153,
        "endChar": 43
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7283b977_b8a6e8e7",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 153,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-12T02:13:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6fbda53f_7c27619c",
      "range": {
        "startLine": 153,
        "startChar": 16,
        "endLine": 153,
        "endChar": 43
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "955d6609_7cc8a8b2",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 166,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "Why do we have them then?",
      "range": {
        "startLine": 163,
        "startChar": 0,
        "endLine": 166,
        "endChar": 33
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5be12750_ce37bfd7",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 166,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-12T02:13:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "955d6609_7cc8a8b2",
      "range": {
        "startLine": 163,
        "startChar": 0,
        "endLine": 166,
        "endChar": 33
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6cdb92cb_56fad622",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 214,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "These don\u0027t seem interesting at a dbus level, even if the spec lists them.\n\n(And \"Vendor specific\" isn\u0027t a valid enumeration name anyhow).",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 214,
        "endChar": 49
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc76942b_c1869ef6",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 214,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-12T02:13:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6cdb92cb_56fad622",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 214,
        "endChar": 49
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f979c596_9e0f905f",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 237,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "Do we need to add dBm into the units?  \n\nIsn\u0027t dBm equivalent to volts, but just on a logarithmic scale?  If so, we\u0027ve generally not created a new unit for these, but would represent them on dbus as volts.  If external interfaces are defined in terms of dBm we\u0027d usually do the conversion at those points (even if in this case there is an awkward double conversion at device ingest and bmcweb).",
      "range": {
        "startLine": 236,
        "startChar": 0,
        "endLine": 237,
        "endChar": 108
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29fe970e_e9253f22",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 237,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-12T02:13:24Z",
      "side": 1,
      "message": "The CMIS module reports raw power in unit of dBm. I notice that the current Sensor/Value interface only support one unit per sensor type. I\u0027m okay to change to Watts to simplify our future implementation.",
      "parentUuid": "f979c596_9e0f905f",
      "range": {
        "startLine": 236,
        "startChar": 0,
        "endLine": 237,
        "endChar": 108
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09677703_f54c0c7b",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 244,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "Again, this seems like something we could make non CMIS specific.  And, it doesn\u0027t seem like Inventory (ie. it isn\u0027t relatively static).",
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84cc59de_8bd0d0bf",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 244,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-12T02:13:24Z",
      "side": 1,
      "message": "No objection to relocate the interface. I just took a look at \"openbmc_project/Network/\" folder but it seems specific to Ethernet. Could you please recommend a path?",
      "parentUuid": "09677703_f54c0c7b",
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5af5717_dbef8ff1",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 244,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-30T19:13:08Z",
      "side": 1,
      "message": "Probably State sub-directory.\n\nCould these same indications be applied to any bus that trains, such as PCIe or DIMMs?  Or any connection that uses optics?\n\nWhatever ends up under \u0027State\u0027 could ideally be written in a way to generically apply to these other types of buses.",
      "parentUuid": "84cc59de_8bd0d0bf",
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a2d8de0_4069061e",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 244,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-01T00:56:33Z",
      "side": 1,
      "message": "I\u0027ve already relocated this interface to \"/xyz/openbmc_project/State/Decorator/LanesStatus.interface.yaml\" and removed any CMIS specific details.\n\nThe Loss of Signal and Loss of Lock have been widely used in network devices. I haven\u0027t seen many cases in PCIe or DIMMs.",
      "parentUuid": "a5af5717_dbef8ff1",
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35353d1e_c7de5517",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 266,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "Is it possible to have LossOfSignal without LossOfLock?  Should this be a boolean or a state (enum)?  It seems like L\u003dFalse,S\u003dTrue is invalid, so we probably shouldn\u0027t do booleans.",
      "range": {
        "startLine": 250,
        "startChar": 0,
        "endLine": 266,
        "endChar": 47
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57bcbec0_52b2151e",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 266,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-12T02:13:24Z",
      "side": 1,
      "message": "LossOfSignal and LossOfLock are two independent properties. One lane in a module could have neither/either/both of them. So the boolean type seems like a good choice.\n\nActually Jason Ling has a good point about how we should associate a lane with a module. For example, a 1U front panel supports up to 36 OSFP (one type of CMIS-compliant set) modules, and each module has 8 lanes. In the current interface design, we need to perform 36 * 8 \u003d 288 queries on dbus to get overall system status. That may cause performance pressure on dbus. So I\u0027m updating the interface here.",
      "parentUuid": "35353d1e_c7de5517",
      "range": {
        "startLine": 250,
        "startChar": 0,
        "endLine": 266,
        "endChar": 47
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5c57a01_97394d6e",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 272,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "This is a statement and not a design.\n\nHopefully you are going to implement the OpenBMC update methods inside this daemon?",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 272,
        "endChar": 79
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c3ca85d_e7649306",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 272,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-11-10T04:26:12Z",
      "side": 1,
      "message": "yes the plan is to reuse the existing software interfaces to provide the firmware upgrade API.\n\nJianqiao - can you modify this paragraph to state this?",
      "parentUuid": "b5c57a01_97394d6e",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 272,
        "endChar": 79
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0be49351_b5561ed3",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 272,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-12T02:13:24Z",
      "side": 1,
      "message": "Done.\n\nThe management daemon will definitely follow OpenBMC interfaces/methods. But I don\u0027t think OpenBMC community will be interested in those CMIS specific firmware upgrade logic so I will create another repository outside of OpenBMC.",
      "parentUuid": "9c3ca85d_e7649306",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 272,
        "endChar": 79
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b94b3b20_5d18ae71",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 272,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-30T19:13:08Z",
      "side": 1,
      "message": "\u003e But I don\u0027t think OpenBMC community will be interested in those CMIS specific firmware upgrade logic so I will create another repository outside of OpenBMC.\n\nThis seems like a leap to make.  I don\u0027t see why we wouldn\u0027t make the repo under the OpenBMC org if it is fulfilling a design we\u0027ve documented here.",
      "parentUuid": "0be49351_b5561ed3",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 272,
        "endChar": 79
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75146749_aa5190b5",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 272,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-01T00:56:33Z",
      "side": 1,
      "message": "Please see my replies in another thread.\n\nWe will pack those CMIS/CDB based firmware upgrade into a standalone library. That library will be used on multiple platforms, including the host, switch and BMC. It shouldn\u0027t contain any BMC specific logic like dbus.",
      "parentUuid": "b94b3b20_5d18ae71",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 272,
        "endChar": 79
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42f40dcb_c684b1d8",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 290,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "\"Debugging\" is mentioned above via a vendor-specific tool.  This seems like it should be direct access to the raw i2c device, which is fine, but is there anything in this daemon itself?  If not, can we just drop it?\n\nYou mentioned in the previous commit some understanding that firmware upgrade was difficult to sequence in the kernel.  Can we point to references here?  My rationale is that if the kernel situation changes some day we should be able to reconsider this aspect of the design just as well.\n\nAt a kernel driver level you\u0027d typically replace my `systemctl stop/start` above with sysfs unbind/bind calls.  Maintaining a lock to user-space isn\u0027t necessary.",
      "range": {
        "startLine": 287,
        "startChar": 0,
        "endLine": 290,
        "endChar": 42
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "021a62cd_8360947e",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 290,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-15T21:39:55Z",
      "side": 1,
      "message": "Please see my reply in another comment. When a module is under debug mode, we expect that:\n1. this proposed management daemon stops its own access to the module, and inform any other services that the module isn\u0027t available. So human can have the full, raw access to the module without interrupts.\n2. this proposed management daemon manages other modules in the system as usual.\nFrom this perspective, firmware upgrade and debugging are equivalent. \n\nAs of reference to firmware upgrade difficulty and \"Maintaining a lock to user-space isn\u0027t necessary.\"-- Updated in the text.",
      "parentUuid": "42f40dcb_c684b1d8",
      "range": {
        "startLine": 287,
        "startChar": 0,
        "endLine": 290,
        "endChar": 42
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2350a942_38cd3ff6",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 292,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-09T21:12:55Z",
      "side": 1,
      "message": "I think kernel developers would debate this sentence. :D  We should probably at least blunt the wording.\n\nUnless we can point to technical reasons, such as dealing with firmware upgrade (why doesn\u0027t power supply update have this issue w.r.t. pmbus though?), I think we have a difficult time accepting this as a non-driver.  I agree that even for me it would probably be easier to write this in user-space, but why do we bother writing anything in the kernel then?  I don\u0027t think \"it is easier to complete the feature\" is a reason we\u0027ve typically accepted and it seems like it is just opening the door for everything device oriented to avoid kernel work whenever the associated developers feel like it.",
      "range": {
        "startLine": 290,
        "startChar": 43,
        "endLine": 292,
        "endChar": 44
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40db97cc_a1fdbac2",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 292,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-11-10T04:26:12Z",
      "side": 1,
      "message": "\u003eUnless we can point to technical reasons, such as dealing with firmware upgrade (why doesn\u0027t power supply update have this issue w.r.t. pmbus though?)\n\nwell dealing with firmware upgrades is one, reporting firmware version, surfacing things like lane based Loss-of-lock/loss-of-signal, CMIS module descriptors etc..\nHwmon doesn\u0027t have buckets that this fits nicely into. We could dump this stuff into debugfs - but that feels like we\u0027re forcing things to fit in the kernel.\n\n\n\u003ebut why do we bother writing anything in the kernel then?\nNot a kernel developer but I typically think of kernel drivers when I want tight performance or if I expect my driver to expose services to be used by subsystems.\n\n\nIs there a reason why we want all device interaction to be stuffed into the kernel?",
      "parentUuid": "2350a942_38cd3ff6",
      "range": {
        "startLine": 290,
        "startChar": 43,
        "endLine": 292,
        "endChar": 44
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b7ac583_51be5cc8",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 292,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-11T17:33:35Z",
      "side": 1,
      "message": "\u003e Is there a reason why we want all device interaction to be stuffed into the kernel?\n\nI don\u0027t have a complete answer for you.  Could probably get some more feedback from others at a broad level to set better guidelines.\n\nWhen the device has a high percentage of overlap with existing kernel subsystems, we save ourselves a lot of code (and pain) by leveraging those kernel subsystems.  i2c, hwmon, iio, etc. have a good amount of code both in the kernel already and in our userspace daemons.  Often when I see someone try to replicate a \"i2c driver in userspace\" they miss out on many of the edge cases that the kernel subsystem already handles, plus they are having to re-implement all the dbus providers because they didn\u0027t leverage that subsystem.\n\nI know that firmware update is a rough edge in the kernel, so I understand why that isn\u0027t easily handled there.  We have a similar story with pmbus and not knowing how to do in-kernel firmware updates, but I think what we do in that case is bind the driver for the typical case (pmbus sensors and errors) and unbind it in the uncommon case of applying a firmware update.\n\nThe majority of what this driver has to do seems to me to have similar overlap with what iio and pmbus do.  You\u0027ve got a heap of sensors, some error state, and a bit of fru-descriptor data.  We\u0027ve already found that it was pretty easy to add iio support to dbus-sensors once we already had hwmon support, because they are so similar, and so I would anticipate a similar amount of overlap on an [in-kernel driver that looks a lot like pmbus or iio even if it doesn\u0027t exactly use those subsystems internally].\n\nI\u0027m not saying this shouldn\u0027t go forward as a user-space driver but I think we need the rationale to be better articulated in the doc.",
      "parentUuid": "40db97cc_a1fdbac2",
      "range": {
        "startLine": 290,
        "startChar": 43,
        "endLine": 292,
        "endChar": 44
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c72f8f79_b156b454",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 8
      },
      "lineNbr": 292,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-11-15T21:39:55Z",
      "side": 1,
      "message": "Thanks for your illuminating comments, Jason and Patrick! \n\nI\u0027ve rewritten this paragraph per feedback from both reviewers.\n\nLet me make my point more clear: both user space daemon and kernel driver can serve the same purpose but neither of them is perfect (I\u0027ve seen all three reviewers admitted this in the comment history). So there is no absolute right choice here. With that in mind, and from the perspective of implementation ease, I\u0027m proposing the user space way and have already made my rationale more clear in the text.\n\nThere are already some kernel developers CC\u0027ed in this change but I haven\u0027t heard any from them. I\u0027m not sure whether there is a better way to consult them. Please let me know if you\u0027ve any suggestions or want to have a wider discussion in weekly OpenBMC forum.",
      "parentUuid": "6b7ac583_51be5cc8",
      "range": {
        "startLine": 290,
        "startChar": 43,
        "endLine": 292,
        "endChar": 44
      },
      "revId": "b54e5b85ae54f08378f5238c852cd15cb758c686",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}