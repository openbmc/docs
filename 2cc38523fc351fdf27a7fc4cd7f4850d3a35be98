{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e80b3e62_66dc3491",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 39,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-30T19:13:08Z",
      "side": 1,
      "message": "Check line-wrapping throughout the document.  I see a number of issues.",
      "range": {
        "startLine": 39,
        "startChar": 76,
        "endLine": 39,
        "endChar": 81
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f02df5c7_5dd75c51",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 39,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-01T00:56:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e80b3e62_66dc3491",
      "range": {
        "startLine": 39,
        "startChar": 76,
        "endLine": 39,
        "endChar": 81
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31bb6e98_866e7ee8",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 59,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-30T19:13:08Z",
      "side": 1,
      "message": "Spelling.",
      "range": {
        "startLine": 59,
        "startChar": 42,
        "endLine": 59,
        "endChar": 53
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f21b152b_7afeb5ac",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 59,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-01T00:56:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31bb6e98_866e7ee8",
      "range": {
        "startLine": 59,
        "startChar": 42,
        "endLine": 59,
        "endChar": 53
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "683adcf9_cb63cd58",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 102,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-01T04:26:33Z",
      "side": 1,
      "message": "This is a design anti-pattern.  FWIW, our private things our our problem (we can talk more offline about how to design them) but splitting up control for a single piece of hardware among various daemons is a huge pain, and is the source of many reliability, performance, and interfacing bugs.  One daemon should be responsible for one piece of hardware.  If you want to share code between them for common stuff, put it in a library that both daemons can use, but being able to control a modules IO access all in one place helps a ton for use cases like firmware update, where the hardware itself is broken, and does crazy stuff like requires all firmware update payloads to be contiguous.\n\nFWIW, an upstream design doc shouldn\u0027t really mention \"private\" use cases, hence the word \"private\" ðŸ˜Š",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 102,
        "endChar": 33
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f8ad009_8d6f66cd",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 102,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2022-01-21T19:05:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "683adcf9_cb63cd58",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 102,
        "endChar": 33
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c4af41c_0bb1d606",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-30T19:13:08Z",
      "side": 1,
      "message": "Sentences shouldn\u0027t start with \u0027and\u0027. ;)",
      "range": {
        "startLine": 103,
        "startChar": 40,
        "endLine": 103,
        "endChar": 43
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "184016ec_8fb92089",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-01T00:56:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3c4af41c_0bb1d606",
      "range": {
        "startLine": 103,
        "startChar": 40,
        "endLine": 103,
        "endChar": 43
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73f481ec_6665a129",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 105,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-01T04:26:33Z",
      "side": 1,
      "message": "For the debug use cases, I\u0027m not understanding why CMIS modules are special.\n\nsystemctl stop CMIS.service should allow all the debugging a person needs.",
      "range": {
        "startLine": 105,
        "startChar": 12,
        "endLine": 105,
        "endChar": 27
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9894a9c_ed0cfeea",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 105,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-02T23:31:55Z",
      "side": 1,
      "message": "Patrick asked a similar question in PatchSet8:\n\n\"Patrick Williams\nNov 09\nCan we just `systemctl stop ...` in this case?  Do we really need a special debug API?\n\nJianqiao Liu\nNov 11\nThe `systemctl stop ...` would stop the entire daemon. Note that the daemon manages multiple modules and we may want to debug only one of them. The main purpose here is to keep the daemon managing other modules while we\u0027re debugging a specific module.\n\nI can certainly modify if this doesn\u0027t align with BMC\u0027s design methodology. What do you think?\n\nPatrick Williams\n2:13 PM\nI think it is reasonable to be able to ask the daemon to stop monitoring a particular module then (ie, not start/stop the whole daemon).\n\nDepending on how you detect the modules, you could potentially have a `cmis-monitor@\u003cdevice\u003e.service` who\u0027s \u0027start\u0027/\u0027stop\u0027 routines is something like \u0027cmis-cli start \u003cdevice\u003e\u0027/\u0027cmis-cli stop \u003cdevice\u003e\u0027.  (I\u0027m not suggesting cmis-monitor/cmis-cli is a good name or one you need to pick here; just using as an example).\n\nJason Ling\n3:46 PM\nwouldn\u0027t the dbus path interface that allows enable/disable be suitable?\n\nsee\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Object/Enable.interface.yaml\n\nJianqiao Liu\n7:56 PM\nYeah, it seems that the \"xyz/openbmc_project/Object/Enable.interface.yaml\" will serve the purpose.\n\nMarking this as resolved now.\n\nPatrick Williams\nDec 01\nYeah, it can be done like that also.  I suspected you\u0027d want some kind of CLI for humans as opposed to a difficult-to-contrive busctl invocation.  `systemctl` is slightly more straight-forward to get the right parameters.\n\nDRAFT \n2:12 PM\nGot it! Thanks for the suggestion!\n\nYes, a CLI tool will be super useful in deployment. I\u0027ve already updated the ASCII diagram.\"\n\n\nPlease feel free to let me know if this doesn\u0027t make sense to you.",
      "parentUuid": "73f481ec_6665a129",
      "range": {
        "startLine": 105,
        "startChar": 12,
        "endLine": 105,
        "endChar": 27
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cb27226_36684760",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 105,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-10T00:25:48Z",
      "side": 1,
      "message": "\u003e Note that the daemon manages multiple modules and we may want to debug only one of them. \n\nThis seems super niche, but sure.  If you\u0027re in a debug context, who cares if the system stops managing all modules, or just one?  If that\u0027s really needed, ideally you\u0027d use the entity-manager mechanisms for removing the configuration item from the particular node, which would in turn stop the device from scanning (given that it would now know nothing about that module).  Given that\u0027s already how most of dbus-sensors works, and phosphor-pid-control works, lets be consistent with that design, and not invent another way to stifle a reactor.\n\nWith all of this said, I\u0027m bikeshedding at this point, and the existence of a debug interface shouldn\u0027t really hold up this review.",
      "parentUuid": "b9894a9c_ed0cfeea",
      "range": {
        "startLine": 105,
        "startChar": 12,
        "endLine": 105,
        "endChar": 27
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16e20030_acc86d0f",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 105,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2022-01-21T19:05:00Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2cb27226_36684760",
      "range": {
        "startLine": 105,
        "startChar": 12,
        "endLine": 105,
        "endChar": 27
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3042736b_0205167c",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 106,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-30T19:13:08Z",
      "side": 1,
      "message": "I still don\u0027t really know what \"export the raw i2c read/write access\" means.  Wouldn\u0027t the debugger just use the kernel APIs for the i2c device directly?",
      "range": {
        "startLine": 106,
        "startChar": 14,
        "endLine": 106,
        "endChar": 75
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a488e670_75bde2ec",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 106,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-01T00:56:33Z",
      "side": 1,
      "message": "I guess it\u0027s more about implementation details. \n\nAs the owner of this CMIS daemon, I hope people use my daemon as much as possible. But you\u0027re right, once the daemon stops it access to the module, it\u0027s purely up to the debugger to decide whether to use the kernel API or this CMIS daemon\u0027s interfaces.",
      "parentUuid": "3042736b_0205167c",
      "range": {
        "startLine": 106,
        "startChar": 14,
        "endLine": 106,
        "endChar": 75
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84348737_1e255831",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 210,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-30T19:13:08Z",
      "side": 1,
      "message": "I prefer \u0027set\u0027 based on the definition.",
      "range": {
        "startLine": 210,
        "startChar": 12,
        "endLine": 210,
        "endChar": 17
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "259a5d76_cd6ba261",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 210,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-01T00:56:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "84348737_1e255831",
      "range": {
        "startLine": 210,
        "startChar": 12,
        "endLine": 210,
        "endChar": 17
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "762b0a91_c5a73e06",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 228,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-30T19:13:08Z",
      "side": 1,
      "message": "I disagree with this direction.  Having repositories outside the organization that are being included in machines maintained by the organization makes it really difficult for us to manage.  This code will be implementing OpenBMC dbus interfaces, using OpenBMC libraries, and being included in OpenBMC machines.  It probably belongs in the OpenBMC org.\n\nUnless, what you are suggesting is that the low-level update itself is a separate executable often provided by a module vendor.  Similar to how the \u0027flashcp\u0027 tool is used by some people to do the low-level flash programming but there is another daemon (phosphor-bmc-code-mgmt) that creates the dbus interfaces and sometimes calls \u0027flashcp\u0027 under the covers.",
      "range": {
        "startLine": 227,
        "startChar": 36,
        "endLine": 228,
        "endChar": 63
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af0a8be7_0b7db2dd",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 228,
      "author": {
        "id": 1001073
      },
      "writtenOn": "2021-12-01T00:56:33Z",
      "side": 1,
      "message": "The intention is to pack all CMIS logic, like firmware upgrade, PRBS (pseudorandom binary sequence) testing and EEPROM layout validation, etc, into a standalone library. This library would be used on multiple platforms, like the host, network switch and BMC. It shouldn\u0027t contain any OpenBMC specific code, like dbus or PLDM. According to the review process, OpenBMC community clearly isn\u0027t interested in CMIS specific logic, like these CDB commands:\n\nCMD 0100h: Get Firmware Info\nCMD 0101h: Start Firmware Download\nCMD 0102h: Abort Firmware Download\nCMD 0103h: Write Firmware Image LPL\n....\n\nThis proposed CMIS daemon will take care of all OpenBMC related stuff. As of firmware upgrade feature, it will call the above external library, pass in some firmware images and i2c interfaces, then wait until the library finishes. Certainly this CMIS daemon will handle errors reported by the library.\n\nLeaving this as unresolved just in case Patrick may want to have more discussion.",
      "parentUuid": "762b0a91_c5a73e06",
      "range": {
        "startLine": 227,
        "startChar": 36,
        "endLine": 228,
        "endChar": 63
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7084e7f_ba9f7adf",
        "filename": "designs/cmis-compliant-module-manager.md",
        "patchSetId": 11
      },
      "lineNbr": 228,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-12-01T04:26:33Z",
      "side": 1,
      "message": "\u003e Having repositories outside the organization that are being included in machines maintained by the organization makes it really difficult for us to manage.\n\n+1.  There are other examples of libraries that are within the openbmc umbrella that are not openbmc specific (sdbusplus), so that shouldn\u0027t be an issue.  Unless you\u0027re planning on starting another LF foundation (or other multi-comany compatible) project, and figuring out all the licensing, code of conduct, CLA, patents, CI and other stuff that openbmc has, I\u0027m guessing this isn\u0027t the right direction.\n\n\u003e it will call the above external library,\n\nI don\u0027t really see why we can\u0027t have both the application and the library live in the openbmc repo.  At which point that another capable org (think LF or similar) wants to take it over, it\u0027s easy enough to move.",
      "parentUuid": "af0a8be7_0b7db2dd",
      "range": {
        "startLine": 227,
        "startChar": 36,
        "endLine": 228,
        "endChar": 63
      },
      "revId": "2cc38523fc351fdf27a7fc4cd7f4850d3a35be98",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}