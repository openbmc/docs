{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "66692a8d_c9197d88",
        "filename": "designs/reactor.md",
        "patchSetId": 8
      },
      "lineNbr": 65,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-09T21:29:09Z",
      "side": 1,
      "message": "But elsewhere you said you were using Boost and sdbusplus and ... ?  What do you really mean by this statement?",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 65,
        "endChar": 34
      },
      "revId": "e147af53a3be4838f161039824099429d7cc2117",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f7ead91_bc6f48d1",
        "filename": "designs/reactor.md",
        "patchSetId": 8
      },
      "lineNbr": 65,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-12-11T04:52:32Z",
      "side": 1,
      "message": "I meant a new external dependency. OpenBMC already relies on Boost and sdbusplus.",
      "parentUuid": "66692a8d_c9197d88",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 65,
        "endChar": 34
      },
      "revId": "e147af53a3be4838f161039824099429d7cc2117",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f434fd92_89eff8c1",
        "filename": "designs/reactor.md",
        "patchSetId": 8
      },
      "lineNbr": 79,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-09T21:29:09Z",
      "side": 1,
      "message": "None of this code is using the sdbusplus coroutine APIs.  I\u0027m rather confused by this reference considering this code:\n\nhttps://github.com/abhilashraju/coroserver/blob/18ac6a7d3ca2b0ec31393fcffeccd9b22b66b526/include/sdbus_calls.hpp#L84",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 79,
        "endChar": 142
      },
      "revId": "e147af53a3be4838f161039824099429d7cc2117",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1420f91_c633c50c",
        "filename": "designs/reactor.md",
        "patchSetId": 8
      },
      "lineNbr": 79,
      "author": {
        "id": 1001762
      },
      "writtenOn": "2024-12-11T04:52:32Z",
      "side": 1,
      "message": "Currently, the sdbusplus APIs have limitations. They only support stackful coroutines using yield_context from Boost.Asio. If we want to use C++ stackless coroutines, we need to rely on sdbusplus::context. However, I don\u0027t see a way to use both boost::asio::context and sdbusplus::context without spawning a separate thread. The design is assumed to target simple single-threaded asynchronous applications.\n\nThis implementation is intended as a reference to address the current limitations in sdbusplus. I hope these issues will be resolved in future updates to sdbusplus.",
      "parentUuid": "f434fd92_89eff8c1",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 79,
        "endChar": 142
      },
      "revId": "e147af53a3be4838f161039824099429d7cc2117",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e3bf695_a36aabea",
        "filename": "designs/reactor.md",
        "patchSetId": 8
      },
      "lineNbr": 151,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-09T21:29:09Z",
      "side": 1,
      "message": "This seems to be a strange statement to me.  Usually a *library* is written with sender/receivers (because it can be more efficient than co-routines) but any proper sender/receiver implementation should trivially be consumable by a co-routine based implementation.  The applications can be written with co-routines _or_ sender/receivers, but the library is done with sender/receivers exclusively.",
      "range": {
        "startLine": 149,
        "startChar": 0,
        "endLine": 151,
        "endChar": 38
      },
      "revId": "e147af53a3be4838f161039824099429d7cc2117",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d01a64e4_2543c032",
        "filename": "designs/reactor.md",
        "patchSetId": 8
      },
      "lineNbr": 153,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-09T21:29:09Z",
      "side": 1,
      "message": "Boost/ASIO already supports sender/receivers.  https://www.boost.org/doc/libs/1_76_0/boost/asio/execution/sender.hpp\n\nWhat would a \"proven networking library\" look like?  stdexec, which is what the C++26 standard is all based on, can handle sockets.  Jagpal added support in sdbusplus for hooking sd_event-based file descriptors to sdbusplus/stdexec, which should also work for sockets.",
      "range": {
        "startLine": 151,
        "startChar": 39,
        "endLine": 153,
        "endChar": 68
      },
      "revId": "e147af53a3be4838f161039824099429d7cc2117",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}