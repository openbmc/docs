{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "79f3a90c_a499eb78",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-12T15:07:41Z",
      "side": 1,
      "message": "I think we have to be really careful about just suggesting that everyone enable every clang-tidy option in existence.  Some of these are coding style recommendations from Google, LLVM, etc. which are not our coding style.  Worse is that by enabling all of these, we end up with the _union_ of all coding styles that exist.\n\nI\u0027m fine with security and performance ones and ones raised by the cpp core guidelines (since we explicitly call that out anyhow) but I don\u0027t think we should enable big sets of the other ones.",
      "revId": "b17a6315b347542d62cd91d4b59a0c450233a17e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79b62959_6ea054f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2024-12-12T15:21:30Z",
      "side": 1,
      "message": "Need inputs from on why these checks enabled on BMCWeb .",
      "parentUuid": "79f3a90c_a499eb78",
      "revId": "b17a6315b347542d62cd91d4b59a0c450233a17e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31f9690b_53b85b16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-12T15:30:31Z",
      "side": 1,
      "message": "If bmcweb wants to enable additional checks on their repository, that is sort of up to them, but we need to make a clear statement for the entirety of the project.  \n\n\"First mover status\" is not a reason to follow everything in bmcweb and I don\u0027t think it is reasonable for us to even spend time coming to consensus on 400 checks.",
      "parentUuid": "79b62959_6ea054f1",
      "revId": "b17a6315b347542d62cd91d4b59a0c450233a17e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e223eb74_c15d2954",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2024-12-12T17:14:40Z",
      "side": 1,
      "message": "To gather early feedback, I initiated discussions on Discord and the mailing list. I also started reviews on selected active repositories to get input from repository users. To kick off the discussion, I began with a base configuration that includes existing checks used across repositories, which enabled tidy checks. I agree with your approach and will not merge any common configuration files until this version is approved by all interested parties. Additionally, we should consider options for using a combination of common and repository-specific sections, which will facilitate future migrations across repositories. This approach will also help accommodate any base configuration changes based on future .clang-tidy releases.",
      "parentUuid": "31f9690b_53b85b16",
      "revId": "b17a6315b347542d62cd91d4b59a0c450233a17e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d162f3cf_0e9ca883",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-12-12T17:26:09Z",
      "side": 1,
      "message": "We need some understanding of what it means to be a \"reference\".  I see the file below was copied from bmcweb (because bmcweb adds some things that shouldn\u0027t be in a general file, and also has history that no longer applies to modern tidy).  Is there a plan to sync this to all repositories and get the issues resolved?\n\nAs much as I really want to see us get to the point where we can claim that the majority of the code passes all these these checks, I don\u0027t think this patch gets us closer to that goal.  Rather than integrating the required changes to the repositories, we debate each individual check, which frankly is a waste of time at this point.  There\u0027s a lot of junk checks in tidy that I enabled in bmcweb just because it was there and passed.\n\nI would much rather we start with one check in the reference file that we want to universally apply, and get that deployed to all our c++ repos.  The actual check almost doesn\u0027t matter (I might recommend the no non-const global variables check), but getting it deployed across the project and the project passing ALSO gets the project compiling against clang, which enables different warnings, and when I\u0027ve turned it on in bmcweb/dbus-sensors/entity-manager, almost always found functional bugs (usually in an error handling case).\n\nOnce we are universally using tidy, and have the rules around things like NOLINT understood then we can incrementally add checks.\n\n\nTo be clear, I want us to get to the point where this can merge, I just think the incremental approach is better.\n\nTL; DR\nTimeline: One check universally applied -\u003e Several checks universally applied -\u003e This patch (or a variation of this patch)",
      "revId": "b17a6315b347542d62cd91d4b59a0c450233a17e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8c1566c_9fb29f6c",
        "filename": "style/cpp/.clang-tidy-cpp",
        "patchSetId": 6
      },
      "lineNbr": 165,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2024-12-12T15:00:21Z",
      "side": 1,
      "message": "@ed BMCWeb curently using  OSX, Fuscia, Webkit specific checks, There is question cam from @stwcx and @manokiran on this Can you please provide inputs related to this ?",
      "revId": "b17a6315b347542d62cd91d4b59a0c450233a17e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bab034be_e2954698",
        "filename": "style/cpp/.clang-tidy-cpp",
        "patchSetId": 6
      },
      "lineNbr": 200,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-12T15:07:41Z",
      "side": 1,
      "message": "There is no reason to have any OSX checks in our reference file.",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 200,
        "endChar": 64
      },
      "revId": "b17a6315b347542d62cd91d4b59a0c450233a17e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d96eeb32_ca582de0",
        "filename": "style/cpp/.clang-tidy-cpp",
        "patchSetId": 6
      },
      "lineNbr": 351,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-12T15:07:41Z",
      "side": 1,
      "message": "This one is another one that is a Google coding style but not ours.",
      "revId": "b17a6315b347542d62cd91d4b59a0c450233a17e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9456925d_a73692ec",
        "filename": "style/cpp/.clang-tidy-cpp",
        "patchSetId": 6
      },
      "lineNbr": 352,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-12T15:07:41Z",
      "side": 1,
      "message": "This doesn\u0027t even do anything without additional configuration.",
      "revId": "b17a6315b347542d62cd91d4b59a0c450233a17e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f274075_24893415",
        "filename": "style/cpp/.clang-tidy-cpp",
        "patchSetId": 6
      },
      "lineNbr": 354,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-12T15:07:41Z",
      "side": 1,
      "message": "Some of these are LLVMs coding styles but not our coding styles.  This is one I especially hate because it defeats the purpose of using auto in the first place.  How do we determine which of these we really care about?\n\nWe have almost 400 checks enabled in this file.  I don\u0027t see how that is practical to review and maintain this.",
      "revId": "b17a6315b347542d62cd91d4b59a0c450233a17e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcd9ebef_dc7cf4f3",
        "filename": "style/cpp/.clang-tidy-cpp",
        "patchSetId": 6
      },
      "lineNbr": 354,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2024-12-13T04:41:54Z",
      "side": 1,
      "message": "Added New template , which is reduced set also used grouping approch. Please reveiw this and provide feedback.\n\nbelow information provides additional inputs about this grouping and how it helps \n kind of info. Based on openbmc requirements we can add or remove the group from this list.\n \nMinimum Recommended CERT Checks\n1. clang-analyzer-core.*: Core checks for common issues like null dereferences, divide-by-zero, and uninitialized variables.\n2. clang-analyzer-cplusplus.*: Checks specific to C++ features, such as smart pointers, new/delete operations, and virtual calls.\n3. clang-analyzer-deadcode.*: Detects dead code, such as unused variables and unreachable code.\n4. clang-analyzer-nullability.*: Checks related to nullability annotations and null pointer dereferences.\n5. clang-analyzer-optin.*: Optional checks that are not enabled by default but can be useful for catching specific issues.\n6. clang-analyzer-security.*: Security-related checks, such as detecting the use of insecure functions.\n7. clang-analyzer-unix.*: Checks for Unix-specific issues, such as incorrect usage of POSIX functions.\n8. clang-analyzer-valist.*: Checks for issues related to variadic functions and va_list usage.\n9. clang-analyzer-apiModeling. -- Not supported.\nDeclarations and Initialization\n10. cert-dcl03-c: Detects the use of identifiers with conflicting linkage.\n11. cert-dcl21-cpp: Flags the use of delete on polymorphic base class pointers.\n12. cert-dcl50-cpp: Detects the use of dynamic exception specifications.\nError Handling\n13. cert-err34-c: Ensures that error codes are checked.\n14. cert-err52-cpp: Flags the use of throw in destructors.\n15. cert-err60-cpp: Detects the use of catch(...) without rethrowing.\nFile I/O\n16. cert-fio38-c: Ensures that file operations are checked for errors.\n17. cert-fio54-c: Ensures that file descriptors are closed properly.\n18. cert-fio57-c: Detects the use of fgets with untrusted buffers.\nSecurity\n19. cert-env33-c: Ensures that environment variables are sanitized.\n20. cert-fio45-c: Ensures that file paths are sanitized.\n21. cert-fio62-c: Flags the use of fopen with untrusted file names\n\n\nType Safety\n22. cppcoreguidelines-pro-type-cstyle-cast: Flags C-style casts.\n23. cppcoreguidelines-pro-type-member-init: Ensures that all members are initialized in constructors.\n24. cppcoreguidelines-pro-type-reinterpret-cast: Flags reinterpret_cast usage.\n25. cppcoreguidelines-pro-type-static-cast-downcast: Flags downcasts using static_cast.\nResource Management\n26. cppcoreguidelines-pro-bounds-array-to-pointer-decay: Flags array-to-pointer decay.\n27. cppcoreguidelines-pro-bounds-constant-array-index: Ensures array indices are within bounds.\n28. cppcoreguidelines-pro-bounds-pointer-arithmetic: Flags pointer arithmetic.\n29. cppcoreguidelines-pro-type-vararg: Flags usage of variadic functions.\nReadability and Maintainability\n30. cppcoreguidelines-avoid-magic-numbers: Flags magic numbers.\n31. cppcoreguidelines-avoid-non-const-global-variables: Flags non-const global variables.\n32. cppcoreguidelines-avoid-goto: Flags usage of goto.\n33. cppcoreguidelines-special-member-functions: Ensures special member functions are properly defined.\nModern C++ Practices\n34. cppcoreguidelines-init-variables: Ensures variables are initialized.\n35. cppcoreguidelines-no-malloc: Flags usage of malloc and free.\n36. cppcoreguidelines-owning-memory: Ensures proper ownership of dynamically allocated memory.\n37. cppcoreguidelines-slicing: Flags object slicing.\nPerformance\n38. cppcoreguidelines-narrowing-conversions: Flags narrowing conversions.\n39. cppcoreguidelines-pro-type-union-access: Flags unsafe union access.\n40. cppcoreguidelines-pro-type-const-cast: Flags const_cast usage.\n41. cppcoreguidelines-pro-type-union-access: Flags unsafe union access.\n\nGeneral Code Quality\n42. misc-definitions-in-headers: Flags definitions in header files.\n43. misc-dangling-handle: Detects dangling handles, such as file descriptors or sockets.\n44. misc-misleading-bidirectional: Flags misleading bidirectional text.\n45. misc-new-delete-overloads: Ensures that new and delete operators are correctly overloaded.\n46. misc-non-copyable-objects: Detects non-copyable objects that are copied.\n47. misc-no-recursion: Flags recursive function calls.\n48. misc-redundant-expression: Detects redundant expressions.\n49. misc-static-assert: Ensures that static_assert is used correctly.\n50. misc-throw-by-value-catch-by-reference: Ensures exceptions are thrown by value and caught by reference.\n51. misc-undelegated-constructor: Flags constructors that do not delegate.\n52. misc-unused-alias-decls: Detects unused alias declarations.\n53. misc-unused-parameters: Flags unused parameters in function definitions.\nInclude Management\n54. misc-include-cleaner: Checks for unused and missing includes.\nReadability and Maintainability\n55. misc-confusable-identifiers: Flags identifiers that are easily confusable.\n56. misc-const-correctness: Ensures const correctness.\n57. misc-coroutine-hostile-raii: Flags RAII objects that are hostile to coroutines.\nUse of Modern C++ Features\n58. modernize-use-auto: Replaces explicit type declarations with auto where appropriate.\n59. modernize-use-bool-literals: Replaces integer literals used as booleans with true and false.\n60. modernize-use-default-member-init: Uses default member initializers instead of assigning in constructors.\n61. modernize-use-emplace: Replaces push_back and insert with emplace_back and emplace.\n62. modernize-use-equals-default: Replaces defaulted special member functions with \u003d default.\n63. modernize-use-equals-delete: Replaces deleted special member functions with \u003d delete.\n64. modernize-use-nullptr: Replaces NULL and 0 with nullptr.\n65. modernize-use-override: Ensures that overridden functions are marked with override.\n66. modernize-use-using: Replaces typedef with using.\nPerformance Improvements\n67. modernize-loop-convert: Converts loops to range-based for loops where possible.\n68. modernize-pass-by-value: Replaces pass-by-reference with pass-by-value for parameters that are copied.\n69. modernize-redundant-void-arg: Removes redundant void arguments in function declarations.\n70. modernize-replace-auto-ptr: Replaces std::auto_ptr with std::unique_ptr.\n71. modernize-shrink-to-fit: Uses shrink_to_fit to reduce the capacity of containers.\n72. modernize-unary-static-assert: Replaces static_assert with a single argument with the unary form.\nCode Simplification\n73. modernize-avoid-bind: Replaces std::bind with lambdas.\n74. modernize-deprecated-headers: Replaces deprecated C++ standard library headers with their modern equivalents.\n75. modernize-deprecated-ios-base-aliases: Replaces deprecated std::ios_base aliases.\n76. modernize-make-shared: Uses std::make_shared instead of std::shared_ptr constructor.\n77. modernize-make-unique: Uses std::make_unique instead of std::unique_ptr constructor.\n78. modernize-raw-string-literal: Replaces regular string literals with raw string literals where appropriate.\n79. modernize-redundant-void-arg: Removes redundant void arguments in function declarations.\n80. modernize-replace-disallow-copy-and-assign-macro: Replaces macros that disallow copy and assign with \u003d delete.\n81. modernize-return-braced-init-list: Uses braced-init-list for return statements.\n82. modernize-use-noexcept: Adds noexcept specifier to functions that do not throw exceptions.\n83. modernize-use-transparent-functors: Uses transparent functors for standard library algorithms.\nMemory Management\n84. performance-inefficient-algorithm: Flags inefficient algorithms that can be replaced with more efficient ones.\n85. performance-inefficient-vector-operation: Detects inefficient vector operations.\n86. performance-move-const-arg: Flags cases where a const argument is passed to a function that takes it by value.\n87. performance-move-constructor-init: Ensures that move constructors initialize members efficiently.\n88. performance-no-automatic-move: Detects cases where automatic move operations are not used.\n89. performance-noexcept-move-constructor: Ensures that move constructors are marked noexcept.\n90. performance-trivially-destructible: Flags non-trivially destructible types that could be made trivially destructible.\nLoop Optimization\n91. performance-for-range-copy: Detects range-based for loops that make unnecessary copies.\n92. performance-for-range-reference: Ensures that range-based for loops use references where appropriate.\n93. performance-unnecessary-copy-initialization: Flags unnecessary copy initializations.\nData Structures\n94. performance-type-promotion-in-math-fn: Detects type promotions in mathematical functions that can be avoided.\n95. performance-unnecessary-value-param: Flags value parameters that could be passed by reference to avoid unnecessary copies.\nNaming and Consistency\n96. readability-identifier-naming: Enforces consistent naming conventions for identifiers.\n97. readability-inconsistent-declaration-parameter-name: Ensures parameter names are consistent across declarations and definitions.\nCode Structure and Style\n98. readability-braces-around-statements: Ensures that all statements are enclosed in braces.\n99. readability-else-after-return: Flags else statements that follow a return statement.\n100. readability-function-cognitive-complexity: Measures the cognitive complexity of functions.\n101. readability-isolate-declaration: Ensures that declarations are isolated from other statements.\n102. readability-magic-numbers: Flags the use of magic numbers in the code.\n103. readability-make-member-function-const: Ensures member functions that do not modify the object are marked const.\n104. readability-named-parameter: Ensures that function parameters are named.\n105. readability-non-const-parameter: Flags non-const parameters that could be made const.\n106. readability-redundant-control-flow: Detects redundant control flow statements.\n107. readability-redundant-declaration: Flags redundant declarations.\n108. readability-redundant-member-init: Flags redundant member initializations.\n109. readability-simplify-boolean-expr: Simplifies boolean expressions.\n110. readability-static-accessed-through-instance: Flags static members accessed through an instance.\n111. readability-string-compare: Ensures string comparisons are done correctly.\nComments and Documentation\n112. readability-implicit-bool-cast: Flags implicit casts to bool.\n113. readability-convert-member-functions-to-static: Converts member functions that do not access instance data to static functions.\n114. readability-uppercase-literal-suffix: Ensures that literal suffixes are uppercase.\n115. readability-use-anyofallof: Encourages the use of std::any_of and std::all_of instead of manual loops.",
      "parentUuid": "6f274075_24893415",
      "revId": "b17a6315b347542d62cd91d4b59a0c450233a17e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0378435c_bf8b6d7d",
        "filename": "style/cpp/.clang-tidy-cpp",
        "patchSetId": 6
      },
      "lineNbr": 386,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-12T15:07:41Z",
      "side": 1,
      "message": "This isn\u0027t appropriate for all repositories.  Should we even bother with it?",
      "range": {
        "startLine": 378,
        "startChar": 0,
        "endLine": 386,
        "endChar": 79
      },
      "revId": "b17a6315b347542d62cd91d4b59a0c450233a17e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e29d265_622a479d",
        "filename": "style/cpp/.clang-tidy-cpp",
        "patchSetId": 6
      },
      "lineNbr": 386,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2024-12-12T15:20:14Z",
      "side": 1,
      "message": "This one added as a reference for openbmc naming conventions. I noticed some of checks are specific  to repository.  It will be good to Keep the Naming convention here that will help repo users/maintainers to follow the OpenBMC naming convention.s",
      "parentUuid": "0378435c_bf8b6d7d",
      "range": {
        "startLine": 378,
        "startChar": 0,
        "endLine": 386,
        "endChar": 79
      },
      "revId": "b17a6315b347542d62cd91d4b59a0c450233a17e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "672c6336_73588c4b",
        "filename": "style/cpp/.clang-tidy-cpp",
        "patchSetId": 6
      },
      "lineNbr": 386,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-12-12T15:28:14Z",
      "side": 1,
      "message": "There is a conflict with what is written here though:\n\nhttps://github.com/openbmc/docs/blame/67032dffe31f98a8638927f74a7a35990d6a1fbc/cpp-style-and-conventions.md#L327\n\nThere isn\u0027t any way (that I know of) to say that lower_case is always allowed.  That is how some repos are written.",
      "parentUuid": "6e29d265_622a479d",
      "range": {
        "startLine": 378,
        "startChar": 0,
        "endLine": 386,
        "endChar": 79
      },
      "revId": "b17a6315b347542d62cd91d4b59a0c450233a17e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}