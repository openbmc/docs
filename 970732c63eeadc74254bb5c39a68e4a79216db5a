{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0923989e_e545c763",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-11-27T23:23:53Z",
      "side": 1,
      "message": "Hi Chris, thanks again for the updates. I\u0027ve got a couple of comments regarding formatting and an outstanding community query on integrating devicetree support directly into EM, but other than that it\u0027s starting to feel sensible.\n\nHowever, can you please mark old conversations that we\u0027ve worked through as resolved so it\u0027s clear we\u0027re making progress?",
      "revId": "970732c63eeadc74254bb5c39a68e4a79216db5a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efb4633f_267a3e16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2023-11-28T23:07:20Z",
      "side": 1,
      "message": "Apologies for being fairly late to the party here -- I *think* I\u0027ve read or at least skimmed through all the discussion that\u0027s taken place here (hopefully I haven\u0027t missed something where my thoughts here have already been addressed) but: to take a step back for a moment, it seems like there are two relatively independent aspects in consideration here:\n\n - how to retrieve hardware ID data from where it\u0027s stored\n - the format of that data and how to parse it into useful metadata fields\n \nThe problem at hand is that HPE hardware does non-standard things for both.\n\nLooking at the existing state of things, E-M\u0027s fru-device daemon only supports the standard IPMI FRU data format, but it *is* capable of retrieving that data via different means (manual userspace I2C transactions, reading from an eeprom file provided by a kernel driver, or from a regular file in `/etc`).  In a hypothetical world in which HPE systems still had their hardware ID data stored in the secure element but did so in the standard IPMI FRU format, I think the approach to take would be to create a means to plumb that data into the existing fru-device daemon.\n\nLooking at the other side, in another hypothetical in which HPE systems used the same proprietary data format they do but stored it in a standard I2C eeprom, I\u0027d be inclined to just add some logic to fru-device to make it able to recognize and parse the alternate format -- in fact, while it\u0027s been a bit dormant for a while, I\u0027ve actually made some efforts on that front previously (for a different format, obviously): https://gerrit.openbmc.org/c/openbmc/entity-manager/+/49341\n\nSo given the above, what I\u0027m wondering is if we could just make fru-device handle it itself, without introducing any new daemons or the like.  I guess my open question would be:\n\n - Is the access channel to the secure element only available during the early boot phase, or can the HW ID data still be retrieved once Linux is up and running on the BMC?\n   - If the latter, would it be feasible to create a driver that would expose that data as a file in a way similar to how I2C eeprom data is exposed in sysfs?\n   - If the former, could we just have u-boot drop the entire blob into a designated FDT node?\n\n - Does the proprietary data format preclude having an open-source parser for it?",
      "revId": "970732c63eeadc74254bb5c39a68e4a79216db5a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f6902ba_012ea715",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-11-28T23:18:39Z",
      "side": 1,
      "message": "\u003e Is the access channel to the secure element only available during the early boot phase, or can the HW ID data still be retrieved once Linux is up and running on the BMC?\n\nI hadn\u0027t got a direct answer to that by my inferred answer was \"no\", but it\u0027s not clear to me why it\u0027s \"no\" (maybe some e.g. TrustZone-style separation of privileged hardware?). Clarification of the mechanics would be a good addition to the document.\n\n\u003e If the former, could we just have u-boot drop the entire blob into a designated FDT node?\n\nI think that\u0027s where things are at now? There was also discussion about exposing the mentioned reserved memory via Linux, but it seems that\u0027s not preserved long enough in the boot process? It\u0027s not clear to me whether that is a requirement, a constraint, or some kind of engineering decision that might have more flexibility.\n\n\u003e Does the proprietary data format preclude having an open-source parser for it?\n\nI think that\u0027s in their u-boot fork that transforms the data in the reserved memory into attributes in the devicetree.",
      "parentUuid": "efb4633f_267a3e16",
      "revId": "970732c63eeadc74254bb5c39a68e4a79216db5a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9848b274_87164c11",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2023-11-29T00:56:55Z",
      "side": 1,
      "message": "\u003e\u003e could we just have u-boot drop the entire blob into a designated FDT node?\n\u003e\n\u003e I think that\u0027s where things are at now? \n\nHmm, I had thought the current idea was to have u-boot parse it and create per-field FDT nodes for things like model \u0026 serial number?  (i.e. what\u0027s described in lines 46-47 of the current version of the doc)  What I meant was to just leave it in its original un-parsed binary form to pass it through to linux (and thus its userspace) and let a parser in fru-device extract the needed fields from that.\n\n\u003e I think that\u0027s in their u-boot fork that transforms the data in the reserved memory into attributes in the devicetree.\n\nAh, yes, and looking back at lines 42-44 that would seem to imply that an open-source parser for the proprietary format is indeed OK.",
      "parentUuid": "6f6902ba_012ea715",
      "revId": "970732c63eeadc74254bb5c39a68e4a79216db5a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3d33e6e_4463e72a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-11-29T01:04:51Z",
      "side": 1,
      "message": "\u003e What I meant was to just leave it in its original un-parsed binary form to pass it through to linux (and thus its userspace) and let a parser in fru-device extract the needed fields from that.\n\nAh, so that feels a little abusive of devicetree. However we did dive down a related path in attempting to expose the reserved memory containing the data. But again, that didn\u0027t seem possible for some reason, though it wasn\u0027t clear why not and whether that could be changed:\n\nhttps://gerrit.openbmc.org/c/openbmc/docs/+/65678/comment/514b891b_6b4246c5/\n\nI asked Chris to add that discussion to the `Alternatives Considered` section.",
      "parentUuid": "9848b274_87164c11",
      "revId": "970732c63eeadc74254bb5c39a68e4a79216db5a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94f235a7_070934f8",
        "filename": "designs/oem/hpe/hpe_hw_detect_no-fru.md",
        "patchSetId": 9
      },
      "lineNbr": 44,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-11-27T23:23:53Z",
      "side": 1,
      "message": "Can we add the discussion about exposing the reserved memory under Linux to the \"Alternatives Considered\" section?",
      "range": {
        "startLine": 42,
        "startChar": 9,
        "endLine": 44,
        "endChar": 48
      },
      "revId": "970732c63eeadc74254bb5c39a68e4a79216db5a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3f49fd6_1041f54f",
        "filename": "designs/oem/hpe/hpe_hw_detect_no-fru.md",
        "patchSetId": 9
      },
      "lineNbr": 49,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-11-27T23:23:53Z",
      "side": 1,
      "message": "This link fails to render correctly in the document:\n\nhttps://gerrit.openbmc.org/plugins/gitiles/openbmc/docs/+/970732c63eeadc74254bb5c39a68e4a79216db5a/designs/oem/hpe/hpe_hw_detect_no-fru.md#background-and-references\n\nNote that markdown generally supports \"reference links\" that allow you to separate the URL from the hyperlink markup:\n\nhttps://github.github.com/gfm/#reference-link\n\nYou can do this instead:\n\n```\n... [\u0027model\u0027 and \u0027serial-number,\u0027 which both have well-known paths in the device tree root][dt-spec-chap3-root-node].\n\n[dt-spec-chap3-root-node]: https://github.com/devicetree-org/devicetree-specification/blob/main/source/chapter3-devicenodes.rst#root-node\n```",
      "range": {
        "startLine": 47,
        "startChar": 27,
        "endLine": 49,
        "endChar": 113
      },
      "revId": "970732c63eeadc74254bb5c39a68e4a79216db5a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "149d5e75_53e1a7c5",
        "filename": "designs/oem/hpe/hpe_hw_detect_no-fru.md",
        "patchSetId": 9
      },
      "lineNbr": 90,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-11-27T23:23:53Z",
      "side": 1,
      "message": "I\u0027m wondering whether we just glue devicetree probe support directly into EM and save the DBus side of things.\n\nI\u0027ve brought it up on Discord also:\n\nhttps://discord.com/channels/775381525260664832/819741065531359263/1178834869351092254",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 90,
        "endChar": 10
      },
      "revId": "970732c63eeadc74254bb5c39a68e4a79216db5a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f45b4523_4075f54d",
        "filename": "designs/oem/hpe/hpe_hw_detect_no-fru.md",
        "patchSetId": 9
      },
      "lineNbr": 97,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-11-27T23:23:53Z",
      "side": 1,
      "message": "I wouldn\u0027t say \"written to file paths in ...\" but rather \"exposed as devicetree attributes\"",
      "range": {
        "startLine": 97,
        "startChar": 20,
        "endLine": 97,
        "endChar": 27
      },
      "revId": "970732c63eeadc74254bb5c39a68e4a79216db5a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3664310_0c24ed18",
        "filename": "designs/oem/hpe/hpe_hw_detect_no-fru.md",
        "patchSetId": 9
      },
      "lineNbr": 99,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-11-27T23:23:53Z",
      "side": 1,
      "message": "A formatting comment rather than a content comment, but can you make the various cases, the pros and the cons subheaders so we can more easily distinguish them from the properties?\n\n```\n## Alternatives Considered\n\n### All HW ID data is ...\n\n#### Pros\n1. ...\n2. ...\n\n#### Cons\n1. ...\n2. ...\n```\n\nAlso, instead of bullets it\u0027s much more useful to use numbered lists so we can discuss the properties by reference to their number.",
      "revId": "970732c63eeadc74254bb5c39a68e4a79216db5a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e8a2897_e843e033",
        "filename": "designs/oem/hpe/hpe_hw_detect_no-fru.md",
        "patchSetId": 9
      },
      "lineNbr": 99,
      "author": {
        "id": 1000733
      },
      "writtenOn": "2023-11-28T23:07:20Z",
      "side": 1,
      "message": "\u003e Also, instead of bullets it\u0027s much more useful to use numbered lists so we can discuss the properties by reference to their number.\n\nNot to get too bikesheddy here, but FWIW I don\u0027t 100% agree there -- IMO numbering is more applicable when there is a particular meaningful order for the items (like steps in a sequence, whereas this is basically just a set with an arbitrary order imposed for the purpose of writing it down).  It also incurs more ancillary book-keeping work if any adjustments are made (adding or removing at anything but the end of the list implies a bunch of renumbering of existing entries).  The markdown feature of allowing you to write just a plain `1.` on every entry and have \"real\" numbers assigned when rendered helps there, but then you kinda defeat the intended purpose here in that you lose the ability to usefully refer to item number N when looking at the un-rendered source (which for me anyway is a pretty large fraction of the time).",
      "parentUuid": "f3664310_0c24ed18",
      "revId": "970732c63eeadc74254bb5c39a68e4a79216db5a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f37c2ea_6c3a24e0",
        "filename": "designs/oem/hpe/hpe_hw_detect_no-fru.md",
        "patchSetId": 9
      },
      "lineNbr": 99,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-11-28T23:18:39Z",
      "side": 1,
      "message": "It\u0027s less about an ordering and more about a unique identifier. It just happens to be the case that Markdown\u0027s unique identifiers also provide ordering. I also don\u0027t find numbering that much of a burden when there\u0027s only a handful of related elements. I didn\u0027t do a survey to figure out whether I\u0027m in the minority there though 😊",
      "parentUuid": "9e8a2897_e843e033",
      "revId": "970732c63eeadc74254bb5c39a68e4a79216db5a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}